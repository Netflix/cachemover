!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit A_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::A_formatter
A_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class A_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
Arg	tests/catch.hpp	/^    class Arg : public ParserRefImpl<Arg> {$/;"	c	namespace:Catch
AssertionInfo	tests/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AutoReg	tests/catch.hpp	/^struct AutoReg : NonCopyable {$/;"	s	namespace:Catch
BENCHMARK	tests/catch.hpp	2811;"	d
BOLD	include/spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink
B_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit B_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::B_formatter
B_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class B_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
CATCH_ARC_ENABLED	tests/catch.hpp	1369;"	d
CATCH_ARC_STRONG	tests/catch.hpp	1387;"	d
CATCH_ARC_STRONG	tests/catch.hpp	1403;"	d
CATCH_BREAK_INTO_DEBUGGER	tests/catch.hpp	6262;"	d
CATCH_CATCH_ALL	tests/catch.hpp	380;"	d
CATCH_CATCH_ANON	tests/catch.hpp	381;"	d
CATCH_CLARA_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6751;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6728;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6730;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6755;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6785;"	d
CATCH_CONFIG_ALL_PARTS	tests/catch.hpp	51;"	d
CATCH_CONFIG_COLOUR_NONE	tests/catch.hpp	182;"	d
CATCH_CONFIG_COLOUR_NONE	tests/catch.hpp	231;"	d
CATCH_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	4874;"	d
CATCH_CONFIG_COUNTER	tests/catch.hpp	311;"	d
CATCH_CONFIG_CPP11_TO_STRING	tests/catch.hpp	326;"	d
CATCH_CONFIG_CPP17_OPTIONAL	tests/catch.hpp	330;"	d
CATCH_CONFIG_CPP17_STRING_VIEW	tests/catch.hpp	338;"	d
CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	tests/catch.hpp	334;"	d
CATCH_CONFIG_CPP17_VARIANT	tests/catch.hpp	342;"	d
CATCH_CONFIG_DEFAULT_REPORTER	tests/catch.hpp	4910;"	d
CATCH_CONFIG_DEFAULT_REPORTER	tests/catch.hpp	4913;"	d
CATCH_CONFIG_DISABLE_EXCEPTIONS	tests/catch.hpp	354;"	d
CATCH_CONFIG_DISABLE_MATCHERS	tests/catch.hpp	59;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	tests/catch.hpp	1733;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	tests/catch.hpp	62;"	d
CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER	tests/catch.hpp	1734;"	d
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER	tests/catch.hpp	1730;"	d
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER	tests/catch.hpp	1731;"	d
CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER	tests/catch.hpp	1732;"	d
CATCH_CONFIG_EXTERNAL_INTERFACES	tests/catch.hpp	57;"	d
CATCH_CONFIG_MAIN	tests/main.cpp	1;"	d	file:
CATCH_CONFIG_NEW_CAPTURE	tests/catch.hpp	350;"	d
CATCH_CONFIG_NO_CPP17_VARIANT	tests/catch.hpp	300;"	d
CATCH_CONFIG_POLYFILL_ISNAN	tests/catch.hpp	358;"	d
CATCH_CONFIG_POSIX_SIGNALS	tests/catch.hpp	318;"	d
CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	tests/catch.hpp	389;"	d
CATCH_CONFIG_WCHAR	tests/catch.hpp	322;"	d
CATCH_CONFIG_WINDOWS_SEH	tests/catch.hpp	314;"	d
CATCH_CPP14_OR_GREATER	tests/catch.hpp	126;"	d
CATCH_CPP17_OR_GREATER	tests/catch.hpp	130;"	d
CATCH_DEFER	tests/catch.hpp	696;"	d
CATCH_DEFINED_NOMINMAX	tests/catch.hpp	6278;"	d
CATCH_DEFINED_WIN32_LEAN_AND_MEAN	tests/catch.hpp	6282;"	d
CATCH_EMPTY	tests/catch.hpp	695;"	d
CATCH_ENFORCE	tests/catch.hpp	3704;"	d
CATCH_ERROR	tests/catch.hpp	3700;"	d
CATCH_IMPL	tests/catch.hpp	50;"	d
CATCH_INTERNAL_CONFIG_COUNTER	tests/catch.hpp	271;"	d
CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL	tests/catch.hpp	287;"	d
CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW	tests/catch.hpp	279;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	tests/catch.hpp	136;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	tests/catch.hpp	225;"	d
CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED	tests/catch.hpp	248;"	d
CATCH_INTERNAL_CONFIG_NEW_CAPTURE	tests/catch.hpp	346;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	tests/catch.hpp	188;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	tests/catch.hpp	215;"	d
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE	tests/catch.hpp	200;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	tests/catch.hpp	177;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	tests/catch.hpp	181;"	d
CATCH_INTERNAL_CONFIG_NO_WCHAR	tests/catch.hpp	254;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	tests/catch.hpp	194;"	d
CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN	tests/catch.hpp	260;"	d
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS	tests/catch.hpp	171;"	d
CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	tests/catch.hpp	240;"	d
CATCH_INTERNAL_ERROR	tests/catch.hpp	3698;"	d
CATCH_INTERNAL_LINEINFO	tests/catch.hpp	468;"	d
CATCH_INTERNAL_STRINGIFY	tests/catch.hpp	2509;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	tests/catch.hpp	141;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	tests/catch.hpp	366;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	tests/catch.hpp	148;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	tests/catch.hpp	362;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	tests/catch.hpp	154;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	tests/catch.hpp	370;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	tests/catch.hpp	160;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	tests/catch.hpp	374;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	tests/catch.hpp	145;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	tests/catch.hpp	367;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	tests/catch.hpp	151;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	tests/catch.hpp	363;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	tests/catch.hpp	157;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	tests/catch.hpp	371;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	tests/catch.hpp	163;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	tests/catch.hpp	375;"	d
CATCH_PLATFORM_IPHONE	tests/catch.hpp	74;"	d
CATCH_PLATFORM_LINUX	tests/catch.hpp	78;"	d
CATCH_PLATFORM_MAC	tests/catch.hpp	72;"	d
CATCH_PLATFORM_WINDOWS	tests/catch.hpp	7115;"	d
CATCH_PLATFORM_WINDOWS	tests/catch.hpp	81;"	d
CATCH_PREPARE_EXCEPTION	tests/catch.hpp	3696;"	d
CATCH_RECURSE	tests/catch.hpp	687;"	d
CATCH_RECURSION_LEVEL0	tests/catch.hpp	676;"	d
CATCH_RECURSION_LEVEL1	tests/catch.hpp	677;"	d
CATCH_RECURSION_LEVEL2	tests/catch.hpp	678;"	d
CATCH_RECURSION_LEVEL3	tests/catch.hpp	679;"	d
CATCH_RECURSION_LEVEL4	tests/catch.hpp	680;"	d
CATCH_RECURSION_LEVEL5	tests/catch.hpp	681;"	d
CATCH_RECURSION_LEVEL6	tests/catch.hpp	686;"	d
CATCH_REC_END	tests/catch.hpp	692;"	d
CATCH_REC_GET_END	tests/catch.hpp	700;"	d
CATCH_REC_GET_END1	tests/catch.hpp	699;"	d
CATCH_REC_GET_END2	tests/catch.hpp	698;"	d
CATCH_REC_LIST	tests/catch.hpp	718;"	d
CATCH_REC_LIST0	tests/catch.hpp	705;"	d
CATCH_REC_LIST0_UD	tests/catch.hpp	709;"	d
CATCH_REC_LIST1	tests/catch.hpp	706;"	d
CATCH_REC_LIST1_UD	tests/catch.hpp	710;"	d
CATCH_REC_LIST2	tests/catch.hpp	707;"	d
CATCH_REC_LIST2_UD	tests/catch.hpp	711;"	d
CATCH_REC_LIST_UD	tests/catch.hpp	716;"	d
CATCH_REC_NEXT	tests/catch.hpp	703;"	d
CATCH_REC_NEXT0	tests/catch.hpp	701;"	d
CATCH_REC_NEXT1	tests/catch.hpp	702;"	d
CATCH_REC_OUT	tests/catch.hpp	693;"	d
CATCH_REGISTER_ENUM	tests/catch.hpp	2032;"	d
CATCH_REGISTER_LISTENER	tests/catch.hpp	5674;"	d
CATCH_REGISTER_REPORTER	tests/catch.hpp	5669;"	d
CATCH_REGISTER_TAG_ALIAS	tests/catch.hpp	480;"	d
CATCH_RUNTIME_ERROR	tests/catch.hpp	3702;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	tests/catch.hpp	6727;"	d
CATCH_TRAP	tests/catch.hpp	6241;"	d
CATCH_TRY	tests/catch.hpp	379;"	d
CATCH_UNSAFE_UNRETAINED	tests/catch.hpp	1386;"	d
CATCH_UNSAFE_UNRETAINED	tests/catch.hpp	1402;"	d
CATCH_VERSION_MAJOR	tests/catch.hpp	16;"	d
CATCH_VERSION_MINOR	tests/catch.hpp	17;"	d
CATCH_VERSION_PATCH	tests/catch.hpp	18;"	d
CLARA_CONFIG_MAIN	tests/catch.hpp	89;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	tests/catch.hpp	88;"	d
CLARA_CONFIG_OPTIONAL_TYPE	tests/catch.hpp	6762;"	d
CYAN	include/spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
C_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit C_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
CaseSensitive	tests/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
Catch	tests/catch.hpp	/^namespace Catch {$/;"	n
Catch	tests/catch.hpp	/^namespace Catch{$/;"	n
Catch_global_namespace_dummy	tests/catch.hpp	/^struct Catch_global_namespace_dummy {};$/;"	s
Choice	tests/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
ComposableParserImpl	tests/catch.hpp	/^    class ComposableParserImpl : public ParserBase {$/;"	c	namespace:Catch
ContinueOnFailure	tests/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
D_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit D_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Detail	tests/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
DidntThrowException	tests/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
E_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit E_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
EnumInfo	tests/catch.hpp	/^        struct EnumInfo {$/;"	s	namespace:Catch::Detail
Exception	tests/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExeName	tests/catch.hpp	/^        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}$/;"	f	class:Catch::ExeName
ExeName	tests/catch.hpp	/^        explicit ExeName( LambdaT const& lambda ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	tests/catch.hpp	/^        explicit ExeName( std::string &ref ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	tests/catch.hpp	/^    class ExeName : public ComposableParserImpl<ExeName> {$/;"	c	namespace:Catch
ExplicitFailure	tests/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	tests/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	/^inline char* lg(uint32_t n, Handler h) FMT_ALWAYS_INLINE;$/;"	m	namespace:internal
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	712;"	d
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	714;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	157;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	159;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	164;"	d
FMT_ASSERT	include/spdlog/fmt/bundled/core.h	177;"	d
FMT_BEGIN_NAMESPACE	include/spdlog/fmt/bundled/core.h	150;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	137;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	166;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	140;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	191;"	d
FMT_CATCH	include/spdlog/fmt/bundled/format-inl.h	42;"	d
FMT_CATCH	include/spdlog/fmt/bundled/format-inl.h	45;"	d
FMT_CHRONO_H_	include/spdlog/fmt/bundled/chrono.h	9;"	d
FMT_CLANG_VERSION	include/spdlog/fmt/bundled/format.h	49;"	d
FMT_CLANG_VERSION	include/spdlog/fmt/bundled/format.h	51;"	d
FMT_COLOR_H_	include/spdlog/fmt/bundled/color.h	9;"	d
FMT_COMPILE_H_	include/spdlog/fmt/bundled/compile.h	9;"	d
FMT_CONSTEXPR	include/spdlog/fmt/bundled/core.h	66;"	d
FMT_CONSTEXPR	include/spdlog/fmt/bundled/core.h	69;"	d
FMT_CONSTEXPR_DECL	include/spdlog/fmt/bundled/core.h	67;"	d
FMT_CONSTEXPR_DECL	include/spdlog/fmt/bundled/core.h	70;"	d
FMT_CORE_H_	include/spdlog/fmt/bundled/core.h	9;"	d
FMT_CUDA_VERSION	include/spdlog/fmt/bundled/format.h	63;"	d
FMT_CUDA_VERSION	include/spdlog/fmt/bundled/format.h	65;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/core.h	124;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/core.h	127;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/core.h	129;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/core.h	131;"	d
FMT_DETECTED_NOEXCEPT	include/spdlog/fmt/bundled/core.h	102;"	d
FMT_DETECTED_NOEXCEPT	include/spdlog/fmt/bundled/core.h	99;"	d
FMT_ENABLE_IF	include/spdlog/fmt/bundled/core.h	209;"	d
FMT_END_NAMESPACE	include/spdlog/fmt/bundled/core.h	140;"	d
FMT_END_NAMESPACE	include/spdlog/fmt/bundled/core.h	145;"	d
FMT_EXCEPTIONS	include/spdlog/fmt/bundled/core.h	86;"	d
FMT_EXCEPTIONS	include/spdlog/fmt/bundled/core.h	88;"	d
FMT_EXTERN	include/spdlog/fmt/bundled/core.h	171;"	d
FMT_EXTERN	include/spdlog/fmt/bundled/core.h	173;"	d
FMT_EXTERN_TEMPLATE_API	include/spdlog/fmt/bundled/core.h	160;"	d
FMT_EXTERN_TEMPLATE_API	include/spdlog/fmt/bundled/core.h	167;"	d
FMT_FORMAT_AS	include/spdlog/fmt/bundled/format.h	3028;"	d
FMT_FORMAT_H_	include/spdlog/fmt/bundled/format.h	34;"	d
FMT_FORMAT_INL_H_	include/spdlog/fmt/bundled/format-inl.h	9;"	d
FMT_FUNC	include/spdlog/fmt/bundled/format.h	3594;"	d
FMT_GCC_VERSION	include/spdlog/fmt/bundled/core.h	41;"	d
FMT_GCC_VERSION	include/spdlog/fmt/bundled/core.h	43;"	d
FMT_HAS_BUILTIN	include/spdlog/fmt/bundled/format.h	69;"	d
FMT_HAS_BUILTIN	include/spdlog/fmt/bundled/format.h	71;"	d
FMT_HAS_CPP_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	35;"	d
FMT_HAS_CPP_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	37;"	d
FMT_HAS_CXX11_NOEXCEPT	include/spdlog/fmt/bundled/core.h	100;"	d
FMT_HAS_CXX11_NOEXCEPT	include/spdlog/fmt/bundled/core.h	103;"	d
FMT_HAS_FEATURE	include/spdlog/fmt/bundled/core.h	22;"	d
FMT_HAS_FEATURE	include/spdlog/fmt/bundled/core.h	24;"	d
FMT_HAS_GXX_CXX11	include/spdlog/fmt/bundled/core.h	47;"	d
FMT_HAS_GXX_CXX11	include/spdlog/fmt/bundled/core.h	49;"	d
FMT_HAS_INCLUDE	include/spdlog/fmt/bundled/core.h	29;"	d
FMT_HAS_INCLUDE	include/spdlog/fmt/bundled/core.h	31;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/fmt.h	16;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/ostr.h	12;"	d
FMT_ICC_VERSION	include/spdlog/fmt/bundled/format.h	55;"	d
FMT_ICC_VERSION	include/spdlog/fmt/bundled/format.h	57;"	d
FMT_ICC_VERSION	include/spdlog/fmt/bundled/format.h	59;"	d
FMT_INLINE_NAMESPACE	include/spdlog/fmt/bundled/core.h	139;"	d
FMT_INLINE_NAMESPACE	include/spdlog/fmt/bundled/core.h	144;"	d
FMT_LOCALE_H_	include/spdlog/fmt/bundled/locale.h	9;"	d
FMT_MSC_VER	include/spdlog/fmt/bundled/core.h	53;"	d
FMT_MSC_VER	include/spdlog/fmt/bundled/core.h	55;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/color.h	/^      FMT_NOEXCEPT;$/;"	m	class:color::emphasis::text_style
FMT_NOEXCEPT	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type() FMT_NOEXCEPT : is_rgb(), value{} {}$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(color rgb_color) FMT_NOEXCEPT : is_rgb(true),$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(rgb rgb_color) FMT_NOEXCEPT : is_rgb(true), value{} {$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(terminal_color term_color) FMT_NOEXCEPT : is_rgb(),$/;"	m	struct:color::emphasis::internal::color_type
FMT_NOEXCEPT	include/spdlog/fmt/bundled/core.h	108;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/core.h	110;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/format.h	/^                                  fmt::string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	include/spdlog/fmt/bundled/format.h	/^  ~format_error() FMT_NOEXCEPT;$/;"	m	class:format_error
FMT_NOEXCEPT	include/spdlog/fmt/bundled/format.h	/^  ~system_error() FMT_NOEXCEPT;$/;"	m	class:system_error
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API void dup2(int fd, error_code& ec) FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API ~buffered_file() FMT_NOEXCEPT;$/;"	m	class:buffered_file
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API ~file() FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOMACRO	include/spdlog/fmt/bundled/chrono.h	/^inline null<> localtime_r FMT_NOMACRO(...) { return null<>(); }$/;"	f	namespace:internal
FMT_NOMACRO	include/spdlog/fmt/bundled/chrono.h	32;"	d
FMT_NORETURN	include/spdlog/fmt/bundled/core.h	116;"	d
FMT_NORETURN	include/spdlog/fmt/bundled/core.h	118;"	d
FMT_OSTREAM_H_	include/spdlog/fmt/bundled/ostream.h	9;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/core.h	76;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/core.h	78;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/format.h	/^  void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:basic_memory_buffer
FMT_POSIX	include/spdlog/fmt/bundled/posix.h	33;"	d
FMT_POSIX	include/spdlog/fmt/bundled/posix.h	35;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/posix.h	41;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/posix.h	46;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/posix.h	48;"	d
FMT_POSIX_H_	include/spdlog/fmt/bundled/posix.h	9;"	d
FMT_POWERS_OF_10	include/spdlog/fmt/bundled/format-inl.h	276;"	d
FMT_PRINTF_H_	include/spdlog/fmt/bundled/printf.h	9;"	d
FMT_RANGES_H_	include/spdlog/fmt/bundled/ranges.h	13;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	include/spdlog/fmt/bundled/ranges.h	20;"	d
FMT_RETRY	include/spdlog/fmt/bundled/posix.h	63;"	d
FMT_RETRY_VAL	include/spdlog/fmt/bundled/posix.h	55;"	d
FMT_RETRY_VAL	include/spdlog/fmt/bundled/posix.h	60;"	d
FMT_SAFE_DURATION_CAST	include/spdlog/fmt/bundled/chrono.h	21;"	d
FMT_SNPRINTF	include/spdlog/fmt/bundled/format-inl.h	70;"	d
FMT_STRING	include/spdlog/fmt/bundled/format.h	3560;"	d
FMT_SYSTEM	include/spdlog/fmt/bundled/posix.h	43;"	d
FMT_THROW	include/spdlog/fmt/bundled/format.h	87;"	d
FMT_TRY	include/spdlog/fmt/bundled/format-inl.h	41;"	d
FMT_TRY	include/spdlog/fmt/bundled/format-inl.h	44;"	d
FMT_TYPE_CONSTANT	include/spdlog/fmt/bundled/core.h	646;"	d
FMT_USE_CONSTEXPR	include/spdlog/fmt/bundled/core.h	61;"	d
FMT_USE_EXPERIMENTAL_STRING_VIEW	include/spdlog/fmt/bundled/core.h	188;"	d
FMT_USE_GRISU	include/spdlog/fmt/bundled/format.h	463;"	d
FMT_USE_NOEXCEPT	include/spdlog/fmt/bundled/core.h	94;"	d
FMT_USE_STRING_VIEW	include/spdlog/fmt/bundled/core.h	185;"	d
FMT_USE_UDL_TEMPLATE	include/spdlog/fmt/bundled/format.h	120;"	d
FMT_USE_USER_DEFINED_LITERALS	include/spdlog/fmt/bundled/format.h	106;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/bundled/format.h	890;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/bundled/format.h	892;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/fmt.h	20;"	d
FMT_VERSION	include/spdlog/fmt/bundled/core.h	19;"	d
F_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit F_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
FailureBit	tests/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	tests/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FatalErrorCondition	tests/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
Flags	tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
GENERATE	tests/catch.hpp	3896;"	d
GENERATE_COPY	tests/catch.hpp	3898;"	d
GENERATE_REF	tests/catch.hpp	3900;"	d
GREEN	include/spdlog/sinks/wincolor_sink.h	/^    const WORD GREEN = FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
H_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit H_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Help	tests/catch.hpp	/^        Help( bool &showHelpFlag )$/;"	f	struct:Catch::Help
Help	tests/catch.hpp	/^    struct Help : Opt {$/;"	s	namespace:Catch
IMutableEnumValuesRegistry	tests/catch.hpp	/^    struct IMutableEnumValuesRegistry {$/;"	s	namespace:Catch
INTERNAL_CATCH_CAPTURE	tests/catch.hpp	2614;"	d
INTERNAL_CATCH_CATCH	tests/catch.hpp	2520;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	tests/catch.hpp	868;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST0	tests/catch.hpp	795;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST1	tests/catch.hpp	796;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	tests/catch.hpp	864;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0	tests/catch.hpp	839;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1	tests/catch.hpp	840;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X	tests/catch.hpp	846;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_X	tests/catch.hpp	799;"	d
INTERNAL_CATCH_DEF	tests/catch.hpp	722;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	tests/catch.hpp	867;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST0	tests/catch.hpp	803;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST1	tests/catch.hpp	804;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	tests/catch.hpp	863;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0	tests/catch.hpp	852;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1	tests/catch.hpp	853;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X	tests/catch.hpp	856;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_X	tests/catch.hpp	807;"	d
INTERNAL_CATCH_DYNAMIC_SECTION	tests/catch.hpp	2763;"	d
INTERNAL_CATCH_ELSE	tests/catch.hpp	2550;"	d
INTERNAL_CATCH_EXPAND1	tests/catch.hpp	720;"	d
INTERNAL_CATCH_EXPAND2	tests/catch.hpp	721;"	d
INTERNAL_CATCH_EXPAND_VARGS	tests/catch.hpp	684;"	d
INTERNAL_CATCH_IF	tests/catch.hpp	2545;"	d
INTERNAL_CATCH_INFO	tests/catch.hpp	2619;"	d
INTERNAL_CATCH_MAKE_NAMESPACE	tests/catch.hpp	736;"	d
INTERNAL_CATCH_MAKE_NAMESPACE2	tests/catch.hpp	735;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	tests/catch.hpp	742;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	tests/catch.hpp	741;"	d
INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES	tests/catch.hpp	748;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	tests/catch.hpp	992;"	d
INTERNAL_CATCH_MSG	tests/catch.hpp	2606;"	d
INTERNAL_CATCH_NOINTERNAL_CATCH_DEF	tests/catch.hpp	723;"	d
INTERNAL_CATCH_NO_THROW	tests/catch.hpp	2555;"	d
INTERNAL_CATCH_NTTP_0	tests/catch.hpp	861;"	d
INTERNAL_CATCH_NTTP_1	tests/catch.hpp	783;"	d
INTERNAL_CATCH_NTTP_GEN	tests/catch.hpp	862;"	d
INTERNAL_CATCH_NTTP_REGISTER	tests/catch.hpp	818;"	d
INTERNAL_CATCH_NTTP_REGISTER0	tests/catch.hpp	811;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD	tests/catch.hpp	832;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD0	tests/catch.hpp	825;"	d
INTERNAL_CATCH_NTTP_REG_GEN	tests/catch.hpp	866;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	tests/catch.hpp	865;"	d
INTERNAL_CATCH_REACT	tests/catch.hpp	2529;"	d
INTERNAL_CATCH_REGISTER_ENUM	tests/catch.hpp	2022;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	tests/catch.hpp	1012;"	d
INTERNAL_CATCH_REMOVE_PARENS	tests/catch.hpp	738;"	d
INTERNAL_CATCH_REMOVE_PARENS_10_ARG	tests/catch.hpp	760;"	d
INTERNAL_CATCH_REMOVE_PARENS_11_ARG	tests/catch.hpp	761;"	d
INTERNAL_CATCH_REMOVE_PARENS_1_ARG	tests/catch.hpp	751;"	d
INTERNAL_CATCH_REMOVE_PARENS_2_ARG	tests/catch.hpp	752;"	d
INTERNAL_CATCH_REMOVE_PARENS_3_ARG	tests/catch.hpp	753;"	d
INTERNAL_CATCH_REMOVE_PARENS_4_ARG	tests/catch.hpp	754;"	d
INTERNAL_CATCH_REMOVE_PARENS_5_ARG	tests/catch.hpp	755;"	d
INTERNAL_CATCH_REMOVE_PARENS_6_ARG	tests/catch.hpp	756;"	d
INTERNAL_CATCH_REMOVE_PARENS_7_ARG	tests/catch.hpp	757;"	d
INTERNAL_CATCH_REMOVE_PARENS_8_ARG	tests/catch.hpp	758;"	d
INTERNAL_CATCH_REMOVE_PARENS_9_ARG	tests/catch.hpp	759;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	tests/catch.hpp	869;"	d
INTERNAL_CATCH_SECTION	tests/catch.hpp	2758;"	d
INTERNAL_CATCH_STRINGIZE	tests/catch.hpp	724;"	d
INTERNAL_CATCH_STRINGIZE2	tests/catch.hpp	726;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	tests/catch.hpp	727;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE	tests/catch.hpp	1095;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2	tests/catch.hpp	1062;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD	tests/catch.hpp	1190;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2	tests/catch.hpp	1154;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG	tests/catch.hpp	1198;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG	tests/catch.hpp	1103;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE	tests/catch.hpp	1047;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_2	tests/catch.hpp	1018;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD	tests/catch.hpp	1139;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2	tests/catch.hpp	1110;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION	tests/catch.hpp	965;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2	tests/catch.hpp	940;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG	tests/catch.hpp	1147;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION	tests/catch.hpp	973;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION	tests/catch.hpp	949;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2	tests/catch.hpp	938;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG	tests/catch.hpp	1055;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION	tests/catch.hpp	957;"	d
INTERNAL_CATCH_TEST	tests/catch.hpp	2532;"	d
INTERNAL_CATCH_TESTCASE	tests/catch.hpp	988;"	d
INTERNAL_CATCH_TESTCASE2	tests/catch.hpp	982;"	d
INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION	tests/catch.hpp	931;"	d
INTERNAL_CATCH_TESTCASE_NO_REGISTRATION	tests/catch.hpp	929;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	tests/catch.hpp	1008;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	tests/catch.hpp	998;"	d
INTERNAL_CATCH_THROWS	tests/catch.hpp	2569;"	d
INTERNAL_CATCH_THROWS_AS	tests/catch.hpp	2586;"	d
INTERNAL_CATCH_THROWS_MATCHES	tests/catch.hpp	3624;"	d
INTERNAL_CATCH_THROWS_STR_MATCHES	tests/catch.hpp	2628;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	tests/catch.hpp	2935;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	tests/catch.hpp	2928;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG	tests/catch.hpp	2868;"	d
INTERNAL_CATCH_TRY	tests/catch.hpp	2519;"	d
INTERNAL_CATCH_TYPE_GEN	tests/catch.hpp	765;"	d
INTERNAL_CATCH_UNIQUE_NAME	tests/catch.hpp	396;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	tests/catch.hpp	394;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	tests/catch.hpp	393;"	d
INTERNAL_CATCH_UNSCOPED_INFO	tests/catch.hpp	2623;"	d
INTERNAL_CATCH_VA_NARGS_IMPL	tests/catch.hpp	763;"	d
INTERNAL_CHECK_THAT	tests/catch.hpp	3614;"	d
IStream	tests/catch.hpp	/^    struct IStream {$/;"	s	namespace:Catch
ITestCaseRegistry	tests/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestInvoker	tests/catch.hpp	/^    struct ITestInvoker {$/;"	s	namespace:Catch
I_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit I_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Info	tests/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
InternalParseResult	tests/catch.hpp	/^        virtual auto parse( std::string const& exeName, TokenStream const &tokens) const -> InternalParseResult  = 0;$/;"	m	namespace:Catch::Detail
IsStreamInsertable	tests/catch.hpp	/^        class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
LC_NUMERIC_MASK	include/spdlog/fmt/bundled/posix.h	/^  enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	e	enum:Locale::__anon8
Locale	include/spdlog/fmt/bundled/posix.h	/^  Locale() : locale_(newlocale(LC_NUMERIC_MASK, "C", nullptr)) {$/;"	f	class:Locale
Locale	include/spdlog/fmt/bundled/posix.h	/^class Locale {$/;"	c
M_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit M_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
NOMINMAX	include/spdlog/common.h	20;"	d
NOMINMAX	include/spdlog/details/os-inl.h	27;"	d
NOMINMAX	include/spdlog/fmt/bundled/format-inl.h	34;"	d
NOMINMAX	include/spdlog/fmt/bundled/format-inl.h	36;"	d
NOMINMAX	tests/catch.hpp	6279;"	d
NOMINMAX	tests/catch.hpp	6293;"	d
NameAndTags	tests/catch.hpp	/^struct NameAndTags {$/;"	s	namespace:Catch
No	tests/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NonCopyable	tests/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
Normal	tests/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
OC_MAKE_UNIQUE_NAME	tests/catch.hpp	4662;"	d
OC_TEST_CASE	tests/catch.hpp	4674;"	d
OC_TEST_CASE2	tests/catch.hpp	4663;"	d
OfType	tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	tests/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Opt	tests/catch.hpp	/^        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	tests/catch.hpp	/^        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	tests/catch.hpp	/^        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	tests/catch.hpp	/^        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	tests/catch.hpp	/^    class Opt : public ParserRefImpl<Opt> {$/;"	c	namespace:Catch
Parser	tests/catch.hpp	/^        auto operator+( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	tests/catch.hpp	/^        auto operator|( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	tests/catch.hpp	/^    struct Parser : ParserBase {$/;"	s	namespace:Catch
ParserRefImpl	tests/catch.hpp	/^        ParserRefImpl( LambdaT const &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	tests/catch.hpp	/^        ParserRefImpl( T &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	tests/catch.hpp	/^        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	tests/catch.hpp	/^    class ParserRefImpl : public ComposableParserImpl<DerivedT> {$/;"	c	namespace:Catch
RDONLY	include/spdlog/fmt/bundled/posix.h	/^    RDONLY = FMT_POSIX(O_RDONLY),  \/\/ Open for reading only.$/;"	e	enum:file::__anon7
RDWR	include/spdlog/fmt/bundled/posix.h	/^    RDWR = FMT_POSIX(O_RDWR)       \/\/ Open for reading and writing.$/;"	e	enum:file::__anon7
RED	include/spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink
R_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit R_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
RegistrarForTagAliases	tests/catch.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
ResultDisposition	tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ReusableStringStream	tests/catch.hpp	/^    class ReusableStringStream {$/;"	c	namespace:Catch
SPDLOG_ACTIVE_LEVEL	include/spdlog/common.h	136;"	d
SPDLOG_ACTIVE_LEVEL	tests/includes.h	15;"	d
SPDLOG_ANDROID_RETRIES	include/spdlog/sinks/android_sink.h	21;"	d
SPDLOG_CATCH_ALL	include/spdlog/common.h	76;"	d
SPDLOG_CATCH_ALL	include/spdlog/common.h	80;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	43;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	46;"	d
SPDLOG_CRITICAL	include/spdlog/spdlog.h	332;"	d
SPDLOG_DEBUG	include/spdlog/spdlog.h	300;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	50;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	52;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	54;"	d
SPDLOG_EOL	include/spdlog/details/os.h	26;"	d
SPDLOG_EOL	include/spdlog/details/os.h	28;"	d
SPDLOG_ERROR	include/spdlog/spdlog.h	324;"	d
SPDLOG_FILENAME_T	include/spdlog/common.h	93;"	d
SPDLOG_FUNCTION	include/spdlog/common.h	65;"	d
SPDLOG_H	include/spdlog/spdlog.h	8;"	d
SPDLOG_HEADER_ONLY	include/spdlog/common.h	31;"	d
SPDLOG_HEADER_ONLY	include/spdlog/common.h	34;"	d
SPDLOG_INFO	include/spdlog/spdlog.h	308;"	d
SPDLOG_INLINE	include/spdlog/common.h	32;"	d
SPDLOG_INLINE	include/spdlog/common.h	35;"	d
SPDLOG_LEVEL_CRITICAL	include/spdlog/common.h	132;"	d
SPDLOG_LEVEL_DEBUG	include/spdlog/common.h	128;"	d
SPDLOG_LEVEL_ERROR	include/spdlog/common.h	131;"	d
SPDLOG_LEVEL_INFO	include/spdlog/common.h	129;"	d
SPDLOG_LEVEL_NAMES	include/spdlog/common-inl.h	/^static string_view_t level_string_views[] SPDLOG_LEVEL_NAMES;$/;"	m	namespace:spdlog::level
SPDLOG_LEVEL_NAMES	include/spdlog/common.h	153;"	d
SPDLOG_LEVEL_OFF	include/spdlog/common.h	133;"	d
SPDLOG_LEVEL_TRACE	include/spdlog/common.h	127;"	d
SPDLOG_LEVEL_WARN	include/spdlog/common.h	130;"	d
SPDLOG_LOGGER_CALL	include/spdlog/spdlog.h	288;"	d
SPDLOG_LOGGER_CATCH	include/spdlog/logger.h	27;"	d
SPDLOG_LOGGER_CATCH	include/spdlog/logger.h	37;"	d
SPDLOG_LOGGER_CRITICAL	include/spdlog/spdlog.h	331;"	d
SPDLOG_LOGGER_DEBUG	include/spdlog/spdlog.h	299;"	d
SPDLOG_LOGGER_ERROR	include/spdlog/spdlog.h	323;"	d
SPDLOG_LOGGER_INFO	include/spdlog/spdlog.h	307;"	d
SPDLOG_LOGGER_TRACE	include/spdlog/spdlog.h	291;"	d
SPDLOG_LOGGER_WARN	include/spdlog/spdlog.h	315;"	d
SPDLOG_NOEXCEPT	include/spdlog/common.h	/^const char *to_short_c_str(spdlog::level::level_enum l) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::level
SPDLOG_NOEXCEPT	include/spdlog/common.h	/^spdlog::level::level_enum from_str(const std::string &name) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::level
SPDLOG_NOEXCEPT	include/spdlog/common.h	/^string_view_t &to_string_view(spdlog::level::level_enum l) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::level
SPDLOG_NOEXCEPT	include/spdlog/common.h	42;"	d
SPDLOG_NOEXCEPT	include/spdlog/common.h	45;"	d
SPDLOG_NOEXCEPT	include/spdlog/details/backtracer.h	/^    backtracer(backtracer &&other) SPDLOG_NOEXCEPT;$/;"	m	class:spdlog::details::backtracer
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^bool file_exists(const filename_t &filename) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^bool in_terminal(FILE *file) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^bool is_color_terminal() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^int pid() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^int remove(const filename_t &filename) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^int remove_if_exists(const filename_t &filename) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^int rename(const filename_t &filename1, const filename_t &filename2) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^size_t _thread_id() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^size_t thread_id() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^spdlog::log_clock::time_point now() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^std::tm gmtime() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^std::tm gmtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^std::tm localtime() SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^std::tm localtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/details/os.h	/^void sleep_for_millis(int milliseconds) SPDLOG_NOEXCEPT;$/;"	m	namespace:spdlog::details::os
SPDLOG_NOEXCEPT	include/spdlog/logger.h	/^    logger &operator=(logger other) SPDLOG_NOEXCEPT;$/;"	m	class:spdlog::logger
SPDLOG_NOEXCEPT	include/spdlog/logger.h	/^    logger(logger &&other) SPDLOG_NOEXCEPT;$/;"	m	class:spdlog::logger
SPDLOG_NOEXCEPT	include/spdlog/logger.h	/^    void swap(spdlog::logger &other) SPDLOG_NOEXCEPT;$/;"	m	class:spdlog::logger
SPDLOG_NO_TLS	include/spdlog/common.h	60;"	d
SPDLOG_SHORT_LEVEL_NAMES	include/spdlog/common-inl.h	/^static const char *short_level_names[] SPDLOG_SHORT_LEVEL_NAMES;$/;"	m	namespace:spdlog::level
SPDLOG_SHORT_LEVEL_NAMES	include/spdlog/common.h	161;"	d
SPDLOG_THROW	include/spdlog/common.h	70;"	d
SPDLOG_THROW	include/spdlog/common.h	79;"	d
SPDLOG_TRACE	include/spdlog/spdlog.h	292;"	d
SPDLOG_TRY	include/spdlog/common.h	69;"	d
SPDLOG_TRY	include/spdlog/common.h	78;"	d
SPDLOG_VERSION	include/spdlog/version.h	10;"	d
SPDLOG_VER_MAJOR	include/spdlog/version.h	6;"	d
SPDLOG_VER_MINOR	include/spdlog/version.h	7;"	d
SPDLOG_VER_PATCH	include/spdlog/version.h	8;"	d
SPDLOG_WARN	include/spdlog/spdlog.h	316;"	d
S_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit S_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
SourceLineInfo	tests/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
StreamEndStop	tests/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<NSObject*> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<NSString*> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<T^> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<bool> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<char *> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<char const *> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<char> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<char[SZ]> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<double> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<float> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<int> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<long long> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<long> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<signed char> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<signed char[SZ]> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::nullptr_t> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::optional<T> > {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::pair<T1, T2> > {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::string> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::string_view> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::wstring> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<std::wstring_view> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<unsigned char> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<unsigned char[SZ]> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<unsigned int> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<unsigned long long> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<unsigned long> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<wchar_t *> {$/;"	s	namespace:Catch
StringMaker	tests/catch.hpp	/^    struct StringMaker<wchar_t const *> {$/;"	s	namespace:Catch
StringRef	tests/catch.hpp	/^        :   StringRef( s_empty, 0 )$/;"	f	class:Catch::StringRef
StringRef	tests/catch.hpp	/^    class StringRef {$/;"	c	namespace:Catch
SuppressFail	tests/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	tests/catch.hpp	12;"	d
T_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit T_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
TestInvokerAsMethod	tests/catch.hpp	/^class TestInvokerAsMethod : public ITestInvoker {$/;"	c	namespace:Catch
ThrewException	tests/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
Unknown	tests/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
WHITE	include/spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
WIN32_LEAN_AND_MEAN	include/spdlog/common.h	24;"	d
WIN32_LEAN_AND_MEAN	include/spdlog/details/os-inl.h	31;"	d
WIN32_LEAN_AND_MEAN	include/spdlog/fmt/bundled/format-inl.h	29;"	d
WIN32_LEAN_AND_MEAN	tests/catch.hpp	6283;"	d
WIN32_LEAN_AND_MEAN	tests/catch.hpp	6296;"	d
WRONLY	include/spdlog/fmt/bundled/posix.h	/^    WRONLY = FMT_POSIX(O_WRONLY),  \/\/ Open for writing only.$/;"	e	enum:file::__anon7
Warning	tests/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
YELLOW	include/spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
Y_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit Y_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Yes	tests/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
_BSD_SOURCE	tests/catch.hpp	209;"	d
__STRICT_ANSI__	include/spdlog/fmt/bundled/posix.h	13;"	d
__has_feature	include/spdlog/details/os-inl.h	69;"	d
_a	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR internal::udl_arg<char> operator"" _a(const char* s,$/;"	f	namespace:literals
_a	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR internal::udl_arg<wchar_t> operator"" _a(const wchar_t* s,$/;"	f	namespace:literals
_filename	include/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper
_format	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR internal::udl_formatter<Char, CHARS...> operator""_format() {$/;"	f	namespace:literals
_u	include/spdlog/fmt/bundled/format.h	/^inline u8string_view operator"" _u(const char* s, std::size_t n) {$/;"	f	namespace:literals
a_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit a_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::a_formatter
a_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class a_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::bin_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::dec_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^    unsigned_type abs_value;$/;"	m	struct:internal::basic_writer::int_writer
active_	include/spdlog/details/periodic_worker.h	/^    bool active_;$/;"	m	class:spdlog::details::periodic_worker
add_ch	include/spdlog/details/pattern_formatter-inl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::final
add_delimiter_spaces	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range
add_delimiter_spaces	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple
add_prepostfix_space	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range
add_prepostfix_space	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple
add_sink	include/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
advance_parse_context_to_specification	include/spdlog/fmt/bundled/compile.h	/^  void advance_parse_context_to_specification($/;"	f	class:internal::prepared_format
advance_to	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_parse_context
advance_to	include/spdlog/fmt/bundled/core.h	/^  void advance_to(iterator it) { out_ = it; }$/;"	f	class:basic_format_context
advance_to	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void advance_to(basic_parse_context<Char, ErrorHandler>& ctx,$/;"	f
advance_to	include/spdlog/fmt/bundled/printf.h	/^  void advance_to(OutputIt it) { out_ = it; }$/;"	f	class:basic_printf_context
alice_blue	include/spdlog/fmt/bundled/color.h	/^  alice_blue = 0xF0F8FF,               \/\/ rgb(240,248,255)$/;"	m	class:color
align	include/spdlog/fmt/bundled/format.h	/^  align_t align : 4;$/;"	m	struct:basic_format_specs
align	include/spdlog/fmt/bundled/format.h	/^namespace align {$/;"	n
alt	include/spdlog/fmt/bundled/format.h	/^  bool alt : 1;  \/\/ Alternate form ('#').$/;"	m	struct:basic_format_specs
alt	include/spdlog/fmt/bundled/format.h	/^  bool alt : 1;$/;"	m	struct:internal::sprintf_specs
always	include/spdlog/common.h	/^    always,$/;"	m	class:spdlog::color_mode
always_false	tests/catch.hpp	/^    struct always_false : std::false_type {};$/;"	s	namespace:Catch
ampm	include/spdlog/details/pattern_formatter-inl.h	/^static const char *ampm(const tm &t)$/;"	f	namespace:spdlog::details
android_example	example/example.cpp	/^void android_example()$/;"	f
android_logger_mt	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_mt(const std::string &logger_name, const std::string &tag = "spdlog")$/;"	f	namespace:spdlog
android_logger_st	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_st(const std::string &logger_name, const std::string &tag = "spdlog")$/;"	f	namespace:spdlog
android_sink	include/spdlog/sinks/android_sink.h	/^    explicit android_sink(std::string tag = "spdlog", bool use_raw_msg = false)$/;"	f	class:spdlog::sinks::final
ansi_color_escape	include/spdlog/fmt/bundled/color.h	/^template <typename Char> struct ansi_color_escape {$/;"	s	namespace:color::emphasis::internal
ansicolor_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_sink<ConsoleMutex>::ansicolor_sink(FILE *target_file, color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_sink
ansicolor_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
ansicolor_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
ansicolor_stderr_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_stderr_sink<ConsoleMutex>::ansicolor_stderr_sink(color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_stderr_sink
ansicolor_stderr_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stderr_sink : public ansicolor_sink<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_stderr_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
ansicolor_stderr_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_stderr_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
ansicolor_stdout_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_stdout_sink<ConsoleMutex>::ansicolor_stdout_sink(color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_stdout_sink
ansicolor_stdout_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stdout_sink : public ansicolor_sink<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stdout_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_stdout_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
ansicolor_stdout_sink	src/color_sinks.cpp	/^template class spdlog::sinks::ansicolor_stdout_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
antique_white	include/spdlog/fmt/bundled/color.h	/^  antique_white = 0xFAEBD7,            \/\/ rgb(250,235,215)$/;"	m	class:color
append	include/spdlog/fmt/bundled/format.h	/^void buffer<T>::append(const U* begin, const U* end) {$/;"	f	class:internal::buffer
append_int	include/spdlog/details/fmt_helper.h	/^inline void append_int(T n, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
append_string_view	include/spdlog/details/fmt_helper.h	/^inline void append_string_view(spdlog::string_view_t view, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
apply_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::apply_all(const std::function<void(const std::shared_ptr<logger>)> &fun)$/;"	f	class:spdlog::details::registry
apply_all	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun)$/;"	f	namespace:spdlog
aqua	include/spdlog/fmt/bundled/color.h	/^  aqua = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	m	class:color
aquamarine	include/spdlog/fmt/bundled/color.h	/^  aquamarine = 0x7FFFD4,               \/\/ rgb(127,255,212)$/;"	m	class:color
arcSafeRelease	tests/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	tests/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arg	include/spdlog/fmt/bundled/core.h	/^    basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry
arg	include/spdlog/fmt/bundled/core.h	/^  format_arg arg(int id) const { return args_.get(id); }$/;"	f	class:basic_format_context
arg	include/spdlog/fmt/bundled/format.h	/^  basic_format_arg<Context> arg;$/;"	m	struct:format_handler
arg	include/spdlog/fmt/bundled/format.h	/^basic_format_context<Range, Char>::arg(basic_string_view<char_type> name) {$/;"	f	class:basic_format_context
arg	include/spdlog/fmt/bundled/printf.h	/^  format_arg arg(unsigned id) const { return args_.get(id); }$/;"	f	class:basic_printf_context
arg_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:internal::char_converter
arg_converter	include/spdlog/fmt/bundled/printf.h	/^  arg_converter(basic_format_arg<Context>& arg, char_type type)$/;"	f	class:internal::arg_converter
arg_converter	include/spdlog/fmt/bundled/printf.h	/^template <typename T, typename Context> class arg_converter {$/;"	c	namespace:internal
arg_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit arg_formatter(context_type& ctx,$/;"	f	class:arg_formatter
arg_formatter	include/spdlog/fmt/bundled/format.h	/^class arg_formatter : public internal::arg_formatter_base<Range> {$/;"	c
arg_formatter_base	include/spdlog/fmt/bundled/format.h	/^  arg_formatter_base(Range r, format_specs* s, locale_ref loc)$/;"	f	class:internal::arg_formatter_base
arg_formatter_base	include/spdlog/fmt/bundled/format.h	/^class arg_formatter_base {$/;"	c	namespace:internal
arg_id	include/spdlog/fmt/bundled/compile.h	/^    argument_id arg_id;$/;"	m	struct:internal::format_part::specification
arg_id	include/spdlog/fmt/bundled/compile.h	/^    unsigned arg_id;$/;"	m	union:internal::format_part::value
arg_id_	include/spdlog/fmt/bundled/format.h	/^  unsigned arg_id_;$/;"	m	class:internal::format_string_checker
arg_id_kind	include/spdlog/fmt/bundled/format.h	/^enum class arg_id_kind { none, index, name };$/;"	c	namespace:internal
arg_join	include/spdlog/fmt/bundled/format.h	/^  arg_join(It b, It e, basic_string_view<Char> s) : begin(b), end(e), sep(s) {}$/;"	f	struct:arg_join
arg_join	include/spdlog/fmt/bundled/format.h	/^template <typename It, typename Char> struct arg_join : internal::view {$/;"	s
arg_map	include/spdlog/fmt/bundled/core.h	/^  arg_map() : map_(nullptr), size_(0) {}$/;"	f	class:internal::arg_map
arg_map	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class arg_map {$/;"	c	namespace:internal
arg_mapper	include/spdlog/fmt/bundled/core.h	/^template <typename Context> struct arg_mapper {$/;"	s	namespace:internal
arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit arg_ref(int index)$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit arg_ref(string_view_metadata name)$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct arg_ref {$/;"	s	namespace:internal
arg_type_	include/spdlog/fmt/bundled/format.h	/^  internal::type arg_type_;$/;"	m	class:internal::numeric_specs_checker
args_	include/spdlog/fmt/bundled/core.h	/^  basic_format_args<basic_format_context> args_;$/;"	m	class:basic_format_context
args_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_args<basic_printf_context> args_;$/;"	m	class:basic_printf_context
argument_id	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR argument_id() : argument_id(0u) {}$/;"	f	struct:internal::format_part::argument_id
argument_id	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR argument_id(internal::string_view_metadata id)$/;"	f	struct:internal::format_part::argument_id
argument_id	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR argument_id(unsigned id)$/;"	f	struct:internal::format_part::argument_id
argument_id	include/spdlog/fmt/bundled/compile.h	/^  enum class kind { argument_id, named_argument_id, text, specification };$/;"	m	class:internal::format_part::kind
argument_id	include/spdlog/fmt/bundled/compile.h	/^  struct argument_id {$/;"	s	struct:internal::format_part
arr	include/spdlog/fmt/bundled/compile.h	/^    value_type arr[N];$/;"	m	struct:internal::compiletime_prepared_parts_type_provider::format_parts_array
as_percentage	include/spdlog/fmt/bundled/format.h	/^    bool as_percentage;$/;"	m	struct:internal::basic_writer::inf_or_nan_writer
as_percentage	include/spdlog/fmt/bundled/format.h	/^  bool as_percentage;$/;"	m	struct:float_spec_handler
async_example	example/example.cpp	/^void async_example()$/;"	f
async_factory_impl	include/spdlog/async.h	/^struct async_factory_impl$/;"	s	namespace:spdlog
async_logger	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE spdlog::async_logger::async_logger($/;"	f	class:spdlog::async_logger
async_logger	include/spdlog/async_logger.h	/^    async_logger(std::string logger_name, It begin, It end, std::weak_ptr<details::thread_pool> tp,$/;"	f	class:spdlog::final
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, const details::log_msg &m)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    explicit async_msg(async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^struct async_msg : log_msg_buffer$/;"	s	namespace:spdlog::details
async_msg_type	include/spdlog/details/thread_pool.h	/^enum class async_msg_type$/;"	c	namespace:spdlog::details
async_overflow_policy	include/spdlog/async_logger.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
auto_id	include/spdlog/fmt/bundled/format.h	/^struct auto_id {};$/;"	s	namespace:internal
automatic	include/spdlog/common.h	/^    automatic,$/;"	m	class:spdlog::color_mode
automatic_registration_	include/spdlog/details/registry.h	/^    bool automatic_registration_ = true;$/;"	m	class:spdlog::details::registry
azure	include/spdlog/fmt/bundled/color.h	/^  azure = 0xF0FFFF,                    \/\/ rgb(240,255,255)$/;"	m	class:color
b	include/spdlog/fmt/bundled/color.h	/^  uint8_t b;$/;"	m	struct:color::emphasis::rgb
b_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit b_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::b_formatter
b_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class b_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
back	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part& back() { return parts_[counter_ - 1]; }$/;"	f	class:internal::compiletime_prepared_parts_collector
backend_flush_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::backend_flush_()$/;"	f	class:spdlog::async_logger
backend_sink_it_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::backend_sink_it_(const details::log_msg &msg)$/;"	f	class:spdlog::async_logger
background_color	include/spdlog/fmt/bundled/color.h	/^  internal::color_type background_color;$/;"	m	class:color::emphasis::text_style
background_color	include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::background_color[] = "\\x1b[48;2;";$/;"	m	class:internal::basic_data
background_color	include/spdlog/fmt/bundled/format.h	/^  static const char background_color[];$/;"	m	struct:internal::basic_data
backtrace_n_messages_	include/spdlog/details/registry.h	/^    size_t backtrace_n_messages_ = 0;$/;"	m	class:spdlog::details::registry
backtracer	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer::backtracer(const backtracer &other)$/;"	f	class:spdlog::details::backtracer
backtracer	include/spdlog/details/backtracer.h	/^class backtracer$/;"	c	namespace:spdlog::details
base	include/spdlog/fmt/bundled/format.h	/^  OutputIt base() const { return out_; }$/;"	f	class:internal::truncating_iterator_base
base_filename_	include/spdlog/sinks/daily_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::final
base_filename_	include/spdlog/sinks/rotating_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::final
base_path	scripts/extract_version.py	/^base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))$/;"	v
base_sink	include/spdlog/sinks/base_sink-inl.h	/^SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::base_sink()$/;"	f	class:spdlog::sinks::base_sink
base_sink	include/spdlog/sinks/base_sink-inl.h	/^SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::base_sink(std::unique_ptr<spdlog::formatter> formatter)$/;"	f	class:spdlog::sinks::base_sink
base_sink	include/spdlog/sinks/base_sink.h	/^class base_sink : public sink$/;"	c	namespace:spdlog::sinks
base_sink	src/spdlog.cpp	/^template class spdlog::sinks::base_sink<spdlog::details::null_mutex>;/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
base_sink	src/spdlog.cpp	/^template class spdlog::sinks::base_sink<std::mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
basename	include/spdlog/details/pattern_formatter-inl.h	/^    static const char *basename(const char *filename)$/;"	f	class:spdlog::details::final
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const Char* s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const std::basic_string<Char>& s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^template <typename Char> class basic_cstring_view {$/;"	c
basic_data	include/spdlog/fmt/bundled/format.h	/^template <typename T = void> struct FMT_EXTERN_TEMPLATE_API basic_data {$/;"	s	namespace:internal
basic_data	src/fmt.cpp	/^template struct internal::basic_data<void>;$/;"	m	class:internal	typeref:struct:internal::	file:
basic_example	example/example.cpp	/^void basic_example()$/;"	f
basic_file_sink	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE basic_file_sink<Mutex>::basic_file_sink(const filename_t &filename, bool truncate)$/;"	f	class:spdlog::sinks::basic_file_sink
basic_file_sink	src/file_sinks.cpp	/^template class spdlog::sinks::basic_file_sink<spdlog::details::null_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
basic_file_sink	src/file_sinks.cpp	/^template class spdlog::sinks::basic_file_sink<std::mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_format_arg() : type_(internal::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class basic_format_arg {$/;"	c
basic_format_context	include/spdlog/fmt/bundled/core.h	/^  basic_format_context(OutputIt out,$/;"	f	class:basic_format_context
basic_format_context	include/spdlog/fmt/bundled/core.h	/^template <typename OutputIt, typename Char> class basic_format_context {$/;"	c
basic_format_specs	include/spdlog/fmt/bundled/format.h	/^  constexpr basic_format_specs()$/;"	f	struct:basic_format_specs
basic_format_specs	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct basic_format_specs {$/;"	s
basic_logger_mt	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t &filename, bool truncate = false)$/;"	f	namespace:spdlog
basic_logger_st	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_st(const std::string &logger_name, const filename_t &filename, bool truncate = false)$/;"	f	namespace:spdlog
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer(basic_memory_buffer&& other) { move(other); }$/;"	f	class:basic_memory_buffer
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  explicit basic_memory_buffer(const Allocator& alloc = Allocator())$/;"	f	class:basic_memory_buffer
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^class basic_memory_buffer : private Allocator, public internal::buffer<T> {$/;"	c
basic_parse_context	include/spdlog/fmt/bundled/core.h	/^  explicit FMT_CONSTEXPR basic_parse_context(basic_string_view<Char> format_str,$/;"	f	class:basic_parse_context
basic_parse_context	include/spdlog/fmt/bundled/core.h	/^class basic_parse_context : private ErrorHandler {$/;"	c
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_printf_context
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^template <typename OutputIt, typename Char> class basic_printf_context {$/;"	c
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  basic_string_view(const Char* s)$/;"	f	class:basic_string_view
basic_string_view	include/spdlog/fmt/bundled/core.h	/^template <typename Char> class basic_string_view {$/;"	c
basic_writer	include/spdlog/fmt/bundled/format.h	/^  explicit basic_writer(Range out,$/;"	f	class:internal::basic_writer
basic_writer	include/spdlog/fmt/bundled/format.h	/^template <typename Range> class basic_writer {$/;"	c	namespace:internal
begin	include/spdlog/fmt/bin_to_hex.h	/^    It begin() const$/;"	f	class:spdlog::details::bytes_range
begin	include/spdlog/fmt/bundled/chrono.h	/^    iterator begin;$/;"	m	struct:formatter::parse_range
begin	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR const value_type* begin() const { return arr; }$/;"	f	struct:internal::compiletime_prepared_parts_type_provider::format_parts_array
begin	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator begin() const { return data_; }$/;"	f	class:basic_string_view
begin	include/spdlog/fmt/bundled/format.h	/^  It begin;$/;"	m	struct:arg_join
begin	include/spdlog/fmt/bundled/format.h	/^  OutputIt begin() const { return it_; }$/;"	f	class:internal::output_range
begin_	include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::bytes_range
beige	include/spdlog/fmt/bundled/color.h	/^  beige = 0xF5F5DC,                    \/\/ rgb(245,245,220)$/;"	m	class:color
bench	bench/bench.cpp	/^void bench(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f
bench_c_string	bench/bench.cpp	/^void bench_c_string(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f
bench_c_string	bench/latency.cpp	/^void bench_c_string(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f
bench_default_api	bench/bench.cpp	/^void bench_default_api(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f
bench_disabled_macro	bench/latency.cpp	/^void bench_disabled_macro(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f
bench_formatter	bench/formatter-bench.cpp	/^void bench_formatter(benchmark::State &state, std::string pattern)$/;"	f
bench_formatters	bench/formatter-bench.cpp	/^void bench_formatters()$/;"	f
bench_logger	bench/latency.cpp	/^void bench_logger(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f
bench_mt	bench/async_bench.cpp	/^void bench_mt(int howmany, std::shared_ptr<spdlog::logger> logger, int thread_count)$/;"	f
bench_mt	bench/bench.cpp	/^void bench_mt(int howmany, std::shared_ptr<spdlog::logger> log, int thread_count)$/;"	f
bench_single_threaded	bench/bench.cpp	/^void bench_single_threaded(int iters)$/;"	f
bench_threaded_logging	bench/bench.cpp	/^void bench_threaded_logging(int threads, int iters)$/;"	f
bin_writer	include/spdlog/fmt/bundled/format.h	/^    template <int BITS> struct bin_writer {$/;"	s	struct:internal::basic_writer::int_writer
binary_example	example/example.cpp	/^void binary_example()$/;"	f
bisque	include/spdlog/fmt/bundled/color.h	/^  bisque = 0xFFE4C4,                   \/\/ rgb(255,228,196)$/;"	m	class:color
bit_cast	include/spdlog/fmt/bundled/format.h	/^inline Dest bit_cast(const Source& source) {$/;"	f	namespace:internal
bits	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> struct bits {$/;"	s	namespace:internal
black	include/spdlog/fmt/bundled/color.h	/^  black = 0x000000,                    \/\/ rgb(0,0,0)$/;"	m	class:color
black	include/spdlog/fmt/bundled/color.h	/^  black = 30,$/;"	m	class:color::terminal_color
black	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t black = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink
blackhole_	include/spdlog/fmt/bundled/format.h	/^  mutable T blackhole_;$/;"	m	class:internal::counting_iterator
blanched_almond	include/spdlog/fmt/bundled/color.h	/^  blanched_almond = 0xFFEBCD,          \/\/ rgb(255,235,205)$/;"	m	class:color
blink	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t blink = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink
block	include/spdlog/async_logger.h	/^    block,         \/\/ Block until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
blue	include/spdlog/fmt/bundled/color.h	/^  blue = 0x0000FF,                     \/\/ rgb(0,0,255)$/;"	m	class:color
blue	include/spdlog/fmt/bundled/color.h	/^  blue,$/;"	m	class:color::terminal_color
blue	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t blue = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink
blue_violet	include/spdlog/fmt/bundled/color.h	/^  blue_violet = 0x8A2BE2,              \/\/ rgb(138,43,226)$/;"	m	class:color
bold	include/spdlog/fmt/bundled/color.h	/^  bold = 1,$/;"	m	class:color::emphasis
bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t bold = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bold_on_red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t bold_on_red = "\\033[1m\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bool_type	include/spdlog/fmt/bundled/core.h	/^  bool_type,$/;"	e	enum:internal::type
bool_value	include/spdlog/fmt/bundled/core.h	/^    bool bool_value;$/;"	m	union:internal::value::__anon12
bright_black	include/spdlog/fmt/bundled/color.h	/^  bright_black = 90,$/;"	m	class:color::terminal_color
bright_blue	include/spdlog/fmt/bundled/color.h	/^  bright_blue,$/;"	m	class:color::terminal_color
bright_cyan	include/spdlog/fmt/bundled/color.h	/^  bright_cyan,$/;"	m	class:color::terminal_color
bright_green	include/spdlog/fmt/bundled/color.h	/^  bright_green,$/;"	m	class:color::terminal_color
bright_magenta	include/spdlog/fmt/bundled/color.h	/^  bright_magenta,$/;"	m	class:color::terminal_color
bright_red	include/spdlog/fmt/bundled/color.h	/^  bright_red,$/;"	m	class:color::terminal_color
bright_yellow	include/spdlog/fmt/bundled/color.h	/^  bright_yellow,$/;"	m	class:color::terminal_color
brown	include/spdlog/fmt/bundled/color.h	/^  brown = 0xA52A2A,                    \/\/ rgb(165,42,42)$/;"	m	class:color
buf	include/spdlog/fmt/bundled/format-inl.h	/^  char* buf;$/;"	m	struct:internal::fixed_handler
buf	include/spdlog/fmt/bundled/format-inl.h	/^  char* buf;$/;"	m	struct:internal::grisu_shortest_handler
buffer	include/spdlog/details/log_msg_buffer.h	/^    memory_buf_t buffer;$/;"	m	class:spdlog::details::log_msg_buffer
buffer	include/spdlog/fmt/bundled/color.h	/^  Char buffer[7u + 3u * 4u + 1u];$/;"	m	struct:color::emphasis::internal::ansi_color_escape
buffer	include/spdlog/fmt/bundled/core.h	/^template <typename T> class buffer {$/;"	c	namespace:internal
buffer	include/spdlog/fmt/bundled/format.h	/^    internal::buffer<char>& buffer;$/;"	m	struct:internal::basic_writer::double_writer
buffer_	include/spdlog/fmt/bundled/format.h	/^  char* buffer_;$/;"	m	class:internal::decimal_formatter
buffer_	include/spdlog/fmt/bundled/format.h	/^  memory_buffer buffer_;$/;"	m	class:internal::utf16_to_utf8
buffer_	include/spdlog/fmt/bundled/format.h	/^  mutable char buffer_[buffer_size];$/;"	m	class:format_int
buffer_	include/spdlog/fmt/bundled/format.h	/^  wmemory_buffer buffer_;$/;"	m	class:internal::utf8_to_utf16
buffer_range	include/spdlog/fmt/bundled/format.h	/^  buffer_range(buffer<T>& buf)$/;"	f	class:internal::buffer_range
buffer_range	include/spdlog/fmt/bundled/format.h	/^class buffer_range$/;"	c	namespace:internal
buffer_size	include/spdlog/fmt/bundled/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	e	enum:format_int::__anon6
buffered_file	include/spdlog/fmt/bundled/posix.h	/^  explicit buffered_file(FILE* f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	include/spdlog/fmt/bundled/posix.h	/^class buffered_file {$/;"	c
burly_wood	include/spdlog/fmt/bundled/color.h	/^  burly_wood = 0xDEB887,               \/\/ rgb(222,184,135)$/;"	m	class:color
bytes_range	include/spdlog/fmt/bin_to_hex.h	/^    bytes_range(It range_begin, It range_end)$/;"	f	class:spdlog::details::bytes_range
bytes_range	include/spdlog/fmt/bin_to_hex.h	/^class bytes_range$/;"	c	namespace:spdlog::details
c_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit c_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
c_str	include/spdlog/fmt/bundled/format.h	/^  const char* c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf16_to_utf8
c_str	include/spdlog/fmt/bundled/format.h	/^  const char* c_str() const {$/;"	f	class:format_int
c_str	include/spdlog/fmt/bundled/format.h	/^  const wchar_t* c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf8_to_utf16
c_str	include/spdlog/fmt/bundled/posix.h	/^  const Char* c_str() const { return data_; }$/;"	f	class:basic_cstring_view
cached_datetime_	include/spdlog/details/pattern_formatter-inl.h	/^    memory_buf_t cached_datetime_;$/;"	m	class:spdlog::details::final
cached_tm_	include/spdlog/details/pattern_formatter.h	/^    std::tm cached_tm_;$/;"	m	class:spdlog::final
cadet_blue	include/spdlog/fmt/bundled/color.h	/^  cadet_blue = 0x5F9EA0,               \/\/ rgb(95,158,160)$/;"	m	class:color
calc_filename	include/spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm)$/;"	f	struct:spdlog::sinks::daily_filename_calculator
calc_filename	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE filename_t rotating_file_sink<Mutex>::calc_filename(const filename_t &filename, std::size_t index)$/;"	f	class:spdlog::sinks::rotating_file_sink
calc_filename	tests/test_daily_logger.cpp	/^    static spdlog::filename_t calc_filename(const spdlog::filename_t &basename, const tm &now_tm)$/;"	f	struct:custom_daily_file_name_calculator
capacity_	include/spdlog/fmt/bundled/core.h	/^        capacity_(cap) {}$/;"	f	class:internal::buffer
capacity_	include/spdlog/fmt/bundled/core.h	/^  buffer(std::size_t sz) FMT_NOEXCEPT : size_(sz), capacity_(sz) {}$/;"	f	class:internal::buffer
capacity_	include/spdlog/fmt/bundled/core.h	/^  std::size_t capacity_;$/;"	m	class:internal::buffer
capturedExpression	tests/catch.hpp	/^        StringRef capturedExpression;$/;"	m	struct:Catch::AssertionInfo
center	include/spdlog/details/pattern_formatter.h	/^        center$/;"	e	enum:spdlog::details::padding_info::pad_side
center	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
ch_	include/spdlog/details/pattern_formatter-inl.h	/^    char ch_;$/;"	m	class:spdlog::details::final
ch_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::final
char_converter	include/spdlog/fmt/bundled/printf.h	/^  explicit char_converter(basic_format_arg<Context>& arg) : arg_(arg) {}$/;"	f	class:internal::char_converter
char_converter	include/spdlog/fmt/bundled/printf.h	/^template <typename Context> class char_converter {$/;"	c	namespace:internal
char_spec_handler	include/spdlog/fmt/bundled/format.h	/^    char_spec_handler(arg_formatter_base& f, char_type val)$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
char_spec_handler	include/spdlog/fmt/bundled/format.h	/^  struct char_spec_handler : ErrorHandler {$/;"	s	class:internal::arg_formatter_base
char_specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR char_specs_checker(char type, ErrorHandler eh)$/;"	f	class:internal::char_specs_checker
char_specs_checker	include/spdlog/fmt/bundled/format.h	/^class char_specs_checker : public ErrorHandler {$/;"	c	namespace:internal
char_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename S, typename = void> struct char_t_impl {};$/;"	s	namespace:internal
char_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename S> struct char_t_impl<S, enable_if_t<is_string<S>::value>> {$/;"	s	namespace:internal
char_type	include/spdlog/fmt/bundled/core.h	/^  char_type,$/;"	e	enum:internal::type
char_value	include/spdlog/fmt/bundled/core.h	/^    char_type char_value;$/;"	m	union:internal::value::__anon12
char_writer	include/spdlog/fmt/bundled/format.h	/^  struct char_writer {$/;"	s	class:internal::arg_formatter_base
chartreuse	include/spdlog/fmt/bundled/color.h	/^  chartreuse = 0x7FFF00,               \/\/ rgb(127,255,0)$/;"	m	class:color
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR bool check_arg_id(int) {$/;"	f	class:basic_parse_context
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_parse_context
check_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_arg_id() {$/;"	f	class:internal::format_string_checker
check_format_string	include/spdlog/fmt/bundled/format.h	/^void check_format_string(S format_str) {$/;"	f	namespace:internal
check_pointer_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_pointer_type_spec(Char spec, ErrorHandler&& eh) {$/;"	f	namespace:internal
check_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_precision() {$/;"	f	class:internal::numeric_specs_checker
check_prepared_specs	include/spdlog/fmt/bundled/compile.h	/^  void check_prepared_specs(const basic_format_specs<Char>& specs,$/;"	f	class:internal::prepared_format
check_sign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_sign() {$/;"	f	class:internal::numeric_specs_checker
check_string_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_string_type_spec(Char spec, ErrorHandler&& eh) {$/;"	f	namespace:internal
checker_	include/spdlog/fmt/bundled/format.h	/^  numeric_specs_checker<Handler> checker_;$/;"	m	class:internal::specs_checker
chocolate	include/spdlog/fmt/bundled/color.h	/^  chocolate = 0xD2691E,                \/\/ rgb(210,105,30)$/;"	m	class:color
chrono_format_checker	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_format_checker {$/;"	s	namespace:internal
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^  explicit chrono_formatter(FormatContext& ctx, OutputIt o,$/;"	f	struct:internal::chrono_formatter
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:internal
circular_q	include/spdlog/details/circular_q.h	/^    explicit circular_q(size_t max_items)$/;"	f	class:spdlog::details::circular_q
circular_q	include/spdlog/details/circular_q.h	/^class circular_q$/;"	c	namespace:spdlog::details
clear	include/spdlog/fmt/bundled/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:internal::buffer
clear_line	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t clear_line = "\\033[K";$/;"	m	class:spdlog::sinks::ansicolor_sink
clone	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE std::shared_ptr<spdlog::logger> spdlog::async_logger::clone(std::string new_name)$/;"	f	class:spdlog::async_logger
clone	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE std::unique_ptr<formatter> pattern_formatter::clone() const$/;"	f	class:spdlog::pattern_formatter
clone	include/spdlog/logger-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> logger::clone(std::string logger_name)$/;"	f	class:spdlog::logger
close	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::close()$/;"	f	class:spdlog::details::file_helper
clz	include/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x) {$/;"	f	namespace:internal
clzll	include/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal
color	include/spdlog/fmt/bundled/color.h	/^enum class color : uint32_t {$/;"	c
color_mode	include/spdlog/common.h	/^enum class color_mode$/;"	c	namespace:spdlog
color_start_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit color_start_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
color_stop_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit color_stop_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
color_type	include/spdlog/fmt/bundled/color.h	/^struct color_type {$/;"	s	namespace:color::emphasis::internal
color_union	include/spdlog/fmt/bundled/color.h	/^  union color_union {$/;"	u	struct:color::emphasis::internal::color_type
colors_	include/spdlog/sinks/ansicolor_sink.h	/^    std::unordered_map<level::level_enum, string_view_t, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
colors_	include/spdlog/sinks/wincolor_sink.h	/^    std::unordered_map<level::level_enum, WORD, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink
compare	include/spdlog/fmt/bundled/core.h	/^  int compare(basic_string_view other) const {$/;"	f	class:basic_string_view
compile_pattern_	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::compile_pattern_(const std::string &pattern)$/;"	f	class:spdlog::pattern_formatter
compile_string	include/spdlog/fmt/bundled/core.h	/^struct compile_string {};$/;"	s
compiletime_parts_provider	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR compiletime_parts_provider(basic_string_view<Char>) {}$/;"	f	struct:internal::compiletime_parts_provider
compiletime_parts_provider	include/spdlog/fmt/bundled/compile.h	/^struct compiletime_parts_provider {$/;"	s	namespace:internal
compiletime_prepared_parts_collector	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR explicit compiletime_prepared_parts_collector(Parts& parts)$/;"	f	class:internal::compiletime_prepared_parts_collector
compiletime_prepared_parts_collector	include/spdlog/fmt/bundled/compile.h	/^template <typename Parts> class compiletime_prepared_parts_collector {$/;"	c	namespace:internal
compiletime_prepared_parts_type_provider	include/spdlog/fmt/bundled/compile.h	/^template <typename Format> class compiletime_prepared_parts_type_provider {$/;"	c	namespace:internal
compute_boundaries	include/spdlog/fmt/bundled/format-inl.h	/^  void compute_boundaries(fp& lower, fp& upper) const {$/;"	f	class:internal::fp
concealed	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink
conditional_helper	include/spdlog/fmt/bundled/ranges.h	/^template <typename... Ts> struct conditional_helper {};$/;"	s	namespace:internal
config_h	scripts/extract_version.py	/^config_h  = os.path.join(base_path, 'include', 'spdlog', 'version.h')$/;"	v
console_mutex	include/spdlog/details/console_globals.h	/^struct console_mutex$/;"	s	namespace:spdlog::details
console_nullmutex	include/spdlog/details/console_globals.h	/^struct console_nullmutex$/;"	s	namespace:spdlog::details
const_check	include/spdlog/fmt/bundled/printf.h	/^template <typename T> inline T const_check(T value) { return value; }$/;"	f	namespace:internal
container_	include/spdlog/fmt/bundled/core.h	/^  Container& container_;$/;"	m	class:internal::container_buffer
container_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit container_buffer(Container& c)$/;"	f	class:internal::container_buffer
container_buffer	include/spdlog/fmt/bundled/core.h	/^class container_buffer : public buffer<typename Container::value_type> {$/;"	c	namespace:internal
context	include/spdlog/fmt/bundled/chrono.h	/^    basic_parse_context<Char>& context;$/;"	m	struct:formatter::spec_handler
context	include/spdlog/fmt/bundled/chrono.h	/^  FormatContext& context;$/;"	m	struct:internal::chrono_formatter
context	include/spdlog/fmt/bundled/format.h	/^  Context context;$/;"	m	struct:format_handler
context_	include/spdlog/fmt/bundled/format.h	/^  Context& context_;$/;"	m	class:internal::specs_handler
context_	include/spdlog/fmt/bundled/format.h	/^  ParseContext& context_;$/;"	m	class:internal::dynamic_specs_handler
context_	include/spdlog/fmt/bundled/format.h	/^  parse_context_type context_;$/;"	m	class:internal::format_string_checker
convert	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC int internal::utf16_to_utf8::convert(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
convert	tests/catch.hpp	/^            convert( const Fake& value ) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^            convert(const Fake& value) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(NSObject* nsObject) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(NSString * nsstring) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(char const* str) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(const std::optional<T>& optional) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(const std::pair<T1, T2>& pair) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(signed char const* str) {$/;"	f	struct:Catch::StringMaker
convert	tests/catch.hpp	/^        static std::string convert(unsigned char const* str) {$/;"	f	struct:Catch::StringMaker
convertUnknownEnumToString	tests/catch.hpp	/^        std::string convertUnknownEnumToString( E e ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	tests/catch.hpp	/^         std::string>::type convertUnstreamable(T const& ex) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	tests/catch.hpp	/^        , std::string>::type convertUnstreamable( T const& value ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	tests/catch.hpp	/^        std::string>::type convertUnstreamable( T const& ) {$/;"	f	namespace:Catch::Detail
convert_arg	include/spdlog/fmt/bundled/printf.h	/^void convert_arg(basic_format_arg<Context>& arg, Char type) {$/;"	f	namespace:internal
convert_to_android_	include/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android_(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::final
convert_to_int	include/spdlog/fmt/bundled/core.h	/^struct FMT_DEPRECATED convert_to_int$/;"	s
copy	include/spdlog/fmt/bundled/ranges.h	/^OutputIterator copy(char ch, OutputIterator out) {$/;"	f	namespace:internal
copy	include/spdlog/fmt/bundled/ranges.h	/^OutputIterator copy(const RangeT& range, OutputIterator out) {$/;"	f	namespace:internal
copy	include/spdlog/fmt/bundled/ranges.h	/^OutputIterator copy(const char* str, OutputIterator out) {$/;"	f	namespace:internal
copy_str	include/spdlog/fmt/bundled/format.h	/^OutputIt copy_str(InputIt begin, InputIt end, OutputIt it) {$/;"	f	namespace:internal
coral	include/spdlog/fmt/bundled/color.h	/^  coral = 0xFF7F50,                    \/\/ rgb(255,127,80)$/;"	m	class:color
cornflower_blue	include/spdlog/fmt/bundled/color.h	/^  cornflower_blue = 0x6495ED,          \/\/ rgb(100,149,237)$/;"	m	class:color
cornsilk	include/spdlog/fmt/bundled/color.h	/^  cornsilk = 0xFFF8DC,                 \/\/ rgb(255,248,220)$/;"	m	class:color
count	include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::counting_iterator
count	include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::truncating_iterator_base
count_	include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::counting_iterator
count_	include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::truncating_iterator_base
count_code_points	include/spdlog/fmt/bundled/format.h	/^inline size_t count_code_points(basic_string_view<Char> s) {$/;"	f	namespace:internal
count_code_points	include/spdlog/fmt/bundled/format.h	/^inline size_t count_code_points(basic_string_view<char8_t> s) {$/;"	f	namespace:internal
count_digits	include/spdlog/details/fmt_helper.h	/^inline unsigned count_digits(T n)$/;"	f	namespace:spdlog::details::fmt_helper
count_digits	include/spdlog/fmt/bundled/format-inl.h	/^template <> FMT_FUNC int count_digits<4>(internal::fallback_uintptr n) {$/;"	f	namespace:internal
count_digits	include/spdlog/fmt/bundled/format.h	/^inline int count_digits(uint32_t n) {$/;"	f	namespace:internal
count_digits	include/spdlog/fmt/bundled/format.h	/^inline int count_digits(uint64_t n) {$/;"	f	namespace:internal
count_digits	include/spdlog/fmt/bundled/format.h	/^template <unsigned BITS, typename UInt> inline int count_digits(UInt n) {$/;"	f	namespace:internal
count_files	tests/utils.cpp	/^std::size_t count_files(const std::string &folder)$/;"	f
count_lines	bench/async_bench.cpp	/^int count_lines(const char *filename)$/;"	f
count_lines	tests/utils.cpp	/^std::size_t count_lines(const std::string &filename)$/;"	f
count_parts	include/spdlog/fmt/bundled/compile.h	/^  static FMT_CONSTEXPR unsigned count_parts() {$/;"	f	class:internal::compiletime_prepared_parts_type_provider
counter_	include/spdlog/fmt/bundled/compile.h	/^  unsigned counter_;$/;"	m	class:internal::compiletime_prepared_parts_collector
counting_iterator	include/spdlog/fmt/bundled/format.h	/^  counting_iterator() : count_(0) {}$/;"	f	class:internal::counting_iterator
counting_iterator	include/spdlog/fmt/bundled/format.h	/^template <typename T> class counting_iterator {$/;"	c	namespace:internal
create	include/spdlog/async.h	/^    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::async_factory_impl
create	include/spdlog/details/synchronous_factory.h	/^    static std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::synchronous_factory
create	include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
create_async	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
create_async_nb	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async_nb(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
create_msg	tests/test_daily_logger.cpp	/^static spdlog::details::log_msg create_msg(std::chrono::seconds offset)$/;"	f	file:
crimson	include/spdlog/fmt/bundled/color.h	/^  crimson = 0xDC143C,                  \/\/ rgb(220,20,60)$/;"	m	class:color
critical	include/spdlog/common.h	/^    critical = SPDLOG_LEVEL_CRITICAL,$/;"	e	enum:spdlog::level::level_enum
critical	include/spdlog/logger.h	/^    void critical(const T &msg)$/;"	f	class:spdlog::logger
critical	include/spdlog/logger.h	/^    void critical(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
critical	include/spdlog/logger.h	/^    void critical(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
critical	include/spdlog/spdlog.h	/^inline void critical(const T &msg)$/;"	f	namespace:spdlog
critical	include/spdlog/spdlog.h	/^inline void critical(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
critical	include/spdlog/spdlog.h	/^inline void critical(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
cstring_spec_handler	include/spdlog/fmt/bundled/format.h	/^    cstring_spec_handler(arg_formatter_base& f, const char_type* val)$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
cstring_spec_handler	include/spdlog/fmt/bundled/format.h	/^  struct cstring_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
cstring_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type,$/;"	e	enum:internal::type
cstring_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit cstring_type_checker(ErrorHandler eh)$/;"	f	class:internal::cstring_type_checker
cstring_type_checker	include/spdlog/fmt/bundled/format.h	/^class cstring_type_checker : public ErrorHandler {$/;"	c	namespace:internal
ctx_	include/spdlog/fmt/bundled/format.h	/^  Context& ctx_;$/;"	m	class:internal::custom_formatter
current_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t current_size_;$/;"	m	class:spdlog::sinks::final
custom	include/spdlog/fmt/bundled/core.h	/^    custom_value<Context> custom;$/;"	m	union:internal::value::__anon12
custom_	include/spdlog/fmt/bundled/core.h	/^    internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle
custom_daily_file_name_calculator	tests/test_daily_logger.cpp	/^struct custom_daily_file_name_calculator$/;"	s	file:
custom_ex	tests/test_errors.cpp	/^struct custom_ex$/;"	s	file:
custom_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit custom_formatter(basic_parse_context<char_type>& parse_ctx,$/;"	f	class:internal::custom_formatter
custom_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename Context> class custom_formatter {$/;"	c	namespace:internal
custom_type	include/spdlog/fmt/bundled/core.h	/^  custom_type$/;"	e	enum:internal::type
custom_value	include/spdlog/fmt/bundled/core.h	/^template <typename Context> struct custom_value {$/;"	s	namespace:internal
cv_	include/spdlog/details/periodic_worker.h	/^    std::condition_variable cv_;$/;"	m	class:spdlog::details::periodic_worker
cyan	include/spdlog/fmt/bundled/color.h	/^  cyan = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	m	class:color
cyan	include/spdlog/fmt/bundled/color.h	/^  cyan,$/;"	m	class:color::terminal_color
cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink
d_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit d_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
daily_example	example/example.cpp	/^void daily_example()$/;"	f
daily_file_sink	include/spdlog/sinks/daily_file_sink.h	/^    daily_file_sink(filename_t base_filename, int rotation_hour, int rotation_minute, bool truncate = false, uint16_t max_files = 0)$/;"	f	class:spdlog::sinks::final
daily_filename_calculator	include/spdlog/sinks/daily_file_sink.h	/^struct daily_filename_calculator$/;"	s	namespace:spdlog::sinks
daily_logger_mt	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_mt($/;"	f	namespace:spdlog
daily_logger_st	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_st($/;"	f	namespace:spdlog
dark	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t dark = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink
dark_blue	include/spdlog/fmt/bundled/color.h	/^  dark_blue = 0x00008B,                \/\/ rgb(0,0,139)$/;"	m	class:color
dark_cyan	include/spdlog/fmt/bundled/color.h	/^  dark_cyan = 0x008B8B,                \/\/ rgb(0,139,139)$/;"	m	class:color
dark_golden_rod	include/spdlog/fmt/bundled/color.h	/^  dark_golden_rod = 0xB8860B,          \/\/ rgb(184,134,11)$/;"	m	class:color
dark_gray	include/spdlog/fmt/bundled/color.h	/^  dark_gray = 0xA9A9A9,                \/\/ rgb(169,169,169)$/;"	m	class:color
dark_green	include/spdlog/fmt/bundled/color.h	/^  dark_green = 0x006400,               \/\/ rgb(0,100,0)$/;"	m	class:color
dark_khaki	include/spdlog/fmt/bundled/color.h	/^  dark_khaki = 0xBDB76B,               \/\/ rgb(189,183,107)$/;"	m	class:color
dark_magenta	include/spdlog/fmt/bundled/color.h	/^  dark_magenta = 0x8B008B,             \/\/ rgb(139,0,139)$/;"	m	class:color
dark_olive_green	include/spdlog/fmt/bundled/color.h	/^  dark_olive_green = 0x556B2F,         \/\/ rgb(85,107,47)$/;"	m	class:color
dark_orange	include/spdlog/fmt/bundled/color.h	/^  dark_orange = 0xFF8C00,              \/\/ rgb(255,140,0)$/;"	m	class:color
dark_orchid	include/spdlog/fmt/bundled/color.h	/^  dark_orchid = 0x9932CC,              \/\/ rgb(153,50,204)$/;"	m	class:color
dark_red	include/spdlog/fmt/bundled/color.h	/^  dark_red = 0x8B0000,                 \/\/ rgb(139,0,0)$/;"	m	class:color
dark_salmon	include/spdlog/fmt/bundled/color.h	/^  dark_salmon = 0xE9967A,              \/\/ rgb(233,150,122)$/;"	m	class:color
dark_sea_green	include/spdlog/fmt/bundled/color.h	/^  dark_sea_green = 0x8FBC8F,           \/\/ rgb(143,188,143)$/;"	m	class:color
dark_slate_blue	include/spdlog/fmt/bundled/color.h	/^  dark_slate_blue = 0x483D8B,          \/\/ rgb(72,61,139)$/;"	m	class:color
dark_slate_gray	include/spdlog/fmt/bundled/color.h	/^  dark_slate_gray = 0x2F4F4F,          \/\/ rgb(47,79,79)$/;"	m	class:color
dark_turquoise	include/spdlog/fmt/bundled/color.h	/^  dark_turquoise = 0x00CED1,           \/\/ rgb(0,206,209)$/;"	m	class:color
dark_violet	include/spdlog/fmt/bundled/color.h	/^  dark_violet = 0x9400D3,              \/\/ rgb(148,0,211)$/;"	m	class:color
data	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const Char* data() const { return data_; }$/;"	f	class:basic_string_view
data	include/spdlog/fmt/bundled/core.h	/^  const Char* data;$/;"	m	struct:internal::string_value
data	include/spdlog/fmt/bundled/format.h	/^  const char* data() const { return str_; }$/;"	f	class:format_int
data	include/spdlog/fmt/bundled/format.h	/^struct data : basic_data<> {};$/;"	s	namespace:internal
data	scripts/extract_version.py	/^data      = {'MAJOR': 0, 'MINOR': 0, 'PATCH': 0}$/;"	v
data_	include/spdlog/fmt/bundled/core.h	/^  const Char* data_;$/;"	m	class:basic_string_view
data_	include/spdlog/fmt/bundled/format.h	/^  Char data_[6];$/;"	m	struct:internal::fill_t
data_	include/spdlog/fmt/bundled/posix.h	/^  const Char* data_;$/;"	m	class:basic_cstring_view
deallocate	include/spdlog/fmt/bundled/format.h	/^  void deallocate() {$/;"	f	class:basic_memory_buffer
debug	include/spdlog/common.h	/^    debug = SPDLOG_LEVEL_DEBUG,$/;"	e	enum:spdlog::level::level_enum
debug	include/spdlog/logger.h	/^    void debug(const T &msg)$/;"	f	class:spdlog::logger
debug	include/spdlog/logger.h	/^    void debug(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
debug	include/spdlog/logger.h	/^    void debug(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
debug	include/spdlog/spdlog.h	/^inline void debug(const T &msg)$/;"	f	namespace:spdlog
debug	include/spdlog/spdlog.h	/^inline void debug(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
debug	include/spdlog/spdlog.h	/^inline void debug(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
dec_writer	include/spdlog/fmt/bundled/format.h	/^    struct dec_writer {$/;"	s	struct:internal::basic_writer::int_writer
decimal_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit decimal_formatter(char* buf) : buffer_(buf) {}$/;"	f	class:internal::decimal_formatter
decimal_formatter	include/spdlog/fmt/bundled/format.h	/^class decimal_formatter {$/;"	c	namespace:internal
decimal_point	include/spdlog/fmt/bundled/format.h	/^    char_type decimal_point;$/;"	m	struct:internal::basic_writer::double_writer
decimal_point	include/spdlog/fmt/bundled/format.h	/^template <> inline wchar_t decimal_point(locale_ref loc) {$/;"	f	namespace:internal
decimal_point	include/spdlog/fmt/bundled/format.h	/^template <typename Char> inline Char decimal_point(locale_ref loc) {$/;"	f	namespace:internal
decimal_point_	include/spdlog/fmt/bundled/format.h	/^    char_type decimal_point_;$/;"	m	class:internal::basic_writer::grisu_writer
decimal_point_impl	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Char> FMT_FUNC Char decimal_point_impl(locale_ref loc) {$/;"	f	namespace:internal
decimal_point_pos	include/spdlog/fmt/bundled/format.h	/^    char* decimal_point_pos;$/;"	m	struct:internal::basic_writer::double_writer
decltype	include/spdlog/fmt/bin_to_hex.h	/^    auto format(const spdlog::details::bytes_range<Container> &the_range, FormatContext &ctx) -> decltype(ctx.out())$/;"	f	struct:fmt::formatter
decltype	include/spdlog/fmt/bin_to_hex.h	/^    auto parse(ParseContext &ctx) -> decltype(ctx.begin())$/;"	f	struct:fmt::formatter
decltype	include/spdlog/fmt/bundled/chrono.h	/^      -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/chrono.h	/^  auto format(const duration& d, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/chrono.h	/^  auto format(const std::tm& tm, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/chrono.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(const Char* val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(const T& val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	class:dynamic_formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(const T& val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(void* val, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	class:dynamic_formatter
decltype	include/spdlog/fmt/bundled/ostream.h	/^  auto format(const T& value, Context& ctx) -> decltype(ctx.out()) {$/;"	f	struct:internal::fallback_formatter
decltype	include/spdlog/fmt/bundled/printf.h	/^  auto format(const T& value, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:printf_formatter
decltype	include/spdlog/fmt/bundled/printf.h	/^  auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:printf_formatter
decltype	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatting_base
decltype	include/spdlog/fmt/bundled/ranges.h	/^  auto format(const TupleT& values, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
deep_pink	include/spdlog/fmt/bundled/color.h	/^  deep_pink = 0xFF1493,                \/\/ rgb(255,20,147)$/;"	m	class:color
deep_sky_blue	include/spdlog/fmt/bundled/color.h	/^  deep_sky_blue = 0x00BFFF,            \/\/ rgb(0,191,255)$/;"	m	class:color
default_async_q_size	include/spdlog/async.h	/^static const size_t default_async_q_size = 8192;$/;"	m	namespace:spdlog::details
default_eol	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char *default_eol = SPDLOG_EOL;$/;"	m	namespace:spdlog::details::os
default_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> registry::default_logger()$/;"	f	class:spdlog::details::registry
default_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE std::shared_ptr<spdlog::logger> default_logger()$/;"	f	namespace:spdlog
default_logger_	include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger_;$/;"	m	class:spdlog::details::registry
default_logger_raw	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE spdlog::logger *default_logger_raw()$/;"	f	namespace:spdlog
delete_old_	include/spdlog/sinks/daily_file_sink.h	/^    void delete_old_()$/;"	f	class:spdlog::sinks::final
delimiter	include/spdlog/fmt/bin_to_hex.h	/^    const char delimiter = ' ';$/;"	m	struct:fmt::formatter
delimiter	include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_range
delimiter	include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_tuple
dequeue_for	include/spdlog/details/mpmc_blocking_q.h	/^    bool dequeue_for(T &popped_item, std::chrono::milliseconds wait_duration)$/;"	f	class:spdlog::details::mpmc_blocking_queue
dest_	include/spdlog/details/pattern_formatter-inl.h	/^    memory_buf_t &dest_;$/;"	m	class:spdlog::details::scoped_padder
details	include/spdlog/async.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/async_logger.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/common.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/backtracer-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/backtracer.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/circular_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/console_globals.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/file_helper-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/file_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/fmt_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg_buffer-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg_buffer.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/mpmc_blocking_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/null_mutex.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/os-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/os.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/pattern_formatter-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/pattern_formatter.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/periodic_worker-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/periodic_worker.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/registry-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/registry.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/thread_pool-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/thread_pool.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/fmt/bin_to_hex.h	/^namespace details {$/;"	n	namespace:spdlog
diff	include/spdlog/fmt/bundled/format-inl.h	/^  uint64_t diff;$/;"	m	struct:internal::grisu_shortest_handler
digits	include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::digits[] =$/;"	m	class:internal::basic_data
digits	include/spdlog/fmt/bundled/format-inl.h	/^namespace digits {$/;"	n	namespace:internal
digits	include/spdlog/fmt/bundled/format.h	/^  static const char digits[];$/;"	m	struct:internal::basic_data
digits_	include/spdlog/fmt/bundled/format.h	/^    internal::buffer<char>& digits_;$/;"	m	class:internal::basic_writer::grisu_writer
dim_gray	include/spdlog/fmt/bundled/color.h	/^  dim_gray = 0x696969,                 \/\/ rgb(105,105,105)$/;"	m	class:color
disable	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::disable()$/;"	f	class:spdlog::details::backtracer
disable_backtrace	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::disable_backtrace()$/;"	f	class:spdlog::details::registry
disable_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::disable_backtrace()$/;"	f	class:spdlog::logger
disable_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void disable_backtrace()$/;"	f	namespace:spdlog
dist_sink	include/spdlog/sinks/dist_sink.h	/^class dist_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
do_check_format_string	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool do_check_format_string(basic_string_view<Char> s,$/;"	f	namespace:internal
do_parse	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR parse_range do_parse(basic_parse_context<Char>& ctx) {$/;"	f	struct:formatter
do_throw	include/spdlog/fmt/bundled/format.h	/^template <typename Exception> inline void do_throw(const Exception& x) {$/;"	f	namespace:internal
dodger_blue	include/spdlog/fmt/bundled/color.h	/^  dodger_blue = 0x1E90FF,              \/\/ rgb(30,144,255)$/;"	m	class:color
done	include/spdlog/fmt/bundled/format-inl.h	/^  done,  \/\/ Done generating digits.$/;"	e	enum:internal::digits::result
double_significand_size	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int double_significand_size =$/;"	m	class:internal::fp
double_type	include/spdlog/fmt/bundled/core.h	/^  double_type,$/;"	e	enum:internal::type
double_value	include/spdlog/fmt/bundled/core.h	/^    double double_value;$/;"	m	union:internal::value::__anon12
double_writer	include/spdlog/fmt/bundled/format.h	/^  struct double_writer {$/;"	s	class:internal::basic_writer
down	include/spdlog/fmt/bundled/format-inl.h	/^enum round_direction { unknown, up, down };$/;"	e	enum:internal::round_direction
drop	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::drop(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
drop	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void drop(const std::string &name)$/;"	f	namespace:spdlog
drop_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::drop_all()$/;"	f	class:spdlog::details::registry
drop_all	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void drop_all()$/;"	f	namespace:spdlog
dump_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::dump_backtrace()$/;"	f	class:spdlog::logger
dump_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void dump_backtrace()$/;"	f	namespace:spdlog
dump_backtrace_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::dump_backtrace_()$/;"	f	class:spdlog::logger
dup_filter_sink	include/spdlog/sinks/dup_filter_sink.h	/^    explicit dup_filter_sink(std::chrono::duration<Rep, Period> max_skip_duration)$/;"	f	class:spdlog::sinks::dup_filter_sink
dup_filter_sink	include/spdlog/sinks/dup_filter_sink.h	/^class dup_filter_sink : public dist_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dynamic_format_specs	include/spdlog/fmt/bundled/format.h	/^struct dynamic_format_specs : basic_format_specs<Char> {$/;"	s	namespace:internal
dynamic_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename Char = char> class dynamic_formatter {$/;"	c
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(const dynamic_specs_handler& other)$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(dynamic_format_specs<char_type>& specs,$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^class dynamic_specs_handler$/;"	c	namespace:internal
e	include/spdlog/fmt/bundled/format-inl.h	/^  int e;$/;"	m	class:internal::fp
e_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit e_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
elapsed_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit elapsed_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
emphasis	include/spdlog/fmt/bundled/color.h	/^enum class emphasis : uint8_t {$/;"	c	class:color
empty	include/spdlog/details/circular_q.h	/^    bool empty() const$/;"	f	class:spdlog::details::circular_q
empty	include/spdlog/fmt/bundled/compile.h	/^  struct empty {$/;"	s	class:internal::compiletime_prepared_parts_type_provider
ems	include/spdlog/fmt/bundled/color.h	/^        ems() {$/;"	f	class:color::emphasis::text_style
ems	include/spdlog/fmt/bundled/color.h	/^        ems(em) {}$/;"	f	class:color::emphasis::text_style
ems	include/spdlog/fmt/bundled/color.h	/^  emphasis ems;$/;"	m	class:color::emphasis::text_style
enable	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::enable(size_t size)$/;"	f	class:spdlog::details::backtracer
enable_backtrace	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::enable_backtrace(size_t n_messages)$/;"	f	class:spdlog::details::registry
enable_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::enable_backtrace(size_t n_messages)$/;"	f	class:spdlog::logger
enable_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void enable_backtrace(size_t n_messages)$/;"	f	namespace:spdlog
enable_formatting_	include/spdlog/sinks/syslog_sink.h	/^    bool enable_formatting_ = false;$/;"	m	class:spdlog::sinks::syslog_sink
enabled	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE bool backtracer::enabled() const$/;"	f	class:spdlog::details::backtracer
enabled	include/spdlog/details/pattern_formatter.h	/^    bool enabled() const$/;"	f	struct:spdlog::details::padding_info
encode_types	include/spdlog/fmt/bundled/core.h	/^constexpr unsigned long long encode_types() {$/;"	f	namespace:internal
encode_types	include/spdlog/fmt/bundled/core.h	/^template <typename> constexpr unsigned long long encode_types() { return 0; }$/;"	f	namespace:internal
end	include/spdlog/fmt/bin_to_hex.h	/^    It end() const$/;"	f	class:spdlog::details::bytes_range
end	include/spdlog/fmt/bundled/chrono.h	/^    iterator end;$/;"	m	struct:formatter::parse_range
end	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR const value_type* end() const { return begin() + N; }$/;"	f	struct:internal::compiletime_prepared_parts_type_provider::format_parts_array
end	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator end() const { return data_ + size_; }$/;"	f	class:basic_string_view
end	include/spdlog/fmt/bundled/format.h	/^  It end;$/;"	m	struct:arg_join
end	include/spdlog/fmt/bundled/format.h	/^  sentinel end() const { return {}; }  \/\/ Sentinel is not used yet.$/;"	f	class:internal::output_range
end_	include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::bytes_range
end_of_argument_id	include/spdlog/fmt/bundled/compile.h	/^  std::size_t end_of_argument_id;$/;"	m	struct:internal::format_part
end_precision	include/spdlog/fmt/bundled/chrono.h	/^    void end_precision() {}$/;"	f	struct:formatter::spec_handler
end_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() { checker_.check_precision(); }$/;"	f	class:internal::specs_checker
end_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() {}$/;"	f	class:internal::specs_setter
ends_with	tests/utils.cpp	/^bool ends_with(std::string const &value, std::string const &ending)$/;"	f
enqueue	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue
enqueue_nowait	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue_nowait(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue
entry	include/spdlog/fmt/bundled/core.h	/^  struct entry {$/;"	s	class:internal::arg_map
eol_	include/spdlog/details/pattern_formatter.h	/^    std::string eol_;$/;"	m	class:spdlog::final
err	include/spdlog/common.h	/^    err = SPDLOG_LEVEL_ERROR,$/;"	e	enum:spdlog::level::level_enum
err_handler_	include/spdlog/details/registry.h	/^    void (*err_handler_)(const std::string &msg);$/;"	m	class:spdlog::details::registry
err_handler_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::err_handler_(const std::string &msg)$/;"	f	class:spdlog::logger
err_handler_example	example/example.cpp	/^void err_handler_example()$/;"	f
error	include/spdlog/fmt/bundled/format-inl.h	/^  error  \/\/ Digit generation cancelled due to an error.$/;"	e	enum:internal::digits::result
error	include/spdlog/logger.h	/^    void error(const T &msg)$/;"	f	class:spdlog::logger
error	include/spdlog/logger.h	/^    void error(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
error	include/spdlog/logger.h	/^    void error(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
error	include/spdlog/spdlog.h	/^inline void error(const T &msg)$/;"	f	namespace:spdlog
error	include/spdlog/spdlog.h	/^inline void error(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
error	include/spdlog/spdlog.h	/^inline void error(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
error_code	include/spdlog/fmt/bundled/format.h	/^  int error_code() const { return error_code_; }$/;"	f	class:system_error
error_code	include/spdlog/fmt/bundled/posix.h	/^class error_code {$/;"	c
error_code_	include/spdlog/fmt/bundled/format.h	/^  int error_code_;$/;"	m	class:system_error
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR ErrorHandler error_handler() const { return *this; }$/;"	f	class:basic_parse_context
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler() {}$/;"	f	struct:internal::error_handler
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler(const error_handler&) {}$/;"	f	struct:internal::error_handler
error_handler	include/spdlog/fmt/bundled/core.h	/^  internal::error_handler error_handler() { return {}; }$/;"	f	class:basic_format_context
error_handler	include/spdlog/fmt/bundled/core.h	/^struct error_handler {$/;"	s	namespace:internal
error_handler_	include/spdlog/fmt/bundled/format.h	/^  ErrorHandler& error_handler_;$/;"	m	class:internal::numeric_specs_checker
exchange	include/spdlog/details/null_mutex.h	/^    int exchange(int new_value, std::memory_order = std::memory_order_relaxed)$/;"	f	struct:spdlog::details::null_atomic_int
exp10	include/spdlog/fmt/bundled/format-inl.h	/^  int exp10;$/;"	m	struct:internal::fixed_handler
exp_	include/spdlog/fmt/bundled/format.h	/^    int exp_;$/;"	m	class:internal::basic_writer::grisu_writer
f	include/spdlog/fmt/bundled/chrono.h	/^    formatter& f;$/;"	m	struct:formatter::spec_handler
f	include/spdlog/fmt/bundled/format-inl.h	/^  significand_type f;$/;"	m	class:internal::fp
f	include/spdlog/fmt/bundled/format.h	/^    F f;$/;"	m	struct:internal::basic_writer::padded_int_writer
f_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit f_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
failing_sink	tests/test_errors.cpp	/^class failing_sink : public spdlog::sinks::base_sink<std::mutex>$/;"	c	file:
fallback_formatter	include/spdlog/fmt/bundled/core.h	/^struct fallback_formatter {$/;"	s	namespace:internal
fallback_formatter	include/spdlog/fmt/bundled/ostream.h	/^struct fallback_formatter<T, Char, enable_if_t<is_streamable<T, Char>::value>>$/;"	s	namespace:internal
fallback_uintptr	include/spdlog/fmt/bundled/format.h	/^struct fallback_uintptr {$/;"	s	namespace:internal
false_type	tests/catch.hpp	/^            static auto test(...)->std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
fd_	include/spdlog/fmt/bundled/posix.h	/^  file(file&& other) FMT_NOEXCEPT : fd_(other.fd_) { other.fd_ = -1; }$/;"	f	class:file
fd_	include/spdlog/fmt/bundled/posix.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file
file	include/spdlog/fmt/bundled/posix.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	include/spdlog/fmt/bundled/posix.h	/^class file {$/;"	c
file	tests/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file_	include/spdlog/fmt/bundled/posix.h	/^  FILE* file_;$/;"	m	class:buffered_file
file_	include/spdlog/fmt/bundled/posix.h	/^  buffered_file() FMT_NOEXCEPT : file_(nullptr) {}$/;"	f	class:buffered_file
file_	include/spdlog/fmt/bundled/posix.h	/^  buffered_file(buffered_file&& other) FMT_NOEXCEPT : file_(other.file_) {$/;"	f	class:buffered_file
file_	include/spdlog/sinks/stdout_sinks.h	/^    FILE *file_;$/;"	m	class:spdlog::sinks::stdout_sink_base
file_contents	tests/utils.cpp	/^std::string file_contents(const std::string &filename)$/;"	f
file_exists	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE bool file_helper::file_exists(const filename_t &fname)$/;"	f	class:spdlog::details::file_helper
file_helper	include/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
file_helper_	include/spdlog/sinks/basic_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
file_helper_	include/spdlog/sinks/daily_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
file_helper_	include/spdlog/sinks/rotating_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
file_size	bench/bench.cpp	/^static size_t file_size = 30 * 1024 * 1024;$/;"	v	file:
filename	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE const filename_t &file_helper::filename() const$/;"	f	class:spdlog::details::file_helper
filename	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE const filename_t &basic_file_sink<Mutex>::filename() const$/;"	f	class:spdlog::sinks::basic_file_sink
filename	include/spdlog/sinks/daily_file_sink.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::sinks::final
filename	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE const filename_t &rotating_file_sink<Mutex>::filename() const$/;"	f	class:spdlog::sinks::rotating_file_sink
filename_to_str	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::string filename_to_str(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
filenames_q_	include/spdlog/sinks/daily_file_sink.h	/^    details::circular_q<filename_t> filenames_q_;$/;"	m	class:spdlog::sinks::final
filesize	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os
fill	include/spdlog/fmt/bundled/format.h	/^    char_type fill;$/;"	m	struct:internal::basic_writer::padded_int_writer
fill	include/spdlog/fmt/bundled/format.h	/^  internal::fill_t<Char> fill;$/;"	m	struct:basic_format_specs
fill_t	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct fill_t {$/;"	s	namespace:internal
filter_	include/spdlog/sinks/dup_filter_sink.h	/^    bool filter_(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::dup_filter_sink
final	include/spdlog/async_logger.h	/^class async_logger final : public std::enable_shared_from_this<async_logger>, public logger$/;"	c	namespace:spdlog
final	include/spdlog/details/pattern_formatter-inl.h	/^class C_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class D_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class E_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class F_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class H_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class I_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class M_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class R_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class S_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class T_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class Y_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class aggregate_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class c_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class ch_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class color_start_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class color_stop_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class d_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class e_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class elapsed_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class f_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class full_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class m_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class p_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class pid_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class r_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class short_filename_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class source_filename_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class source_funcname_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class source_linenum_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class source_location_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class t_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class v_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter-inl.h	/^class z_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class pattern_formatter final : public formatter$/;"	c	namespace:spdlog
final	include/spdlog/sinks/android_sink.h	/^class android_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/ansicolor_sink.h	/^    void set_pattern(const std::string &pattern) final;$/;"	m	class:spdlog::sinks::ansicolor_sink
final	include/spdlog/sinks/base_sink.h	/^    void flush() final;$/;"	m	class:spdlog::sinks::base_sink
final	include/spdlog/sinks/base_sink.h	/^    void log(const details::log_msg &msg) final;$/;"	m	class:spdlog::sinks::base_sink
final	include/spdlog/sinks/base_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) final;$/;"	m	class:spdlog::sinks::base_sink
final	include/spdlog/sinks/base_sink.h	/^    void set_pattern(const std::string &pattern) final;$/;"	m	class:spdlog::sinks::base_sink
final	include/spdlog/sinks/basic_file_sink.h	/^class basic_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/daily_file_sink.h	/^class daily_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/ostream_sink.h	/^class ostream_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/rotating_file_sink.h	/^class rotating_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/wincolor_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override final;$/;"	m	class:spdlog::sinks::wincolor_sink
final	include/spdlog/sinks/wincolor_sink.h	/^    void set_pattern(const std::string &pattern) override final;$/;"	m	class:spdlog::sinks::wincolor_sink
final	tests/test_errors.cpp	/^    ~failing_sink() final = default;$/;"	m	class:failing_sink	file:
find	include/spdlog/fmt/bundled/core.h	/^  basic_format_arg<Context> find(basic_string_view<char_type> name) const {$/;"	f	class:internal::arg_map
find	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool find(Ptr first, Ptr last, T value, Ptr& out) {$/;"	f	namespace:internal
find	include/spdlog/fmt/bundled/format.h	/^inline bool find<false, char>(const char* first, const char* last, char value,$/;"	f	namespace:internal
fire_brick	include/spdlog/fmt/bundled/color.h	/^  fire_brick = 0xB22222,               \/\/ rgb(178,34,34)$/;"	m	class:color
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  template <typename T> static bool fits_in_int(T value) {$/;"	f	struct:internal::int_checker
fixed	include/spdlog/fmt/bundled/format-inl.h	/^  bool fixed;$/;"	m	struct:internal::fixed_handler
fixed	include/spdlog/fmt/bundled/format.h	/^  bool fixed;$/;"	m	struct:float_spec_handler
fixed	include/spdlog/fmt/bundled/format.h	/^  bool fixed;$/;"	m	struct:internal::gen_digits_params
fixed	include/spdlog/fmt/bundled/format.h	/^enum { fixed = 1, grisu3 = 2 };$/;"	e	enum:internal::grisu_options::__anon2
fixed_handler	include/spdlog/fmt/bundled/format-inl.h	/^struct fixed_handler {$/;"	s	namespace:internal
flag_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit flag_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::flag_formatter
flag_formatter	include/spdlog/details/pattern_formatter.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
float_spec_handler	include/spdlog/fmt/bundled/format.h	/^  explicit float_spec_handler(char t)$/;"	f	struct:float_spec_handler
float_spec_handler	include/spdlog/fmt/bundled/format.h	/^struct float_spec_handler {$/;"	s
float_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit float_type_checker(ErrorHandler eh)$/;"	f	class:internal::float_type_checker
float_type_checker	include/spdlog/fmt/bundled/format.h	/^class float_type_checker : private ErrorHandler {$/;"	c	namespace:internal
floral_white	include/spdlog/fmt/bundled/color.h	/^  floral_white = 0xFFFAF0,             \/\/ rgb(255,250,240)$/;"	m	class:color
flush	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::flush()$/;"	f	class:spdlog::details::file_helper
flush	include/spdlog/details/thread_pool.h	/^    flush,$/;"	m	class:spdlog::details::async_msg_type
flush	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush()$/;"	f	class:spdlog::logger
flush	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::flush()$/;"	f	class:spdlog::sinks::ansicolor_sink
flush	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::flush()$/;"	f	class:spdlog::sinks::base_sink
flush	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::flush()$/;"	f	class:spdlog::sinks::stdout_sink_base
flush	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::flush()$/;"	f	class:spdlog::sinks::wincolor_sink
flush_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::flush_()$/;"	f	class:spdlog::async_logger
flush_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush_()$/;"	f	class:spdlog::logger
flush_	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE void basic_file_sink<Mutex>::flush_()$/;"	f	class:spdlog::sinks::basic_file_sink
flush_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::flush_()$/;"	f	class:spdlog::sinks::rotating_file_sink
flush_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::flush_all()$/;"	f	class:spdlog::details::registry
flush_counter	tests/test_sink.h	/^    size_t flush_counter()$/;"	f	class:spdlog::sinks::test_sink
flush_every	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::flush_every(std::chrono::seconds interval)$/;"	f	class:spdlog::details::registry
flush_every	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void flush_every(std::chrono::seconds interval)$/;"	f	namespace:spdlog
flush_level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE level::level_enum logger::flush_level() const$/;"	f	class:spdlog::logger
flush_level_	include/spdlog/details/registry.h	/^    level::level_enum flush_level_ = level::off;$/;"	m	class:spdlog::details::registry
flush_on	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::details::registry
flush_on	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger
flush_on	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void flush_on(level::level_enum log_level)$/;"	f	namespace:spdlog
flusher_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry
fmt	include/spdlog/fmt/bin_to_hex.h	/^namespace fmt {$/;"	n
fmt	include/spdlog/fmt/bundled/format.h	3590;"	d
fmt_helper	include/spdlog/details/fmt_helper.h	/^namespace fmt_helper {$/;"	n	namespace:spdlog::details
fmt_safe_duration_cast	include/spdlog/fmt/bundled/chrono.h	/^To fmt_safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from) {$/;"	f	namespace:internal
folder_sep	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\/';$/;"	m	namespace:spdlog::details::os
folder_sep	include/spdlog/details/os.h	/^const char folder_sep = '\\\\';$/;"	m	namespace:spdlog::details::os
fopen_s	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool fopen_s(FILE **fp, const filename_t &filename, const filename_t &mode)$/;"	f	namespace:spdlog::details::os
for_each	include/spdlog/fmt/bundled/ranges.h	/^template <class Tuple, class F> void for_each(Tuple&& tup, F&& f) {$/;"	f	namespace:internal
force_flush_	include/spdlog/sinks/ostream_sink.h	/^    bool force_flush_;$/;"	m	class:spdlog::sinks::final
foreach_pop	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::foreach_pop(std::function<void(const details::log_msg &)> fun)$/;"	f	class:spdlog::details::backtracer
foreground_color	include/spdlog/fmt/bundled/color.h	/^  internal::color_type foreground_color;$/;"	m	class:color::emphasis::text_style
foreground_color	include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::foreground_color[] = "\\x1b[38;2;";$/;"	m	class:internal::basic_data
foreground_color	include/spdlog/fmt/bundled/format.h	/^  static const char foreground_color[];$/;"	m	struct:internal::basic_data
forest_green	include/spdlog/fmt/bundled/color.h	/^  forest_green = 0x228B22,             \/\/ rgb(34,139,34)$/;"	m	class:color
format	bench/utils.h	/^inline std::string format(const T &value)$/;"	f	namespace:utils
format	bench/utils.h	/^inline std::string format(const double &value)$/;"	f	namespace:utils
format	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest)$/;"	f	class:spdlog::pattern_formatter
format	include/spdlog/fmt/bundled/color.h	/^inline std::basic_string<Char> format(const text_style& ts, const S& format_str,$/;"	f	class:color::emphasis
format	include/spdlog/fmt/bundled/compile.h	/^std::basic_string<Char> format(const CompiledFormat& cf, const Args&... args) {$/;"	f
format	include/spdlog/fmt/bundled/core.h	/^    void format(basic_parse_context<char_type>& parse_ctx, Context& ctx) const {$/;"	f	class:basic_format_arg::handle
format	include/spdlog/fmt/bundled/core.h	/^  void (*format)(const void* arg, parse_context& parse_ctx, Context& ctx);$/;"	m	struct:internal::custom_value
format	include/spdlog/fmt/bundled/locale.h	/^inline std::basic_string<Char> format(const std::locale& loc,$/;"	f
format	include/spdlog/fmt/bundled/printf.h	/^OutputIt basic_printf_context<OutputIt, Char>::format() {$/;"	f	class:basic_printf_context
format	include/spdlog/fmt/bundled/ranges.h	/^  typename FormatContext::iterator format(const RangeT& values,$/;"	f	struct:formatter
format_	include/spdlog/fmt/bundled/compile.h	/^  Format format_;$/;"	m	class:internal::prepared_format
format_	include/spdlog/fmt/bundled/compile.h	/^  basic_string_view<Char> format_;$/;"	m	class:internal::format_preparation_handler
format_arg	include/spdlog/fmt/bundled/compile.h	/^  void format_arg(basic_parse_context<char_type>& parse_ctx, Context& ctx,$/;"	f	class:internal::prepared_format
format_arg_store	include/spdlog/fmt/bundled/core.h	/^template <typename Context, typename... Args> class format_arg_store {$/;"	c
format_chrono_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^static OutputIt format_chrono_duration_unit(OutputIt out) {$/;"	f	namespace:internal
format_chrono_duration_value	include/spdlog/fmt/bundled/chrono.h	/^OutputIt format_chrono_duration_value(OutputIt out, Rep val, int precision) {$/;"	f	namespace:internal
format_custom_arg	include/spdlog/fmt/bundled/core.h	/^  static void format_custom_arg(const void* arg,$/;"	f	class:internal::value
format_decimal	include/spdlog/fmt/bundled/format.h	/^  char* format_decimal(unsigned long long value) {$/;"	f	class:format_int
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline Char* format_decimal(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline It format_decimal(It out, UInt value, int num_digits) {$/;"	f	namespace:internal
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline Iterator format_decimal(Iterator out, UInt value, int num_digits,$/;"	f	namespace:internal
format_each	include/spdlog/fmt/bundled/ranges.h	/^  template <typename FormatContext> struct format_each {$/;"	s	struct:formatter
format_error	include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const char* message) : std::runtime_error(message) {}$/;"	f	class:format_error
format_error	include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const std::string& message)$/;"	f	class:format_error
format_error	include/spdlog/fmt/bundled/format.h	/^class FMT_API format_error : public std::runtime_error {$/;"	c
format_float	include/spdlog/fmt/bundled/format-inl.h	/^int format_float(char* buf, std::size_t size, const char* format, int precision,$/;"	f	namespace:internal
format_handler	include/spdlog/fmt/bundled/format.h	/^  format_handler(range r, basic_string_view<Char> str,$/;"	f	struct:format_handler
format_handler	include/spdlog/fmt/bundled/format.h	/^struct format_handler : internal::error_handler {$/;"	s
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(int value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long long value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^class format_int {$/;"	c
format_localized	include/spdlog/fmt/bundled/chrono.h	/^  void format_localized(const tm& time, const char* format) {$/;"	f	struct:internal::chrono_formatter
format_part	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part()$/;"	f	struct:internal::format_part
format_part	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part(internal::string_view_metadata text)$/;"	f	struct:internal::format_part
format_part	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part(named_argument_id arg_id)$/;"	f	struct:internal::format_part
format_part	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part(specification spec)$/;"	f	struct:internal::format_part
format_part	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_part(unsigned id)$/;"	f	struct:internal::format_part
format_part	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct format_part {$/;"	s	namespace:internal
format_parts_array	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR format_parts_array() : arr{} {}$/;"	f	struct:internal::compiletime_prepared_parts_type_provider::format_parts_array
format_parts_array	include/spdlog/fmt/bundled/compile.h	/^  template <unsigned N> struct format_parts_array {$/;"	s	class:internal::compiletime_prepared_parts_type_provider
format_preparation_handler	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR format_preparation_handler(basic_string_view<Char> format,$/;"	f	class:internal::format_preparation_handler
format_preparation_handler	include/spdlog/fmt/bundled/compile.h	/^class format_preparation_handler : public internal::error_handler {$/;"	c	namespace:internal
format_signed	include/spdlog/fmt/bundled/format.h	/^  void format_signed(long long value) {$/;"	f	class:format_int
format_str	include/spdlog/fmt/bundled/chrono.h	/^    basic_string_view<Char> format_str;$/;"	m	struct:formatter::spec_handler
format_str	include/spdlog/fmt/bundled/chrono.h	/^  mutable basic_string_view<Char> format_str;$/;"	m	struct:formatter
format_str_	include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_parse_context
format_str_	include/spdlog/fmt/bundled/format.h	/^  const Char* format_str_;$/;"	m	class:dynamic_formatter
format_str_	include/spdlog/fmt/bundled/format.h	/^  const Char* format_str_;$/;"	m	struct:formatter
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const Arg&) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char*) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t*) {$/;"	f	namespace:internal
format_string_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR format_string_checker($/;"	f	class:internal::format_string_checker
format_string_checker	include/spdlog/fmt/bundled/format.h	/^class format_string_checker {$/;"	c	namespace:internal
format_to	include/spdlog/fmt/bundled/compile.h	/^OutputIt format_to(OutputIt out, const CompiledFormat& cf,$/;"	f
format_to	include/spdlog/fmt/bundled/format.h	/^inline OutputIt format_to(OutputIt out, const S& format_str, Args&&... args) {$/;"	f
format_to	include/spdlog/fmt/bundled/format.h	/^inline typename buffer_context<Char>::iterator format_to($/;"	f
format_to	include/spdlog/fmt/bundled/locale.h	/^inline OutputIt format_to(OutputIt out, const std::locale& loc,$/;"	f
format_to_n	include/spdlog/fmt/bundled/compile.h	/^format_to_n_result<OutputIt> format_to_n(OutputIt out, size_t n,$/;"	f
format_to_n	include/spdlog/fmt/bundled/format.h	/^inline format_to_n_result<OutputIt> format_to_n(OutputIt out, std::size_t n,$/;"	f
format_to_n_result	include/spdlog/fmt/bundled/format.h	/^template <typename OutputIt> struct format_to_n_result {$/;"	s
format_uint	include/spdlog/fmt/bundled/format.h	/^Char* format_uint(Char* buffer, internal::fallback_uintptr n, int num_digits,$/;"	f	namespace:internal
format_uint	include/spdlog/fmt/bundled/format.h	/^inline Char* format_uint(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_uint	include/spdlog/fmt/bundled/format.h	/^inline It format_uint(It out, UInt value, int num_digits, bool upper = false) {$/;"	f	namespace:internal
format_value	include/spdlog/fmt/bundled/ostream.h	/^void format_value(buffer<Char>& buf, const T& value) {$/;"	f	namespace:internal
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^  formatbuf(buffer<Char>& buf) : buffer_(buf) {}$/;"	f	class:internal::formatbuf
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^template <class Char> class formatbuf : public std::basic_streambuf<Char> {$/;"	c	namespace:internal
formatted_size	include/spdlog/fmt/bundled/compile.h	/^std::size_t formatted_size(const CompiledFormat& cf, const Args&... args) {$/;"	f
formatted_size	include/spdlog/fmt/bundled/format.h	/^inline std::size_t formatted_size(string_view format_str, const Args&... args) {$/;"	f
formatter	include/spdlog/fmt/bin_to_hex.h	/^struct formatter<spdlog::details::bytes_range<T>>$/;"	s	namespace:fmt
formatter	include/spdlog/fmt/bundled/chrono.h	/^  formatter() : precision(-1) {}$/;"	f	struct:formatter
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^template <typename Char> struct formatter<std::tm, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/core.h	/^struct formatter {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base& formatter;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
formatter	include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base& formatter;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
formatter	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR formatter() : format_str_(nullptr) {}$/;"	f	struct:formatter
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<Char[N], Char> : formatter<basic_string_view<Char>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<T, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<arg_join<It, Char>, Char>$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<void*, Char> : formatter<const void*, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<RangeT, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<TupleT, Char, enable_if_t<fmt::is_tuple_like<TupleT>::value>> {$/;"	s
formatter	include/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	include/spdlog/details/registry.h	/^    std::unique_ptr<formatter> formatter_;$/;"	m	class:spdlog::details::registry
formatter_	include/spdlog/sinks/ansicolor_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::ansicolor_sink
formatter_	include/spdlog/sinks/base_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::base_sink
formatter_	include/spdlog/sinks/stdout_sinks.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::stdout_sink_base
formatter_	include/spdlog/sinks/wincolor_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::wincolor_sink
formatters_	include/spdlog/details/pattern_formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> formatters_;$/;"	m	class:spdlog::final
formatting	include/spdlog/fmt/bundled/ranges.h	/^    formatting_tuple<Char>& formatting;$/;"	m	struct:formatter::format_each
formatting	include/spdlog/fmt/bundled/ranges.h	/^  formatting_range<Char> formatting;$/;"	m	struct:formatter
formatting	include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple<Char> formatting;$/;"	m	struct:formatter
formatting_base	include/spdlog/fmt/bundled/ranges.h	/^template <typename Char> struct formatting_base {$/;"	s
formatting_range	include/spdlog/fmt/bundled/ranges.h	/^  formatting_range() : prefix('{'), delimiter(','), postfix('}') {}$/;"	f	struct:formatting_range
formatting_range	include/spdlog/fmt/bundled/ranges.h	/^struct formatting_range : formatting_base<Char> {$/;"	s
formatting_tuple	include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple() : prefix('('), delimiter(','), postfix(')') {}$/;"	f	struct:formatting_tuple
formatting_tuple	include/spdlog/fmt/bundled/ranges.h	/^struct formatting_tuple : formatting_base<Char> {$/;"	s
fp	include/spdlog/fmt/bundled/format-inl.h	/^  fp() : f(0), e(0) {}$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^  fp(uint64_t f_val, int e_val) : f(f_val), e(e_val) {}$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^  template <typename Double> explicit fp(Double d) {$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^class fp {$/;"	c	namespace:internal
fprintf	include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::FILE* f, const S& format, const Args&... args) {$/;"	f
fprintf	include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::basic_ostream<Char>& os, const S& format_str,$/;"	f
freelocale	include/spdlog/fmt/bundled/posix.h	/^  static void freelocale(locale_t locale) { _free_locale(locale); }$/;"	f	class:Locale
front	include/spdlog/details/circular_q.h	/^    T &front()$/;"	f	class:spdlog::details::circular_q
front	include/spdlog/details/circular_q.h	/^    const T &front() const$/;"	f	class:spdlog::details::circular_q
fuchsia	include/spdlog/fmt/bundled/color.h	/^  fuchsia = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	m	class:color
full	include/spdlog/details/circular_q.h	/^    bool full() const$/;"	f	class:spdlog::details::circular_q
full_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit full_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
fwrite_fully	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void fwrite_fully(const void* ptr, size_t size, size_t count,$/;"	f	namespace:internal
g	include/spdlog/fmt/bundled/color.h	/^  uint8_t g;$/;"	m	struct:color::emphasis::rgb
gainsboro	include/spdlog/fmt/bundled/color.h	/^  gainsboro = 0xDCDCDC,                \/\/ rgb(220,220,220)$/;"	m	class:color
gen_digits_params	include/spdlog/fmt/bundled/format.h	/^struct gen_digits_params {$/;"	s	namespace:internal
get	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> registry::get(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
get	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Locale> Locale locale_ref::get() const {$/;"	f	class:internal::locale_ref
get	include/spdlog/fmt/bundled/posix.h	/^  type get() const { return locale_; }$/;"	f	class:Locale
get	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> get(const std::string &name)$/;"	f	namespace:spdlog
get_allocator	include/spdlog/fmt/bundled/format.h	/^  Allocator get_allocator() const { return *this; }$/;"	f	class:basic_memory_buffer
get_arg	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR format_arg get_arg(auto_id) {$/;"	f	class:internal::specs_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR format_arg get_arg(basic_string_view<char_type> arg_id) {$/;"	f	class:internal::specs_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR format_arg get_arg(int arg_id) {$/;"	f	class:internal::specs_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^  void get_arg(int id) { arg = internal::get_arg(context, id); }$/;"	f	struct:format_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR typename Context::format_arg get_arg(Context& ctx, int id) {$/;"	f	namespace:internal
get_arg	include/spdlog/fmt/bundled/printf.h	/^basic_printf_context<OutputIt, Char>::get_arg(unsigned arg_index) {$/;"	f	class:basic_printf_context
get_cached_offset	include/spdlog/details/pattern_formatter-inl.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time)$/;"	f	class:spdlog::details::final
get_cached_power	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp get_cached_power(int min_exponent, int& pow10_exponent) {$/;"	f	namespace:internal
get_container	include/spdlog/fmt/bundled/core.h	/^inline Container& get_container(std::back_insert_iterator<Container> it) {$/;"	f	namespace:internal
get_data	include/spdlog/fmt/bundled/format.h	/^inline typename Container::value_type* get_data(Container& c) {$/;"	f	namespace:internal
get_data	include/spdlog/fmt/bundled/format.h	/^template <typename Char> inline Char* get_data(std::basic_string<Char>& s) {$/;"	f	namespace:internal
get_default_raw	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE logger *registry::get_default_raw()$/;"	f	class:spdlog::details::registry
get_filesize	tests/utils.cpp	/^std::size_t get_filesize(const std::string &filename)$/;"	f
get_indexes	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR make_index_sequence<std::tuple_size<T>::value> get_indexes($/;"	f	namespace:internal
get_milliseconds	include/spdlog/fmt/bundled/chrono.h	/^inline std::chrono::duration<Rep, std::milli> get_milliseconds($/;"	f	namespace:internal
get_prefix	include/spdlog/fmt/bundled/format.h	/^    string_view get_prefix() const { return string_view(prefix, prefix_size); }$/;"	f	struct:internal::basic_writer::int_writer
get_round_direction	include/spdlog/fmt/bundled/format-inl.h	/^inline round_direction get_round_direction(uint64_t divisor, uint64_t remainder,$/;"	f	namespace:internal
get_time_	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE std::tm pattern_formatter::get_time_(const details::log_msg &msg)$/;"	f	class:spdlog::pattern_formatter
get_tp	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<thread_pool> registry::get_tp()$/;"	f	class:spdlog::details::registry
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::atto>() { return "as"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::centi>() { return "cs"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::deca>() { return "das"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::deci>() { return "ds"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::exa>() { return "Es"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::femto>() { return "fs"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::giga>() { return "Gs"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::hecto>() { return "hs"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::kilo>() { return "ks"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::mega>() { return "Ms"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::micro>() { return "µs"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::milli>() { return "ms"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::nano>() { return "ns"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::peta>() { return "Ps"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::pico>() { return "ps"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<1>>() { return "s"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<3600>>() {$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::ratio<60>>() {$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char* get_units<std::tera>() { return "Ts"; }$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <typename Period> FMT_CONSTEXPR const char* get_units() {$/;"	f	namespace:internal
ghost_white	include/spdlog/fmt/bundled/color.h	/^  ghost_white = 0xF8F8FF,              \/\/ rgb(248,248,255)$/;"	m	class:color
gmtime	include/spdlog/fmt/bundled/chrono.h	/^inline std::tm gmtime(std::time_t time) {$/;"	f
gmtime_r	include/spdlog/fmt/bundled/chrono.h	/^inline null<> gmtime_r(...) { return null<>(); }$/;"	f	namespace:internal
gmtime_s	include/spdlog/fmt/bundled/chrono.h	/^inline null<> gmtime_s(...) { return null<>(); }$/;"	f	namespace:internal
gold	include/spdlog/fmt/bundled/color.h	/^  gold = 0xFFD700,                     \/\/ rgb(255,215,0)$/;"	m	class:color
golden_rod	include/spdlog/fmt/bundled/color.h	/^  golden_rod = 0xDAA520,               \/\/ rgb(218,165,32)$/;"	m	class:color
gray	include/spdlog/fmt/bundled/color.h	/^  gray = 0x808080,                     \/\/ rgb(128,128,128)$/;"	m	class:color
green	include/spdlog/fmt/bundled/color.h	/^  green = 0x008000,                    \/\/ rgb(0,128,0)$/;"	m	class:color
green	include/spdlog/fmt/bundled/color.h	/^  green,$/;"	m	class:color::terminal_color
green	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t green = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink
green_yellow	include/spdlog/fmt/bundled/color.h	/^  green_yellow = 0xADFF2F,             \/\/ rgb(173,255,47)$/;"	m	class:color
grisu3	include/spdlog/fmt/bundled/format.h	/^enum { fixed = 1, grisu3 = 2 };$/;"	e	enum:internal::grisu_options::__anon2
grisu_format	include/spdlog/fmt/bundled/format-inl.h	/^FMT_API bool grisu_format(Double value, buffer<char>& buf, int precision,$/;"	f	namespace:internal
grisu_format	include/spdlog/fmt/bundled/format.h	/^inline bool grisu_format(Double, buffer<char>&, int, unsigned, int&) {$/;"	f	namespace:internal
grisu_gen_digits	include/spdlog/fmt/bundled/format-inl.h	/^digits::result grisu_gen_digits(fp value, uint64_t error, int& exp,$/;"	f	namespace:internal
grisu_options	include/spdlog/fmt/bundled/format.h	/^namespace grisu_options {$/;"	n	namespace:internal
grisu_prettify	include/spdlog/fmt/bundled/format.h	/^It grisu_prettify(const char* digits, int size, int exp, It it,$/;"	f	namespace:internal
grisu_shortest_handler	include/spdlog/fmt/bundled/format-inl.h	/^template <int GRISU_VERSION> struct grisu_shortest_handler {$/;"	s	namespace:internal
grisu_writer	include/spdlog/fmt/bundled/format.h	/^    grisu_writer(char sign, internal::buffer<char>& digits, int exp,$/;"	f	class:internal::basic_writer::grisu_writer
grisu_writer	include/spdlog/fmt/bundled/format.h	/^  class grisu_writer {$/;"	c	class:internal::basic_writer
grow	include/spdlog/fmt/bundled/format.h	/^void basic_memory_buffer<T, SIZE, Allocator>::grow(std::size_t size) {$/;"	f	class:basic_memory_buffer
handle	include/spdlog/fmt/bundled/core.h	/^    explicit handle(internal::custom_value<Context> custom) : custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	include/spdlog/fmt/bundled/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle_char_specs	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_char_specs(const basic_format_specs<Char>* specs,$/;"	f	namespace:internal
handle_cstring_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_cstring_type_spec(Char spec, Handler&& handler) {$/;"	f	namespace:internal
handle_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^void handle_dynamic_spec(Spec& value, arg_ref<typename Context::char_type> ref,$/;"	f	namespace:internal
handle_flag_	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::handle_flag_(char flag, details::padding_info padding)$/;"	f	class:spdlog::pattern_formatter
handle_float_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_float_type_spec(char spec, Handler&& handler) {$/;"	f	namespace:internal
handle_int_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_int_type_spec(char spec, Handler&& handler) {$/;"	f	namespace:internal
handle_nan_inf	include/spdlog/fmt/bundled/chrono.h	/^  bool handle_nan_inf() {$/;"	f	struct:internal::chrono_formatter
handle_padspec_	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE details::padding_info pattern_formatter::handle_padspec_(std::string::const_iterator &it, std::string::const_iterator end)$/;"	f	class:spdlog::pattern_formatter
handle_specs	include/spdlog/fmt/bundled/format.h	/^  template <typename Context> void handle_specs(Context& ctx) {$/;"	f	class:dynamic_formatter
handler	include/spdlog/fmt/bundled/format.h	/^  Handler& handler;$/;"	m	struct:internal::id_adapter
handler	include/spdlog/fmt/bundled/format.h	/^  SpecHandler& handler;$/;"	m	struct:internal::precision_adapter
handler	include/spdlog/fmt/bundled/format.h	/^  SpecHandler& handler;$/;"	m	struct:internal::width_adapter
handler_	include/spdlog/fmt/bundled/format.h	/^  ErrorHandler& handler_;$/;"	m	class:internal::precision_checker
handler_	include/spdlog/fmt/bundled/format.h	/^  ErrorHandler& handler_;$/;"	m	class:internal::width_checker
has_precision	include/spdlog/fmt/bundled/format.h	/^  constexpr bool has_precision() const { return precision >= 0; }$/;"	f	struct:internal::sprintf_specs
head_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type head_ = 0;$/;"	m	class:spdlog::details::circular_q
hex_digits	include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::hex_digits[] = "0123456789abcdef";$/;"	m	class:internal::basic_data
hex_digits	include/spdlog/fmt/bundled/format.h	/^  static const char hex_digits[];$/;"	m	struct:internal::basic_data
hex_writer	include/spdlog/fmt/bundled/format.h	/^    struct hex_writer {$/;"	s	struct:internal::basic_writer::int_writer
honey_dew	include/spdlog/fmt/bundled/color.h	/^  honey_dew = 0xF0FFF0,                \/\/ rgb(240,255,240)$/;"	m	class:color
hot_pink	include/spdlog/fmt/bundled/color.h	/^  hot_pink = 0xFF69B4,                 \/\/ rgb(255,105,180)$/;"	m	class:color
hour	include/spdlog/fmt/bundled/chrono.h	/^  Rep hour() const { return static_cast<Rep>(mod((s.count() \/ 3600), 24)); }$/;"	f	struct:internal::chrono_formatter
hour12	include/spdlog/fmt/bundled/chrono.h	/^  Rep hour12() const {$/;"	f	struct:internal::chrono_formatter
i	example/example.cpp	/^    int i;$/;"	m	struct:my_type	file:
i	include/spdlog/fmt/bundled/ranges.h	/^    std::size_t& i;$/;"	m	struct:formatter::format_each
id	include/spdlog/fmt/bundled/compile.h	/^    internal::string_view_metadata id;$/;"	m	struct:internal::format_part::named_argument_id
id_adapter	include/spdlog/fmt/bundled/format.h	/^template <typename Handler, typename Char> struct id_adapter {$/;"	s	namespace:internal
ident_	include/spdlog/sinks/syslog_sink.h	/^    const std::string ident_;$/;"	m	class:spdlog::sinks::syslog_sink
implicit_bit	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const uint64_t implicit_bit =$/;"	m	class:internal::fp
in_console_	include/spdlog/sinks/wincolor_sink.h	/^    bool in_console_;$/;"	m	class:spdlog::sinks::wincolor_sink
index	include/spdlog/fmt/bundled/compile.h	/^      unsigned index;$/;"	m	union:internal::format_part::argument_id::value
index	include/spdlog/fmt/bundled/compile.h	/^    enum class which_arg_id { index, named_index };$/;"	m	class:internal::format_part::argument_id::which_arg_id
index	include/spdlog/fmt/bundled/format.h	/^    int index;$/;"	m	union:internal::arg_ref::value
index	include/spdlog/fmt/bundled/format.h	/^enum class arg_id_kind { none, index, name };$/;"	m	class:internal::arg_id_kind
indian_red	include/spdlog/fmt/bundled/color.h	/^  indian_red = 0xCD5C5C,               \/\/ rgb(205,92,92)$/;"	m	class:color
indigo	include/spdlog/fmt/bundled/color.h	/^  indigo = 0x4B0082,                   \/\/ rgb(75,0,130)$/;"	m	class:color
inf_or_nan_writer	include/spdlog/fmt/bundled/format.h	/^  struct inf_or_nan_writer {$/;"	s	class:internal::basic_writer
inf_size	include/spdlog/fmt/bundled/format.h	/^  enum { inf_size = 3 };  \/\/ This is an enum to workaround a bug in MSVC.$/;"	e	enum:internal::basic_writer::__anon4
info	include/spdlog/common.h	/^    info = SPDLOG_LEVEL_INFO,$/;"	e	enum:spdlog::level::level_enum
info	include/spdlog/logger.h	/^    void info(const T &msg)$/;"	f	class:spdlog::logger
info	include/spdlog/logger.h	/^    void info(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
info	include/spdlog/logger.h	/^    void info(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
info	include/spdlog/spdlog.h	/^inline void info(const T &msg)$/;"	f	namespace:spdlog
info	include/spdlog/spdlog.h	/^inline void info(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
info	include/spdlog/spdlog.h	/^inline void info(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
init	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void system_error::init(int err_code, string_view format_str,$/;"	f	class:system_error
init	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void windows_error::init(int err_code, string_view format_str,$/;"	f	class:windows_error
init	include/spdlog/fmt/bundled/format.h	/^void arg_map<Context>::init(const basic_format_args<Context>& args) {$/;"	f	class:internal::arg_map
init_thread_pool	include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count)$/;"	f	namespace:spdlog
init_thread_pool	include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count, std::function<void()> on_thread_start)$/;"	f	namespace:spdlog
initialize_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::initialize_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
initialize_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void initialize_logger(std::shared_ptr<logger> logger)$/;"	f	namespace:spdlog
inline_buffer_size	include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anon1
instance	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE registry &registry::instance()$/;"	f	class:spdlog::details::registry
int_checker	include/spdlog/fmt/bundled/printf.h	/^template <> struct int_checker<true> {$/;"	s	namespace:internal
int_checker	include/spdlog/fmt/bundled/printf.h	/^template <bool IsSigned> struct int_checker {$/;"	s	namespace:internal
int_type	include/spdlog/fmt/bundled/core.h	/^  int_type,$/;"	e	enum:internal::type
int_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit int_type_checker(ErrorHandler eh) : ErrorHandler(eh) {}$/;"	f	class:internal::int_type_checker
int_type_checker	include/spdlog/fmt/bundled/format.h	/^template <typename ErrorHandler> class int_type_checker : private ErrorHandler {$/;"	c	namespace:internal
int_value	include/spdlog/fmt/bundled/core.h	/^    int int_value;$/;"	m	union:internal::value::__anon12
int_writer	include/spdlog/fmt/bundled/format.h	/^    int_writer(basic_writer<Range>& w, Int value, const Specs& s)$/;"	f	struct:internal::basic_writer::int_writer
int_writer	include/spdlog/fmt/bundled/format.h	/^  template <typename Int, typename Specs> struct int_writer {$/;"	s	class:internal::basic_writer
internal	include/spdlog/fmt/bundled/chrono.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/color.h	/^namespace internal {$/;"	n	class:color::emphasis
internal	include/spdlog/fmt/bundled/compile.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/core.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/format-inl.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/format.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/locale.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/ostream.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/printf.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/ranges.h	/^namespace internal {$/;"	n
isFalseTest	tests/catch.hpp	/^    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
is_arithmetic	include/spdlog/fmt/bundled/core.h	/^  bool is_arithmetic() const { return internal::is_arithmetic(type_); }$/;"	f	class:basic_format_arg
is_arithmetic	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_arithmetic(type t) {$/;"	f	namespace:internal
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<char16_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<char32_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<char8_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<char> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<wchar_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct is_char : std::false_type {};$/;"	s
is_compile_string	include/spdlog/fmt/bundled/core.h	/^struct is_compile_string : std::is_base_of<compile_string, S> {};$/;"	s
is_integral	include/spdlog/fmt/bundled/core.h	/^  bool is_integral() const { return internal::is_integral(type_); }$/;"	f	class:basic_format_arg
is_integral	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_integral(type t) {$/;"	f	namespace:internal
is_like_std_string	include/spdlog/fmt/bundled/ranges.h	/^struct is_like_std_string<fmt::basic_string_view<Char>> : std::true_type {};$/;"	s	namespace:internal
is_like_std_string	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_like_std_string {$/;"	c	namespace:internal
is_name_start	include/spdlog/fmt/bundled/format.h	/^template <typename Char> FMT_CONSTEXPR bool is_name_start(Char c) {$/;"	f	namespace:internal
is_negative	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool is_negative(T value) {$/;"	f	namespace:internal
is_negative	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool is_negative(T) {$/;"	f	namespace:internal
is_output_iterator	include/spdlog/fmt/bundled/format.h	/^template <typename It> class is_output_iterator {$/;"	c	namespace:internal
is_packed	include/spdlog/fmt/bundled/core.h	/^  static const bool is_packed = num_args < internal::max_packed_args;$/;"	m	class:format_arg_store
is_range	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename Char> struct is_range {$/;"	s
is_range_	include/spdlog/fmt/bundled/ranges.h	/^struct is_range_<$/;"	s	namespace:internal
is_range_	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename _ = void> struct is_range_ : std::false_type {};$/;"	s	namespace:internal
is_rgb	include/spdlog/fmt/bundled/color.h	/^  bool is_rgb;$/;"	m	struct:color::emphasis::internal::color_type
is_streamable	include/spdlog/fmt/bundled/ostream.h	/^template <typename T, typename Char> class is_streamable {$/;"	c	namespace:internal
is_string	include/spdlog/fmt/bundled/core.h	/^struct is_string : std::is_class<decltype(to_string_view(std::declval<S>()))> {$/;"	s	namespace:internal
is_tuple_like	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> struct is_tuple_like {$/;"	s
is_tuple_like_	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_tuple_like_ {$/;"	c	namespace:internal
is_unique	tests/catch.hpp	/^	inline constexpr auto is_unique = std::true_type{};$/;"	m	namespace:Catch
is_unique	tests/catch.hpp	/^	inline constexpr auto is_unique<T, Rest...> = std::bool_constant<$/;"	m	namespace:Catch
is_zero_int	include/spdlog/fmt/bundled/printf.h	/^class is_zero_int {$/;"	c	namespace:internal
isfinite	include/spdlog/fmt/bundled/chrono.h	/^inline bool isfinite(T value) {$/;"	f	namespace:internal
isfinite	include/spdlog/fmt/bundled/chrono.h	/^inline bool isfinite(T) {$/;"	f	namespace:internal
isnan	include/spdlog/fmt/bundled/chrono.h	/^inline bool isnan(T value) {$/;"	f	namespace:internal
isnan	include/spdlog/fmt/bundled/chrono.h	/^inline bool isnan(T) {$/;"	f	namespace:internal
it_	include/spdlog/fmt/bundled/format.h	/^  OutputIt it_;$/;"	m	class:internal::output_range
italic	include/spdlog/fmt/bundled/color.h	/^  italic = 1 << 1,$/;"	m	class:color::emphasis
iterator_category	include/spdlog/fmt/bundled/format.h	/^struct iterator_category : std::false_type {};$/;"	s	namespace:internal
iterator_category	include/spdlog/fmt/bundled/format.h	/^struct iterator_category<It, void_t<typename It::iterator_category>> {$/;"	s	namespace:internal
iterator_category	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct iterator_category<T*> {$/;"	s	namespace:internal
ivory	include/spdlog/fmt/bundled/color.h	/^  ivory = 0xFFFFF0,                    \/\/ rgb(255,255,240)$/;"	m	class:color
join	include/spdlog/fmt/bundled/format.h	/^arg_join<It, char> join(It begin, It end, string_view sep) {$/;"	f
join	include/spdlog/fmt/bundled/format.h	/^arg_join<It, wchar_t> join(It begin, It end, wstring_view sep) {$/;"	f
join	include/spdlog/fmt/bundled/format.h	/^arg_join<internal::iterator_t<const Range>, char> join(const Range& range,$/;"	f
join	include/spdlog/fmt/bundled/format.h	/^arg_join<internal::iterator_t<const Range>, wchar_t> join(const Range& range,$/;"	f
khaki	include/spdlog/fmt/bundled/color.h	/^  khaki = 0xF0E68C,                    \/\/ rgb(240,230,140)$/;"	m	class:color
kind	include/spdlog/fmt/bundled/compile.h	/^  enum class kind { argument_id, named_argument_id, text, specification };$/;"	c	struct:internal::format_part
kind	include/spdlog/fmt/bundled/format.h	/^  arg_id_kind kind;$/;"	m	struct:internal::arg_ref
last_integer_type	include/spdlog/fmt/bundled/core.h	/^  last_integer_type = char_type,$/;"	e	enum:internal::type
last_log_secs_	include/spdlog/details/pattern_formatter.h	/^    std::chrono::seconds last_log_secs_;$/;"	m	class:spdlog::final
last_message_time_	include/spdlog/details/pattern_formatter-inl.h	/^    log_clock::time_point last_message_time_;$/;"	m	class:spdlog::details::final
last_msg_payload_	include/spdlog/sinks/dup_filter_sink.h	/^    std::string last_msg_payload_;$/;"	m	class:spdlog::sinks::dup_filter_sink
last_msg_time_	include/spdlog/sinks/dup_filter_sink.h	/^    log_clock::time_point last_msg_time_;$/;"	m	class:spdlog::sinks::dup_filter_sink
last_numeric_type	include/spdlog/fmt/bundled/core.h	/^  last_numeric_type = long_double_type,$/;"	e	enum:internal::type
lavender	include/spdlog/fmt/bundled/color.h	/^  lavender = 0xE6E6FA,                 \/\/ rgb(230,230,250)$/;"	m	class:color
lavender_blush	include/spdlog/fmt/bundled/color.h	/^  lavender_blush = 0xFFF0F5,           \/\/ rgb(255,240,245)$/;"	m	class:color
lawn_green	include/spdlog/fmt/bundled/color.h	/^  lawn_green = 0x7CFC00,               \/\/ rgb(124,252,0)$/;"	m	class:color
left	include/spdlog/details/pattern_formatter.h	/^        left,$/;"	e	enum:spdlog::details::padding_info::pad_side
left	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
lemon_chiffon	include/spdlog/fmt/bundled/color.h	/^  lemon_chiffon = 0xFFFACD,            \/\/ rgb(255,250,205)$/;"	m	class:color
level	include/spdlog/common-inl.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/common.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE level::level_enum logger::level() const$/;"	f	class:spdlog::logger
level	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE spdlog::level::level_enum spdlog::sinks::sink::level() const$/;"	f	class:spdlog::sinks::sink
level_	include/spdlog/details/registry.h	/^    level::level_enum level_ = level::info;$/;"	m	class:spdlog::details::registry
level_enum	include/spdlog/common.h	/^enum level_enum$/;"	g	namespace:spdlog::level
level_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::level_formatter
level_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
lg	include/spdlog/fmt/bundled/format.h	/^template <typename Handler> inline char* lg(uint32_t n, Handler h) {$/;"	f	namespace:internal
light_blue	include/spdlog/fmt/bundled/color.h	/^  light_blue = 0xADD8E6,               \/\/ rgb(173,216,230)$/;"	m	class:color
light_coral	include/spdlog/fmt/bundled/color.h	/^  light_coral = 0xF08080,              \/\/ rgb(240,128,128)$/;"	m	class:color
light_cyan	include/spdlog/fmt/bundled/color.h	/^  light_cyan = 0xE0FFFF,               \/\/ rgb(224,255,255)$/;"	m	class:color
light_golden_rod_yellow	include/spdlog/fmt/bundled/color.h	/^  light_golden_rod_yellow = 0xFAFAD2,  \/\/ rgb(250,250,210)$/;"	m	class:color
light_gray	include/spdlog/fmt/bundled/color.h	/^  light_gray = 0xD3D3D3,               \/\/ rgb(211,211,211)$/;"	m	class:color
light_green	include/spdlog/fmt/bundled/color.h	/^  light_green = 0x90EE90,              \/\/ rgb(144,238,144)$/;"	m	class:color
light_pink	include/spdlog/fmt/bundled/color.h	/^  light_pink = 0xFFB6C1,               \/\/ rgb(255,182,193)$/;"	m	class:color
light_salmon	include/spdlog/fmt/bundled/color.h	/^  light_salmon = 0xFFA07A,             \/\/ rgb(255,160,122)$/;"	m	class:color
light_sea_green	include/spdlog/fmt/bundled/color.h	/^  light_sea_green = 0x20B2AA,          \/\/ rgb(32,178,170)$/;"	m	class:color
light_sky_blue	include/spdlog/fmt/bundled/color.h	/^  light_sky_blue = 0x87CEFA,           \/\/ rgb(135,206,250)$/;"	m	class:color
light_slate_gray	include/spdlog/fmt/bundled/color.h	/^  light_slate_gray = 0x778899,         \/\/ rgb(119,136,153)$/;"	m	class:color
light_steel_blue	include/spdlog/fmt/bundled/color.h	/^  light_steel_blue = 0xB0C4DE,         \/\/ rgb(176,196,222)$/;"	m	class:color
light_yellow	include/spdlog/fmt/bundled/color.h	/^  light_yellow = 0xFFFFE0,             \/\/ rgb(255,255,224)$/;"	m	class:color
lime	include/spdlog/fmt/bundled/color.h	/^  lime = 0x00FF00,                     \/\/ rgb(0,255,0)$/;"	m	class:color
lime_green	include/spdlog/fmt/bundled/color.h	/^  lime_green = 0x32CD32,               \/\/ rgb(50,205,50)$/;"	m	class:color
limit_	include/spdlog/fmt/bundled/format.h	/^  std::size_t limit_;$/;"	m	class:internal::truncating_iterator_base
line	tests/catch.hpp	/^            line( _line )$/;"	f	struct:Catch::SourceLineInfo
line	tests/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
lineInfo	tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
line_size	include/spdlog/fmt/bin_to_hex.h	/^    const std::size_t line_size = 100;$/;"	m	struct:fmt::formatter
linen	include/spdlog/fmt/bundled/color.h	/^  linen = 0xFAF0E6,                    \/\/ rgb(250,240,230)$/;"	m	class:color
lines	tests/test_sink.h	/^    std::vector<std::string> lines()$/;"	f	class:spdlog::sinks::test_sink
lines_	tests/test_sink.h	/^    std::vector<std::string> lines_;$/;"	m	class:spdlog::sinks::test_sink
lines_to_save	tests/test_sink.h	/^    const size_t lines_to_save = 100;$/;"	m	class:spdlog::sinks::test_sink
literals	include/spdlog/fmt/bundled/format.h	/^inline namespace literals {$/;"	n
load	include/spdlog/details/null_mutex.h	/^    int load(std::memory_order = std::memory_order_relaxed) const$/;"	f	struct:spdlog::details::null_atomic_int
loc_	include/spdlog/fmt/bundled/core.h	/^  internal::locale_ref loc_;$/;"	m	class:basic_format_context
local	include/spdlog/common.h	/^    local, \/\/ log localtime$/;"	m	class:spdlog::pattern_time_type
locale	include/spdlog/fmt/bundled/core.h	/^  internal::locale_ref locale() { return loc_; }$/;"	f	class:basic_format_context
locale_	include/spdlog/fmt/bundled/core.h	/^  const void* locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:internal::locale_ref
locale_	include/spdlog/fmt/bundled/format.h	/^  internal::locale_ref locale_;$/;"	m	class:internal::basic_writer
locale_	include/spdlog/fmt/bundled/posix.h	/^  locale_t locale_;$/;"	m	class:Locale
locale_ref	include/spdlog/fmt/bundled/core.h	/^  locale_ref() : locale_(nullptr) {}$/;"	f	class:internal::locale_ref
locale_ref	include/spdlog/fmt/bundled/core.h	/^class locale_ref {$/;"	c	namespace:internal
locale_ref	include/spdlog/fmt/bundled/format-inl.h	/^locale_ref::locale_ref(const Locale& loc) : locale_(&loc) {$/;"	f	class:internal::locale_ref
localtime	include/spdlog/fmt/bundled/chrono.h	/^inline std::tm localtime(std::time_t time) {$/;"	f
localtime_s	include/spdlog/fmt/bundled/chrono.h	/^inline null<> localtime_s(...) { return null<>(); }$/;"	f	namespace:internal
lock	include/spdlog/details/null_mutex.h	/^    void lock() const {}$/;"	f	struct:spdlog::details::null_mutex
log	include/spdlog/details/thread_pool.h	/^    log,$/;"	m	class:spdlog::details::async_msg_type
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, string_view_t msg)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::log(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::ansicolor_sink
log	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::log(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::base_sink
log	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::log(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::stdout_sink_base
log	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::log(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::wincolor_sink
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const T &msg)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, const T &msg)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
log_info	tests/test_misc.cpp	/^std::string log_info(const T &what, spdlog::level::level_enum logger_level = spdlog::level::info)$/;"	f
log_msg	include/spdlog/details/log_msg-inl.h	/^SPDLOG_INLINE log_msg::log_msg(spdlog::source_loc loc, string_view_t logger_name, spdlog::level::level_enum lvl, spdlog::string_view_t msg)$/;"	f	class:spdlog::details::log_msg
log_msg	include/spdlog/details/log_msg-inl.h	/^SPDLOG_INLINE log_msg::log_msg(string_view_t logger_name, spdlog::level::level_enum lvl, spdlog::string_view_t msg)$/;"	f	class:spdlog::details::log_msg
log_msg	include/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(const log_msg &orig_msg)$/;"	f	class:spdlog::details::log_msg_buffer
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(const log_msg_buffer &other)$/;"	f	class:spdlog::details::log_msg_buffer
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(log_msg_buffer &&other)$/;"	f	class:spdlog::details::log_msg_buffer
log_msg_buffer	include/spdlog/details/log_msg_buffer.h	/^class log_msg_buffer : public log_msg$/;"	c	namespace:spdlog::details
log_to_str	tests/test_pattern_formatter.cpp	/^static std::string log_to_str(const std::string &msg, const Args &... args)$/;"	f	file:
logger	include/spdlog/logger-inl.h	/^SPDLOG_INLINE logger::logger(const logger &other)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    explicit logger(std::string name)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, It begin, It end)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, sink_ptr single_sink)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, sinks_init_list sinks)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_map_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry
logger_name	include/spdlog/details/log_msg.h	/^    string_view_t logger_name;$/;"	m	struct:spdlog::details::log_msg
loggers_	include/spdlog/details/registry.h	/^    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;$/;"	m	class:spdlog::details::registry
long_double_type	include/spdlog/fmt/bundled/core.h	/^  long_double_type,$/;"	e	enum:internal::type
long_double_value	include/spdlog/fmt/bundled/core.h	/^    long double long_double_value;$/;"	m	union:internal::value::__anon12
long_long_type	include/spdlog/fmt/bundled/core.h	/^  long_long_type,$/;"	e	enum:internal::type
long_long_value	include/spdlog/fmt/bundled/core.h	/^    long long long_long_value;$/;"	m	union:internal::value::__anon12
long_short	include/spdlog/fmt/bundled/core.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	e	enum:internal::__anon13
lossless_integral_conversion	include/spdlog/fmt/bundled/safe-duration-cast.h	/^FMT_CONSTEXPR To lossless_integral_conversion(const From from, int& ec) {$/;"	f	namespace:safe_duration_cast
m	scripts/extract_version.py	/^    m = reg.match(l)$/;"	v
m_args	tests/catch.hpp	/^        std::vector<Arg> m_args;$/;"	m	struct:Catch::Parser
m_data	tests/catch.hpp	/^            m_data( other.m_data )$/;"	f	class:Catch::StringRef
m_data	tests/catch.hpp	/^        char* m_data = nullptr;$/;"	m	class:Catch::StringRef
m_description	tests/catch.hpp	/^        std::string m_description;$/;"	m	class:Catch::ParserRefImpl
m_exeName	tests/catch.hpp	/^        mutable ExeName m_exeName;$/;"	m	struct:Catch::Parser
m_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit m_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
m_hint	tests/catch.hpp	/^        std::string m_hint;$/;"	m	class:Catch::ParserRefImpl
m_index	tests/catch.hpp	/^        std::size_t m_index;$/;"	m	class:Catch::ReusableStringStream
m_name	tests/catch.hpp	/^            StringRef m_name;$/;"	m	struct:Catch::Detail::EnumInfo
m_name	tests/catch.hpp	/^        std::shared_ptr<std::string> m_name;$/;"	m	class:Catch::ExeName
m_optNames	tests/catch.hpp	/^        std::vector<std::string> m_optNames;$/;"	m	class:Catch::Opt
m_optionality	tests/catch.hpp	/^        Optionality m_optionality = Optionality::Optional;$/;"	m	class:Catch::ParserRefImpl
m_options	tests/catch.hpp	/^        std::vector<Opt> m_options;$/;"	m	struct:Catch::Parser
m_oss	tests/catch.hpp	/^        std::ostream* m_oss;$/;"	m	class:Catch::ReusableStringStream
m_ref	tests/catch.hpp	/^        std::shared_ptr<BoundRef> m_ref;$/;"	m	class:Catch::ParserRefImpl
m_ref	tests/catch.hpp	/^        std::shared_ptr<BoundValueRefBase> m_ref;$/;"	m	class:Catch::ExeName
m_size	tests/catch.hpp	/^            m_size( other.m_size )$/;"	f	class:Catch::StringRef
m_size	tests/catch.hpp	/^            m_size( size )$/;"	f	class:Catch::StringRef
m_size	tests/catch.hpp	/^            m_size( stdString.size() )$/;"	f	class:Catch::StringRef
m_size	tests/catch.hpp	/^        size_type m_size;$/;"	m	class:Catch::StringRef
m_start	tests/catch.hpp	/^        char const* m_start;$/;"	m	class:Catch::StringRef
m_testAsMethod	tests/catch.hpp	/^    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}$/;"	f	class:Catch::TestInvokerAsMethod
m_testAsMethod	tests/catch.hpp	/^    void (C::*m_testAsMethod)();$/;"	m	class:Catch::TestInvokerAsMethod
m_values	tests/catch.hpp	/^            std::vector<std::pair<int, std::string>> m_values;$/;"	m	struct:Catch::Detail::EnumInfo
macroName	tests/catch.hpp	/^        StringRef macroName;$/;"	m	struct:Catch::AssertionInfo
magenta	include/spdlog/fmt/bundled/color.h	/^  magenta = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	m	class:color
magenta	include/spdlog/fmt/bundled/color.h	/^  magenta,$/;"	m	class:color::terminal_color
magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink
main	bench/async_bench.cpp	/^int main(int argc, char *argv[])$/;"	f
main	bench/bench.cpp	/^int main(int argc, char *argv[])$/;"	f
main	bench/formatter-bench.cpp	/^int main(int argc, char *argv[])$/;"	f
main	bench/latency.cpp	/^int main(int argc, char *argv[])$/;"	f
main	example/example.cpp	/^int main(int, char *[])$/;"	f
make	include/spdlog/fmt/bundled/format.h	/^  static FMT_CONSTEXPR fill_t<Char> make() {$/;"	f	struct:internal::fill_t
make_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T& value) {$/;"	f	namespace:internal
make_arg	include/spdlog/fmt/bundled/core.h	/^inline basic_format_arg<Context> make_arg(const T& value) {$/;"	f	namespace:internal
make_arg	include/spdlog/fmt/bundled/core.h	/^inline value<Context> make_arg(const T& val) {$/;"	f	namespace:internal
make_arg_ref	include/spdlog/fmt/bundled/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(basic_string_view<Char> arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	include/spdlog/fmt/bundled/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(internal::auto_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	include/spdlog/fmt/bundled/chrono.h	/^    template <typename Id> FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(auto_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(basic_string_view<char_type> arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(int arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_checked	include/spdlog/fmt/bundled/format.h	/^template <typename T> checked_ptr<T> make_checked(T* p, std::size_t size) {$/;"	f	namespace:internal
make_checked	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline T* make_checked(T* p, std::size_t) { return p; }$/;"	f	namespace:internal
make_format_to_n_args	include/spdlog/fmt/bundled/format.h	/^make_format_to_n_args(const Args&... args) {$/;"	f
make_printf_args	include/spdlog/fmt/bundled/printf.h	/^inline format_arg_store<printf_context, Args...> make_printf_args($/;"	f
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^template <> struct make_unsigned_or_bool<bool> { using type = bool; };$/;"	s	namespace:internal
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^template <typename T> struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:internal
make_unsigned_or_unchanged	include/spdlog/fmt/bundled/chrono.h	/^struct make_unsigned_or_unchanged {$/;"	s	namespace:internal
make_unsigned_or_unchanged	include/spdlog/fmt/bundled/chrono.h	/^template <typename T> struct make_unsigned_or_unchanged<T, true> {$/;"	s	namespace:internal
make_wprintf_args	include/spdlog/fmt/bundled/printf.h	/^inline format_arg_store<wprintf_context, Args...> make_wprintf_args($/;"	f
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view<char_type> map(const T& val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR bool map(bool val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR char_type map(T val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const T& map(const T& val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const char* map(const signed char* val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const char* map(const unsigned char* val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const char_type* map(char_type* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const char_type* map(const char_type* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const named_arg_base<char_type>& map($/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const void* map(const void* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const void* map(std::nullptr_t val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const void* map(void* val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR double map(double val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR double map(float val) { return static_cast<double>(val); }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR int map(const T& val) {$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR int map(int val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR int map(short val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR int map(signed char val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR long double map(long double val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR long long map(long long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR long_type map(long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR ulong_type map(unsigned long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR unsigned long long map(unsigned long long val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned char val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned short val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR unsigned map(unsigned val) { return val; }$/;"	f	struct:internal::arg_mapper
map	include/spdlog/fmt/bundled/core.h	/^  template <typename T> FMT_CONSTEXPR int map(const T*) {$/;"	f	struct:internal::arg_mapper
map_	include/spdlog/fmt/bundled/core.h	/^  entry* map_;$/;"	m	class:internal::arg_map
map_	include/spdlog/fmt/bundled/core.h	/^  internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context
maroon	include/spdlog/fmt/bundled/color.h	/^  maroon = 0x800000,                   \/\/ rgb(128,0,0)$/;"	m	class:color
max_files_	include/spdlog/sinks/daily_file_sink.h	/^    uint16_t max_files_;$/;"	m	class:spdlog::sinks::final
max_files_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_files_;$/;"	m	class:spdlog::sinks::final
max_items_	include/spdlog/details/circular_q.h	/^    size_t max_items_ = 0;$/;"	m	class:spdlog::details::circular_q
max_packed_args	include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 15 };$/;"	e	enum:internal::__anon14
max_size	include/spdlog/fmt/bundled/core.h	/^  int max_size() const {$/;"	f
max_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_size_;$/;"	m	class:spdlog::sinks::final
max_skip_duration_	include/spdlog/sinks/dup_filter_sink.h	/^    std::chrono::microseconds max_skip_duration_;$/;"	m	class:spdlog::sinks::dup_filter_sink
medium_aquamarine	include/spdlog/fmt/bundled/color.h	/^  medium_aquamarine = 0x66CDAA,        \/\/ rgb(102,205,170)$/;"	m	class:color
medium_blue	include/spdlog/fmt/bundled/color.h	/^  medium_blue = 0x0000CD,              \/\/ rgb(0,0,205)$/;"	m	class:color
medium_orchid	include/spdlog/fmt/bundled/color.h	/^  medium_orchid = 0xBA55D3,            \/\/ rgb(186,85,211)$/;"	m	class:color
medium_purple	include/spdlog/fmt/bundled/color.h	/^  medium_purple = 0x9370DB,            \/\/ rgb(147,112,219)$/;"	m	class:color
medium_sea_green	include/spdlog/fmt/bundled/color.h	/^  medium_sea_green = 0x3CB371,         \/\/ rgb(60,179,113)$/;"	m	class:color
medium_slate_blue	include/spdlog/fmt/bundled/color.h	/^  medium_slate_blue = 0x7B68EE,        \/\/ rgb(123,104,238)$/;"	m	class:color
medium_spring_green	include/spdlog/fmt/bundled/color.h	/^  medium_spring_green = 0x00FA9A,      \/\/ rgb(0,250,154)$/;"	m	class:color
medium_turquoise	include/spdlog/fmt/bundled/color.h	/^  medium_turquoise = 0x48D1CC,         \/\/ rgb(72,209,204)$/;"	m	class:color
medium_violet_red	include/spdlog/fmt/bundled/color.h	/^  medium_violet_red = 0xC71585,        \/\/ rgb(199,21,133)$/;"	m	class:color
messages_	include/spdlog/details/backtracer.h	/^    circular_q<log_msg_buffer> messages_;$/;"	m	class:spdlog::details::backtracer
midnight_blue	include/spdlog/fmt/bundled/color.h	/^  midnight_blue = 0x191970,            \/\/ rgb(25,25,112)$/;"	m	class:color
millis_from	tests/test_mpmc_q.cpp	/^static milliseconds millis_from(const test_clock::time_point &tp0)$/;"	f	file:
mint_cream	include/spdlog/fmt/bundled/color.h	/^  mint_cream = 0xF5FFFA,               \/\/ rgb(245,255,250)$/;"	m	class:color
minus	include/spdlog/fmt/bundled/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
minute	include/spdlog/fmt/bundled/chrono.h	/^  Rep minute() const { return static_cast<Rep>(mod((s.count() \/ 60), 60)); }$/;"	f	struct:internal::chrono_formatter
misty_rose	include/spdlog/fmt/bundled/color.h	/^  misty_rose = 0xFFE4E1,               \/\/ rgb(255,228,225)$/;"	m	class:color
moccasin	include/spdlog/fmt/bundled/color.h	/^  moccasin = 0xFFE4B5,                 \/\/ rgb(255,228,181)$/;"	m	class:color
mod	include/spdlog/fmt/bundled/chrono.h	/^inline T mod(T x, int y) {$/;"	f	namespace:internal
monostate	include/spdlog/fmt/bundled/core.h	/^struct monostate {};$/;"	s
more	include/spdlog/fmt/bundled/format-inl.h	/^  more,  \/\/ Generate more digits.$/;"	e	enum:internal::digits::result
move	include/spdlog/fmt/bundled/format.h	/^  void move(basic_memory_buffer& other) {$/;"	f	class:basic_memory_buffer
move	include/spdlog/logger-inl.h	/^                                                               tracer_(std::move(other.tracer_))$/;"	f	namespace:spdlog
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^    explicit mpmc_blocking_queue(size_t max_items)$/;"	f	class:spdlog::details::mpmc_blocking_queue
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^class mpmc_blocking_queue$/;"	c	namespace:spdlog::details
mpmc_blocking_queue	src/async.cpp	/^template class spdlog::details::mpmc_blocking_queue<spdlog::details::async_msg>;/;"	m	class:spdlog::details	typeref:class:spdlog::details::	file:
msg_	include/spdlog/common.h	/^    std::string msg_;$/;"	m	class:spdlog::spdlog_ex
msg_counter	tests/test_sink.h	/^    size_t msg_counter()$/;"	f	class:spdlog::sinks::test_sink
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink() {}$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
multi_sink_example	example/example.cpp	/^void multi_sink_example()$/;"	f
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_mutex
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_nullmutex
mutex_	include/spdlog/details/backtracer.h	/^    mutable std::mutex mutex_;$/;"	m	class:spdlog::details::backtracer
mutex_	include/spdlog/details/periodic_worker.h	/^    std::mutex mutex_;$/;"	m	class:spdlog::details::periodic_worker
mutex_	include/spdlog/sinks/ansicolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::ansicolor_sink
mutex_	include/spdlog/sinks/base_sink.h	/^    Mutex mutex_;$/;"	m	class:spdlog::sinks::base_sink
mutex_	include/spdlog/sinks/stdout_sinks.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::stdout_sink_base
mutex_	include/spdlog/sinks/wincolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::wincolor_sink
my_type	example/example.cpp	/^struct my_type$/;"	s	file:
name	include/spdlog/fmt/bundled/core.h	/^    basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry
name	include/spdlog/fmt/bundled/format.h	/^    string_view_metadata name;$/;"	m	union:internal::arg_ref::value
name	include/spdlog/logger-inl.h	/^SPDLOG_INLINE const std::string &logger::name() const$/;"	f	class:spdlog::logger
name	tests/catch.hpp	/^    StringRef name;$/;"	m	struct:Catch::NameAndTags
name_	include/spdlog/logger.h	/^    std::string name_;$/;"	m	class:spdlog::logger
name_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit name_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::name_formatter
name_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class name_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
named_arg	include/spdlog/fmt/bundled/core.h	/^    const named_arg_base<char_type>* named_arg;$/;"	m	union:internal::value::__anon12
named_arg_id	include/spdlog/fmt/bundled/compile.h	/^    internal::string_view_metadata named_arg_id;$/;"	m	union:internal::format_part::value
named_arg_type	include/spdlog/fmt/bundled/core.h	/^  named_arg_type,$/;"	e	enum:internal::type
named_argument_id	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR named_argument_id(internal::string_view_metadata id)$/;"	f	struct:internal::format_part::named_argument_id
named_argument_id	include/spdlog/fmt/bundled/compile.h	/^  enum class kind { argument_id, named_argument_id, text, specification };$/;"	m	class:internal::format_part::kind
named_argument_id	include/spdlog/fmt/bundled/compile.h	/^  struct named_argument_id {$/;"	s	struct:internal::format_part
named_index	include/spdlog/fmt/bundled/compile.h	/^      internal::string_view_metadata named_index;$/;"	m	union:internal::format_part::argument_id::value
navajo_white	include/spdlog/fmt/bundled/color.h	/^  navajo_white = 0xFFDEAD,             \/\/ rgb(255,222,173)$/;"	m	class:color
navy	include/spdlog/fmt/bundled/color.h	/^  navy = 0x000080,                     \/\/ rgb(0,0,128)$/;"	m	class:color
newlocale	include/spdlog/fmt/bundled/posix.h	/^  static locale_t newlocale(int category_mask, const char* locale, locale_t) {$/;"	f	class:Locale
next_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR int next_arg_id() {$/;"	f	class:basic_parse_context
next_arg_id_	include/spdlog/fmt/bundled/core.h	/^  int next_arg_id_;$/;"	m	class:basic_parse_context
next_rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point next_rotation_tp_()$/;"	f	class:spdlog::sinks::final
noexcept	tests/catch.hpp	/^        SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        SourceLineInfo( SourceLineInfo&& )              noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        SourceLineInfo( char const* _file, std::size_t _line ) noexcept$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        StringRef( char const* rawChars ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	tests/catch.hpp	/^        bool empty() const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        bool operator < ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        bool operator == ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	tests/catch.hpp	/^        void swap( StringRef& other ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	tests/catch.hpp	/^    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;$/;"	m	struct:Catch::AutoReg
noexcept	tests/catch.hpp	/^    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;$/;"	m	struct:Catch::NameAndTags
none	include/spdlog/fmt/bundled/format.h	/^enum class arg_id_kind { none, index, name };$/;"	m	class:internal::arg_id_kind
none	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
none	include/spdlog/fmt/bundled/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
none_type	include/spdlog/fmt/bundled/core.h	/^  none_type,$/;"	e	enum:internal::type
normalize	include/spdlog/fmt/bundled/format-inl.h	/^  template <int SHIFT = 0> void normalize() {$/;"	f	class:internal::fp
now_tm	include/spdlog/sinks/daily_file_sink.h	/^    tm now_tm(log_clock::time_point tp)$/;"	f	class:spdlog::sinks::final
null	include/spdlog/fmt/bundled/format.h	/^template <typename T = void> struct null {};$/;"	s	namespace:internal
null_atomic_int	include/spdlog/details/null_mutex.h	/^    explicit null_atomic_int(int new_value)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	include/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_handler	include/spdlog/fmt/bundled/format.h	/^  struct null_handler : internal::error_handler {$/;"	s	class:dynamic_formatter
null_logger_mt	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
null_logger_st	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
null_mutex	include/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_scoped_padder	include/spdlog/details/pattern_formatter-inl.h	/^    null_scoped_padder(size_t \/*wrapped_size*\/, const padding_info & \/*padinfo*\/, memory_buf_t & \/*dest*\/) {}$/;"	f	struct:spdlog::details::null_scoped_padder
null_scoped_padder	include/spdlog/details/pattern_formatter-inl.h	/^struct null_scoped_padder$/;"	s	namespace:spdlog::details
null_sink	include/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
num_args	include/spdlog/fmt/bundled/core.h	/^  static const size_t num_args = sizeof...(Args);$/;"	m	class:format_arg_store
num_args	include/spdlog/fmt/bundled/format.h	/^  enum { num_args = sizeof...(Args) };$/;"	e	enum:internal::format_string_checker::__anon5
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::bin_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::dec_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:internal::basic_writer::int_writer::hex_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^    int num_digits;$/;"	m	struct:internal::basic_writer::pointer_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^  int num_digits;$/;"	m	struct:internal::gen_digits_params
num_parts	include/spdlog/fmt/bundled/compile.h	/^  unsigned num_parts = 0;$/;"	m	struct:internal::part_counter
num_writer	include/spdlog/fmt/bundled/format.h	/^    struct num_writer {$/;"	s	struct:internal::basic_writer::int_writer
number_of_format_parts	include/spdlog/fmt/bundled/compile.h	/^  static FMT_CONSTEXPR_DECL const unsigned number_of_format_parts =$/;"	m	class:internal::compiletime_prepared_parts_type_provider
number_of_format_parts	include/spdlog/fmt/bundled/compile.h	/^  static const unsigned number_of_format_parts = 0u;$/;"	m	class:internal::compiletime_prepared_parts_type_provider
numeric	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
numeric_specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR numeric_specs_checker(ErrorHandler& eh, internal::type arg_type)$/;"	f	class:internal::numeric_specs_checker
numeric_specs_checker	include/spdlog/fmt/bundled/format.h	/^template <typename ErrorHandler> class numeric_specs_checker {$/;"	c	namespace:internal
numeric_system	include/spdlog/fmt/bundled/chrono.h	/^enum class numeric_system {$/;"	c	namespace:internal
off	include/spdlog/common.h	/^    off = SPDLOG_LEVEL_OFF,$/;"	e	enum:spdlog::level::level_enum
offset_	include/spdlog/fmt/bundled/format.h	/^  std::size_t offset_;$/;"	m	struct:internal::string_view_metadata
old_lace	include/spdlog/fmt/bundled/color.h	/^  old_lace = 0xFDF5E6,                 \/\/ rgb(253,245,230)$/;"	m	class:color
olive	include/spdlog/fmt/bundled/color.h	/^  olive = 0x808000,                    \/\/ rgb(128,128,0)$/;"	m	class:color
olive_drab	include/spdlog/fmt/bundled/color.h	/^  olive_drab = 0x6B8E23,               \/\/ rgb(107,142,35)$/;"	m	class:color
on	include/spdlog/fmt/bundled/format.h	/^  template <unsigned N> char* on(uint32_t u) {$/;"	f	class:internal::decimal_formatter
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_abbr_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:internal::chrono_formatter
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_abbr_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_align	include/spdlog/fmt/bundled/chrono.h	/^    void on_align(align_t align) { f.specs.align = align; }$/;"	f	struct:formatter::spec_handler
on_align	include/spdlog/fmt/bundled/format.h	/^    void on_align(align_t) {}$/;"	f	struct:dynamic_formatter::null_handler
on_align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(align_t align) { specs_.align = align; }$/;"	f	class:internal::specs_setter
on_align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(align_t align) {$/;"	f	class:internal::specs_checker
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() {$/;"	f	struct:internal::chrono_formatter
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() {}$/;"	f	struct:internal::chrono_format_checker
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id() { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_preparation_handler
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char> id) {$/;"	f	class:internal::format_preparation_handler
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id(unsigned id) {$/;"	f	class:internal::format_preparation_handler
on_arg_id	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_arg_id(unsigned) { ++num_parts; }$/;"	f	struct:internal::part_counter
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) {$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(int id) {$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id() { get_arg(parse_context.next_arg_id()); }$/;"	f	struct:format_handler
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(basic_string_view<Char> id) { arg = context.arg(id); }$/;"	f	struct:format_handler
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(int id) {$/;"	f	struct:format_handler
on_bin	include/spdlog/fmt/bundled/format.h	/^    void on_bin() {$/;"	f	struct:internal::basic_writer::int_writer
on_bin	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_bin() {}$/;"	f	class:internal::int_type_checker
on_black	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_black = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_blue	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_char	include/spdlog/fmt/bundled/format.h	/^    void on_char() { formatter.write_char(value); }$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_char	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_char() {}$/;"	f	class:internal::char_specs_checker
on_cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_datetime(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec	include/spdlog/fmt/bundled/format.h	/^    void on_dec() {$/;"	f	struct:internal::basic_writer::int_writer
on_dec	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dec() {}$/;"	f	class:internal::int_type_checker
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_dec0_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_dec1_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_digit	include/spdlog/fmt/bundled/format-inl.h	/^  digits::result on_digit(char digit, uint64_t divisor, uint64_t remainder,$/;"	f	struct:internal::fixed_handler
on_digit	include/spdlog/fmt/bundled/format-inl.h	/^  digits::result on_digit(char digit, uint64_t divisor, uint64_t remainder,$/;"	f	struct:internal::grisu_shortest_handler
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_unit() { out = format_chrono_duration_unit<Period>(out); }$/;"	f	struct:internal::chrono_formatter
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_unit() {}$/;"	f	struct:internal::chrono_format_checker
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_value() {$/;"	f	struct:internal::chrono_formatter
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_value() {}$/;"	f	struct:internal::chrono_format_checker
on_dynamic_precision	include/spdlog/fmt/bundled/chrono.h	/^    template <typename Id> void on_dynamic_precision(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_precision	include/spdlog/fmt/bundled/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_precision	include/spdlog/fmt/bundled/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::specs_handler
on_dynamic_width	include/spdlog/fmt/bundled/chrono.h	/^    template <typename Id> void on_dynamic_width(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_width	include/spdlog/fmt/bundled/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_width	include/spdlog/fmt/bundled/format.h	/^  template <typename Id> FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::specs_handler
on_error	include/spdlog/fmt/bundled/chrono.h	/^    void on_error(const char* msg) { FMT_THROW(format_error(msg)); }$/;"	f	struct:formatter::spec_handler
on_error	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_error(const char*) {}$/;"	f	struct:internal::part_counter
on_error	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:basic_parse_context
on_error	include/spdlog/fmt/bundled/core.h	/^  void on_error(const char* message) { error_handler().on_error(message); }$/;"	f	class:basic_format_context
on_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char* message) {$/;"	f	class:internal::error_handler
on_error	include/spdlog/fmt/bundled/format.h	/^    FMT_NORETURN void on_error() {$/;"	f	struct:internal::basic_writer::int_writer
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::float_type_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::int_type_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:internal::dynamic_specs_handler
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:internal::format_string_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::id_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::precision_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	struct:internal::width_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_NORETURN void on_error() {$/;"	f	struct:float_spec_handler
on_error	include/spdlog/fmt/bundled/format.h	/^  void on_error(const char* message) { context_.on_error(message); }$/;"	f	class:internal::specs_handler
on_error	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:basic_printf_context
on_exp	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_exp() {}$/;"	f	class:internal::float_type_checker
on_exp	include/spdlog/fmt/bundled/format.h	/^  void on_exp() {$/;"	f	struct:float_spec_handler
on_fill	include/spdlog/fmt/bundled/chrono.h	/^    void on_fill(Char fill) { f.specs.fill[0] = fill; }$/;"	f	struct:formatter::spec_handler
on_fill	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fill(Char fill) { specs_.fill[0] = fill; }$/;"	f	class:internal::specs_setter
on_fixed	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fixed() {}$/;"	f	class:internal::float_type_checker
on_fixed	include/spdlog/fmt/bundled/format.h	/^  void on_fixed() {$/;"	f	struct:float_spec_handler
on_format_specs	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin,$/;"	f	class:internal::format_preparation_handler
on_format_specs	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin,$/;"	f	struct:internal::part_counter
on_format_specs	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR const Char* on_format_specs(const Char* begin, const Char*) {$/;"	f	class:internal::format_string_checker
on_format_specs	include/spdlog/fmt/bundled/format.h	/^  const Char* on_format_specs(const Char* begin, const Char* end) {$/;"	f	struct:format_handler
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_full_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_month() {}$/;"	f	struct:internal::chrono_formatter
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_full_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_general	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_general() {}$/;"	f	class:internal::float_type_checker
on_general	include/spdlog/fmt/bundled/format.h	/^  void on_general() {$/;"	f	struct:float_spec_handler
on_green	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_hash	include/spdlog/fmt/bundled/format.h	/^    void on_hash() {}$/;"	f	struct:dynamic_formatter::null_handler
on_hash	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() { specs_.alt = true; }$/;"	f	class:internal::specs_setter
on_hash	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() {$/;"	f	class:internal::specs_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^    void on_hex() {$/;"	f	struct:internal::basic_writer::int_writer
on_hex	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::float_type_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::int_type_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^  void on_hex() {$/;"	f	struct:float_spec_handler
on_int	include/spdlog/fmt/bundled/format.h	/^    void on_int() {$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_int	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_int() {$/;"	f	class:internal::char_specs_checker
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_iso_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:internal::chrono_formatter
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {$/;"	f	struct:internal::chrono_formatter
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {}$/;"	f	struct:internal::chrono_format_checker
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_loc_date(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_loc_time(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_minus	include/spdlog/fmt/bundled/format.h	/^    void on_minus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_minus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() { specs_.sign = sign::minus; }$/;"	f	class:internal::specs_setter
on_minus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() {$/;"	f	class:internal::specs_checker
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_num	include/spdlog/fmt/bundled/format.h	/^    void on_num() {$/;"	f	struct:internal::basic_writer::int_writer
on_num	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::float_type_checker
on_num	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::int_type_checker
on_num	include/spdlog/fmt/bundled/format.h	/^  void on_num() { use_locale = true; }$/;"	f	struct:float_spec_handler
on_oct	include/spdlog/fmt/bundled/format.h	/^    void on_oct() {$/;"	f	struct:internal::basic_writer::int_writer
on_oct	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_oct() {}$/;"	f	class:internal::int_type_checker
on_percent	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_percent() {}$/;"	f	class:internal::float_type_checker
on_percent	include/spdlog/fmt/bundled/format.h	/^  void on_percent() {$/;"	f	struct:float_spec_handler
on_plus	include/spdlog/fmt/bundled/format.h	/^    void on_plus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_plus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() { specs_.sign = sign::plus; }$/;"	f	class:internal::specs_setter
on_plus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() {$/;"	f	class:internal::specs_checker
on_pointer	include/spdlog/fmt/bundled/format.h	/^    void on_pointer() { formatter.write_pointer(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_pointer	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_pointer() {}$/;"	f	class:internal::cstring_type_checker
on_precision	include/spdlog/fmt/bundled/chrono.h	/^    void on_precision(unsigned precision) { f.precision = precision; }$/;"	f	struct:formatter::spec_handler
on_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_precision(int precision) {$/;"	f	class:internal::specs_setter
on_red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_replacement_field	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char* ptr) {$/;"	f	class:internal::format_preparation_handler
on_replacement_field	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char*) {}$/;"	f	struct:internal::part_counter
on_replacement_field	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char*) {}$/;"	f	class:internal::format_string_checker
on_replacement_field	include/spdlog/fmt/bundled/format.h	/^  void on_replacement_field(const Char* p) {$/;"	f	struct:format_handler
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_space	include/spdlog/fmt/bundled/format.h	/^    void on_space() {}$/;"	f	struct:dynamic_formatter::null_handler
on_space	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() { specs_.sign = sign::space; }$/;"	f	class:internal::specs_setter
on_space	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() {$/;"	f	class:internal::specs_checker
on_start	include/spdlog/fmt/bundled/format-inl.h	/^  digits::result on_start(uint64_t divisor, uint64_t remainder, uint64_t error,$/;"	f	struct:internal::fixed_handler
on_start	include/spdlog/fmt/bundled/format-inl.h	/^  digits::result on_start(uint64_t, uint64_t, uint64_t, int&) {$/;"	f	struct:internal::grisu_shortest_handler
on_string	include/spdlog/fmt/bundled/format.h	/^    void on_string() { formatter.write(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_string	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_string() {}$/;"	f	class:internal::cstring_type_checker
on_text	include/spdlog/fmt/bundled/chrono.h	/^  template <typename Char> void on_text(const Char*, const Char*) {}$/;"	f	struct:internal::chrono_format_checker
on_text	include/spdlog/fmt/bundled/chrono.h	/^  void on_text(const char_type* begin, const char_type* end) {$/;"	f	struct:internal::chrono_formatter
on_text	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	class:internal::format_preparation_handler
on_text	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	struct:internal::part_counter
on_text	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	class:internal::format_string_checker
on_text	include/spdlog/fmt/bundled/format.h	/^  void on_text(const Char* begin, const Char* end) {$/;"	f	struct:format_handler
on_type	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_type(Char type) {$/;"	f	class:internal::specs_setter
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_tz_name() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:internal::chrono_formatter
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_us_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_us_date() {}$/;"	f	struct:internal::chrono_formatter
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void on_utc_offset() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void on_utc_offset() {}$/;"	f	struct:internal::chrono_formatter
on_white	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_width	include/spdlog/fmt/bundled/chrono.h	/^    void on_width(unsigned width) { f.specs.width = width; }$/;"	f	struct:formatter::spec_handler
on_width	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_width(int width) { specs_.width = width; }$/;"	f	class:internal::specs_setter
on_yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_zero	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_checker
on_zero	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_setter
open	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::open(const filename_t &fname, bool truncate)$/;"	f	class:spdlog::details::file_helper
open_interval	include/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_tries	include/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
operator !=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator!=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator &	include/spdlog/fmt/bundled/color.h	/^  friend FMT_CONSTEXPR text_style operator&(text_style lhs,$/;"	f	class:color::emphasis::text_style
operator &=	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR text_style& operator&=(const text_style& rhs) {$/;"	f	class:color::emphasis::text_style
operator ()	include/spdlog/fmt/bundled/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::bin_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::dec_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::hex_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::int_writer::num_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) const { *it++ = value; }$/;"	f	struct:internal::arg_formatter_base::char_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::inf_or_nan_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::padded_int_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::pointer_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) const {$/;"	f	struct:internal::basic_writer::str_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) {$/;"	f	class:internal::basic_writer::grisu_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    template <typename It> void operator()(It&& it) {$/;"	f	struct:internal::basic_writer::double_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T value) {$/;"	f	class:internal::precision_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T value) {$/;"	f	class:internal::width_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T) {$/;"	f	class:internal::precision_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned long long operator()(T) {$/;"	f	class:internal::width_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_arg_id(); }$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_precision(auto_id()); }$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_width(auto_id()); }$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_arg_id(id); }$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_dynamic_precision(id); }$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(int id) { handler.on_dynamic_width(id); }$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  bool operator()(typename basic_format_arg<Context>::handle h) const {$/;"	f	class:internal::custom_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(bool value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(char_type value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const char_type* value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const void* value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(monostate) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:arg_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> operator()(Args&&... args) const {$/;"	f	class:internal::udl_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  template <typename T> bool operator()(T) const { return false; }$/;"	f	class:internal::custom_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  bool operator()(T value) {$/;"	f	class:internal::is_zero_int
operator ()	include/spdlog/fmt/bundled/printf.h	/^  bool operator()(T) {$/;"	f	class:internal::is_zero_int
operator ()	include/spdlog/fmt/bundled/printf.h	/^  int operator()(T value) {$/;"	f	class:internal::printf_precision_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^  int operator()(T) {$/;"	f	class:internal::printf_precision_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(T value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const char* value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const void* value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const wchar_t* value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(monostate value) { return base::operator()(value); }$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  unsigned operator()(T value) {$/;"	f	class:internal::printf_width_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^  unsigned operator()(T) {$/;"	f	class:internal::printf_width_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(T value) {$/;"	f	class:internal::char_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(T) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:internal::char_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(U value) {$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(U) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(bool value) {$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/ranges.h	/^    template <typename T> void operator()(const T& v) {$/;"	f	struct:formatter::format_each
operator *	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp operator*(fp x, fp y) {$/;"	f	namespace:internal
operator *	include/spdlog/fmt/bundled/format.h	/^  T& operator*() const { return blackhole_; }$/;"	f	class:internal::counting_iterator
operator *	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator*() { return *this; }$/;"	f	class:internal::truncating_iterator
operator *	include/spdlog/fmt/bundled/format.h	/^  value_type& operator*() const {$/;"	f	class:internal::truncating_iterator
operator +	tests/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator ++	include/spdlog/fmt/bundled/format.h	/^  counting_iterator operator++(int) {$/;"	f	class:internal::counting_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  counting_iterator& operator++() {$/;"	f	class:internal::counting_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator operator++(int) {$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++() { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++() {$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++(int) { return *this; }$/;"	f	class:internal::truncating_iterator
operator -	include/spdlog/fmt/bundled/format-inl.h	/^inline fp operator-(fp x, fp y) {$/;"	f	namespace:internal
operator <	include/spdlog/fmt/bundled/core.h	/^  friend bool operator<(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator <<	example/example.cpp	/^    friend OStream &operator<<(OStream &os, const my_type &c)$/;"	f	struct:my_type
operator <=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator<=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator =	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer &backtracer::operator=(backtracer other)$/;"	f	class:spdlog::details::backtracer
operator =	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer &log_msg_buffer::operator=(const log_msg_buffer &other)$/;"	f	class:spdlog::details::log_msg_buffer
operator =	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer &log_msg_buffer::operator=(log_msg_buffer &&other)$/;"	f	class:spdlog::details::log_msg_buffer
operator =	include/spdlog/details/thread_pool.h	/^    async_msg &operator=(async_msg &&other)$/;"	f	struct:spdlog::details::async_msg
operator =	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref& operator=(int idx) {$/;"	f	struct:internal::arg_ref
operator =	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer& operator=(basic_memory_buffer&& other) {$/;"	f	class:basic_memory_buffer
operator =	include/spdlog/fmt/bundled/format.h	/^  template <typename T> named_arg<T, Char> operator=(T&& value) const {$/;"	f	struct:internal::udl_arg
operator =	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator=(value_type val) {$/;"	f	class:internal::truncating_iterator
operator =	include/spdlog/fmt/bundled/posix.h	/^  buffered_file& operator=(buffered_file&& other) {$/;"	f	class:buffered_file
operator =	include/spdlog/fmt/bundled/posix.h	/^  file& operator=(file&& other) {$/;"	f	class:file
operator ==	include/spdlog/fmt/bundled/core.h	/^  friend bool operator==(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >	include/spdlog/fmt/bundled/core.h	/^  friend bool operator>(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator>=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator []	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value_type& operator[](unsigned ind) { return arr[ind]; }$/;"	f	struct:internal::compiletime_prepared_parts_type_provider::format_parts_array
operator []	include/spdlog/fmt/bundled/core.h	/^  T& operator[](std::size_t index) { return ptr_[index]; }$/;"	f	class:internal::buffer
operator []	include/spdlog/fmt/bundled/core.h	/^  const T& operator[](std::size_t index) const { return ptr_[index]; }$/;"	f	class:internal::buffer
operator []	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR Char& operator[](size_t index) { return data_[index]; }$/;"	f	struct:internal::fill_t
operator []	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR const Char& operator[](size_t index) const {$/;"	f	struct:internal::fill_t
operator bool	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer::operator bool() const$/;"	f	class:spdlog::details::backtracer
operator string_view	include/spdlog/fmt/bundled/format.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
operator wstring_view	include/spdlog/fmt/bundled/format.h	/^  operator wstring_view() const { return wstring_view(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
operator |	include/spdlog/fmt/bundled/color.h	/^  friend FMT_CONSTEXPR text_style operator|(text_style lhs,$/;"	f	class:color::emphasis::text_style
operator |=	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR text_style& operator|=(const text_style& rhs) {$/;"	f	class:color::emphasis::text_style
orange	include/spdlog/fmt/bundled/color.h	/^  orange = 0xFFA500,                   \/\/ rgb(255,165,0)$/;"	m	class:color
orange_red	include/spdlog/fmt/bundled/color.h	/^  orange_red = 0xFF4500,               \/\/ rgb(255,69,0)$/;"	m	class:color
orchid	include/spdlog/fmt/bundled/color.h	/^  orchid = 0xDA70D6,                   \/\/ rgb(218,112,214)$/;"	m	class:color
os	include/spdlog/details/os-inl.h	/^namespace os {$/;"	n	namespace:spdlog::details
os	include/spdlog/details/os.h	/^namespace os {$/;"	n	namespace:spdlog::details
ostream	tests/catch.hpp	/^    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;$/;"	m	class:Catch::std
ostream_	include/spdlog/sinks/ostream_sink.h	/^    std::ostream &ostream_;$/;"	m	class:spdlog::sinks::final
ostream_sink	include/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream &os, bool force_flush = false)$/;"	f	class:spdlog::sinks::final
other	include/spdlog/details/log_msg.h	/^    log_msg(const log_msg &other) = default;$/;"	m	struct:spdlog::details::log_msg
other	include/spdlog/details/pattern_formatter.h	/^    pattern_formatter &operator=(const pattern_formatter &other) = delete;$/;"	m	class:spdlog::final
other	include/spdlog/details/pattern_formatter.h	/^    pattern_formatter(const pattern_formatter &other) = delete;$/;"	m	class:spdlog::final
other	include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink &operator=(const ansicolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(const ansicolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink_base &operator=(const stdout_sink_base &other) = delete;$/;"	m	class:spdlog::sinks::stdout_sink_base
other	include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink_base(const stdout_sink_base &other) = delete;$/;"	m	class:spdlog::sinks::stdout_sink_base
other	include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink &operator=(const wincolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(const wincolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	tests/catch.hpp	/^        SourceLineInfo( SourceLineInfo const& other )            = default;$/;"	m	struct:Catch::SourceLineInfo
out	include/spdlog/fmt/bundled/chrono.h	/^  OutputIt out;$/;"	m	struct:internal::chrono_formatter
out	include/spdlog/fmt/bundled/core.h	/^  iterator out() { return out_; }$/;"	f	class:basic_format_context
out	include/spdlog/fmt/bundled/format.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result
out	include/spdlog/fmt/bundled/format.h	/^  iterator out() const { return out_; }$/;"	f	class:internal::basic_writer
out	include/spdlog/fmt/bundled/format.h	/^  iterator out() { return writer_.out(); }$/;"	f	class:internal::arg_formatter_base
out	include/spdlog/fmt/bundled/printf.h	/^  OutputIt out() { return out_; }$/;"	f	class:basic_printf_context
out	include/spdlog/fmt/bundled/ranges.h	/^        std::declval<FormatContext>().out())>::type out;$/;"	m	struct:formatter::format_each
out_	include/spdlog/fmt/bundled/core.h	/^  OutputIt out_;$/;"	m	class:basic_format_context
out_	include/spdlog/fmt/bundled/format.h	/^  OutputIt out_;$/;"	m	class:internal::truncating_iterator_base
out_	include/spdlog/fmt/bundled/format.h	/^  iterator out_;  \/\/ Output iterator.$/;"	m	class:internal::basic_writer
output_range	include/spdlog/fmt/bundled/format.h	/^  explicit output_range(OutputIt it) : it_(it) {}$/;"	f	class:internal::output_range
output_range	include/spdlog/fmt/bundled/format.h	/^class output_range {$/;"	c	namespace:internal
overflow_policy_	include/spdlog/async_logger.h	/^    async_overflow_policy overflow_policy_;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    std::shared_ptr<logger> clone(std::string new_name) override;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    void flush_() override;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    void sink_it_(const details::log_msg &msg) override;$/;"	m	class:spdlog::final
override	include/spdlog/common.h	/^    const char *what() const SPDLOG_NOEXCEPT override;$/;"	m	class:spdlog::spdlog_ex
override	include/spdlog/details/pattern_formatter.h	/^    std::unique_ptr<formatter> clone() const override;$/;"	m	class:spdlog::final
override	include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, memory_buf_t &dest) override;$/;"	m	class:spdlog::final
override	include/spdlog/sinks/ansicolor_sink.h	/^    void flush() override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	include/spdlog/sinks/ansicolor_sink.h	/^    void log(const details::log_msg &msg) override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	include/spdlog/sinks/ansicolor_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	include/spdlog/sinks/ansicolor_sink.h	/^    ~ansicolor_sink() override = default;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	include/spdlog/sinks/basic_file_sink.h	/^    void flush_() override;$/;"	m	class:spdlog::sinks::final
override	include/spdlog/sinks/basic_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override;$/;"	m	class:spdlog::sinks::final
override	include/spdlog/sinks/rotating_file_sink.h	/^    void flush_() override;$/;"	m	class:spdlog::sinks::final
override	include/spdlog/sinks/rotating_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override;$/;"	m	class:spdlog::sinks::final
override	include/spdlog/sinks/stdout_sinks.h	/^    void flush() override;$/;"	m	class:spdlog::sinks::stdout_sink_base
override	include/spdlog/sinks/stdout_sinks.h	/^    void log(const details::log_msg &msg) override;$/;"	m	class:spdlog::sinks::stdout_sink_base
override	include/spdlog/sinks/stdout_sinks.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override;$/;"	m	class:spdlog::sinks::stdout_sink_base
override	include/spdlog/sinks/stdout_sinks.h	/^    void set_pattern(const std::string &pattern) override;$/;"	m	class:spdlog::sinks::stdout_sink_base
override	include/spdlog/sinks/stdout_sinks.h	/^    ~stdout_sink_base() override = default;$/;"	m	class:spdlog::sinks::stdout_sink_base
override	include/spdlog/sinks/wincolor_sink.h	/^    void flush() final override;$/;"	m	class:spdlog::sinks::wincolor_sink
override	include/spdlog/sinks/wincolor_sink.h	/^    void log(const details::log_msg &msg) final override;$/;"	m	class:spdlog::sinks::wincolor_sink
override	include/spdlog/sinks/wincolor_sink.h	/^    ~wincolor_sink() override;$/;"	m	class:spdlog::sinks::wincolor_sink
overrun_counter	include/spdlog/details/circular_q.h	/^    size_t overrun_counter() const$/;"	f	class:spdlog::details::circular_q
overrun_counter	include/spdlog/details/mpmc_blocking_q.h	/^    size_t overrun_counter()$/;"	f	class:spdlog::details::mpmc_blocking_queue
overrun_counter	include/spdlog/details/thread_pool-inl.h	/^size_t SPDLOG_INLINE thread_pool::overrun_counter()$/;"	f	class:spdlog::details::thread_pool
overrun_counter_	include/spdlog/details/circular_q.h	/^    size_t overrun_counter_ = 0;$/;"	m	class:spdlog::details::circular_q
p_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit p_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
pad2	include/spdlog/details/fmt_helper.h	/^inline void pad2(int n, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad3	include/spdlog/details/fmt_helper.h	/^inline void pad3(T n, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad6	include/spdlog/details/fmt_helper.h	/^inline void pad6(T n, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad9	include/spdlog/details/fmt_helper.h	/^inline void pad9(T n, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad_it	include/spdlog/details/pattern_formatter-inl.h	/^    void pad_it(size_t count)$/;"	f	class:spdlog::details::scoped_padder
pad_side	include/spdlog/details/pattern_formatter.h	/^    enum pad_side$/;"	g	struct:spdlog::details::padding_info
pad_uint	include/spdlog/details/fmt_helper.h	/^inline void pad_uint(T n, unsigned int width, memory_buf_t &dest)$/;"	f	namespace:spdlog::details::fmt_helper
padded_int_writer	include/spdlog/fmt/bundled/format.h	/^  template <typename F> struct padded_int_writer {$/;"	s	class:internal::basic_writer
padding	include/spdlog/fmt/bundled/format.h	/^    std::size_t padding;$/;"	m	struct:internal::basic_writer::padded_int_writer
padding_info	include/spdlog/details/pattern_formatter.h	/^    padding_info(size_t width, padding_info::pad_side side)$/;"	f	struct:spdlog::details::padding_info
padding_info	include/spdlog/details/pattern_formatter.h	/^struct padding_info$/;"	s	namespace:spdlog::details
padinfo_	include/spdlog/details/pattern_formatter-inl.h	/^    const padding_info &padinfo_;$/;"	m	class:spdlog::details::scoped_padder
padinfo_	include/spdlog/details/pattern_formatter.h	/^    padding_info padinfo_;$/;"	m	class:spdlog::details::flag_formatter
pale_golden_rod	include/spdlog/fmt/bundled/color.h	/^  pale_golden_rod = 0xEEE8AA,          \/\/ rgb(238,232,170)$/;"	m	class:color
pale_green	include/spdlog/fmt/bundled/color.h	/^  pale_green = 0x98FB98,               \/\/ rgb(152,251,152)$/;"	m	class:color
pale_turquoise	include/spdlog/fmt/bundled/color.h	/^  pale_turquoise = 0xAFEEEE,           \/\/ rgb(175,238,238)$/;"	m	class:color
pale_violet_red	include/spdlog/fmt/bundled/color.h	/^  pale_violet_red = 0xDB7093,          \/\/ rgb(219,112,147)$/;"	m	class:color
papaya_whip	include/spdlog/fmt/bundled/color.h	/^  papaya_whip = 0xFFEFD5,              \/\/ rgb(255,239,213)$/;"	m	class:color
params_	include/spdlog/fmt/bundled/format.h	/^    internal::gen_digits_params params_;$/;"	m	class:internal::basic_writer::grisu_writer
parse_align	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char* parse_align(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_arg_id	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char* parse_arg_id(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_chrono_format	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,$/;"	f	namespace:internal
parse_context	include/spdlog/fmt/bundled/format.h	/^  basic_parse_context<Char> parse_context;$/;"	m	struct:format_handler
parse_context	include/spdlog/fmt/bundled/printf.h	/^  basic_parse_context<Char>& parse_context() { return parse_ctx_; }$/;"	f	class:basic_printf_context
parse_context_	include/spdlog/fmt/bundled/compile.h	/^  basic_parse_context<Char> parse_context_;$/;"	m	class:internal::format_preparation_handler
parse_context_	include/spdlog/fmt/bundled/format.h	/^  ParseContext& parse_context_;$/;"	m	class:internal::specs_handler
parse_ctx_	include/spdlog/fmt/bundled/format.h	/^  basic_parse_context<char_type>* parse_ctx_;$/;"	m	class:arg_formatter
parse_ctx_	include/spdlog/fmt/bundled/printf.h	/^  basic_parse_context<Char> parse_ctx_;$/;"	m	class:basic_printf_context
parse_flags	include/spdlog/fmt/bundled/printf.h	/^void basic_printf_context<OutputIt, Char>::parse_flags(format_specs& specs,$/;"	f	class:basic_printf_context
parse_format_specs	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char* parse_format_specs(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_format_specs	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const typename ParseContext::char_type* parse_format_specs($/;"	f	namespace:internal
parse_format_string	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void parse_format_string(basic_string_view<Char> format_str,$/;"	f	namespace:internal
parse_funcs_	include/spdlog/fmt/bundled/format.h	/^  parse_func parse_funcs_[num_args > 0 ? num_args : 1];$/;"	m	class:internal::format_string_checker
parse_header	include/spdlog/fmt/bundled/printf.h	/^unsigned basic_printf_context<OutputIt, Char>::parse_header($/;"	f	class:basic_printf_context
parse_nonnegative_int	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR int parse_nonnegative_int(const Char*& begin, const Char* end,$/;"	f	namespace:internal
parse_precision	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char* parse_precision(const Char* begin, const Char* end,$/;"	f	namespace:internal
parse_range	include/spdlog/fmt/bundled/chrono.h	/^  struct parse_range {$/;"	s	struct:formatter
parse_width	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char* parse_width(const Char* begin, const Char* end,$/;"	f	namespace:internal
parsed_specs	include/spdlog/fmt/bundled/compile.h	/^    internal::dynamic_format_specs<Char> parsed_specs;$/;"	m	struct:internal::format_part::specification
part_counter	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct part_counter {$/;"	s	namespace:internal
parts	include/spdlog/fmt/bundled/compile.h	/^  const PartsContainer& parts() const { return parts_; }$/;"	f	class:internal::runtime_parts_provider
parts	include/spdlog/fmt/bundled/compile.h	/^  const PartsContainer& parts() const {$/;"	f	struct:internal::compiletime_parts_provider
parts_	include/spdlog/fmt/bundled/compile.h	/^  Parts& parts_;$/;"	m	class:internal::compiletime_prepared_parts_collector
parts_	include/spdlog/fmt/bundled/compile.h	/^  PartsContainer parts_;$/;"	m	class:internal::runtime_parts_provider
parts_	include/spdlog/fmt/bundled/compile.h	/^  PartsContainer& parts_;$/;"	m	class:internal::format_preparation_handler
parts_provider_	include/spdlog/fmt/bundled/compile.h	/^  PreparedPartsProvider parts_provider_;$/;"	m	class:internal::prepared_format
pattern_	include/spdlog/details/pattern_formatter.h	/^    std::string pattern_;$/;"	m	class:spdlog::final
pattern_formatter	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE pattern_formatter::pattern_formatter(pattern_time_type time_type, std::string eol)$/;"	f	class:spdlog::pattern_formatter
pattern_formatter	include/spdlog/details/pattern_formatter-inl.h	/^SPDLOG_INLINE pattern_formatter::pattern_formatter(std::string pattern, pattern_time_type time_type, std::string eol)$/;"	f	class:spdlog::pattern_formatter
pattern_time_type	include/spdlog/common.h	/^enum class pattern_time_type$/;"	c	namespace:spdlog
pattern_time_type_	include/spdlog/details/pattern_formatter.h	/^    pattern_time_type pattern_time_type_;$/;"	m	class:spdlog::final
payload	include/spdlog/details/log_msg.h	/^    string_view_t payload;$/;"	m	struct:spdlog::details::log_msg
peach_puff	include/spdlog/fmt/bundled/color.h	/^  peach_puff = 0xFFDAB9,               \/\/ rgb(255,218,185)$/;"	m	class:color
performOptionalSelector	tests/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
periodic_flusher_	include/spdlog/details/registry.h	/^    std::unique_ptr<periodic_worker> periodic_flusher_;$/;"	m	class:spdlog::details::registry
periodic_worker	include/spdlog/details/periodic_worker-inl.h	/^SPDLOG_INLINE periodic_worker::periodic_worker(const std::function<void()> &callback_fun, std::chrono::seconds interval)$/;"	f	class:spdlog::details::periodic_worker
periodic_worker	include/spdlog/details/periodic_worker.h	/^class periodic_worker$/;"	c	namespace:spdlog::details
peru	include/spdlog/fmt/bundled/color.h	/^  peru = 0xCD853F,                     \/\/ rgb(205,133,63)$/;"	m	class:color
pid_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit pid_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
pink	include/spdlog/fmt/bundled/color.h	/^  pink = 0xFFC0CB,                     \/\/ rgb(255,192,203)$/;"	m	class:color
plum	include/spdlog/fmt/bundled/color.h	/^  plum = 0xDDA0DD,                     \/\/ rgb(221,160,221)$/;"	m	class:color
plus	include/spdlog/fmt/bundled/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
pointer	include/spdlog/fmt/bundled/core.h	/^    const void* pointer;$/;"	m	union:internal::value::__anon12
pointer_type	include/spdlog/fmt/bundled/core.h	/^  pointer_type,$/;"	e	enum:internal::type
pointer_writer	include/spdlog/fmt/bundled/format.h	/^  template <typename UIntPtr> struct pointer_writer {$/;"	s	class:internal::basic_writer
pop_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable pop_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
pop_front	include/spdlog/details/circular_q.h	/^    void pop_front()$/;"	f	class:spdlog::details::circular_q
post_async_msg_	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
post_flush	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::post_flush(async_logger_ptr &&worker_ptr, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
post_log	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::post_log(async_logger_ptr &&worker_ptr, const details::log_msg &msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
postfix	include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_range
postfix	include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_tuple
pow10_exponents	include/spdlog/fmt/bundled/format-inl.h	/^const int16_t basic_data<T>::pow10_exponents[] = {$/;"	m	class:internal::basic_data
pow10_exponents	include/spdlog/fmt/bundled/format.h	/^  static const int16_t pow10_exponents[];$/;"	m	struct:internal::basic_data
pow10_significands	include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::pow10_significands[] = {$/;"	m	class:internal::basic_data
pow10_significands	include/spdlog/fmt/bundled/format.h	/^  static const uint64_t pow10_significands[];$/;"	m	struct:internal::basic_data
powder_blue	include/spdlog/fmt/bundled/color.h	/^  powder_blue = 0xB0E0E6,              \/\/ rgb(176,224,230)$/;"	m	class:color
powers_of_10_64	include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::powers_of_10_64[] = {$/;"	m	class:internal::basic_data
powers_of_10_64	include/spdlog/fmt/bundled/format.h	/^  static const uint64_t powers_of_10_64[];$/;"	m	struct:internal::basic_data
precision	include/spdlog/fmt/bundled/chrono.h	/^  int precision;$/;"	m	struct:formatter
precision	include/spdlog/fmt/bundled/chrono.h	/^  int precision;$/;"	m	struct:internal::chrono_formatter
precision	include/spdlog/fmt/bundled/format-inl.h	/^  int precision;$/;"	m	struct:internal::fixed_handler
precision	include/spdlog/fmt/bundled/format.h	/^  int precision;$/;"	m	struct:basic_format_specs
precision	include/spdlog/fmt/bundled/format.h	/^  int precision;$/;"	m	struct:internal::sprintf_specs
precision	tests/catch.hpp	/^        static int precision;$/;"	m	struct:Catch::StringMaker
precision_adapter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_adapter(SpecHandler& h) : handler(h) {}$/;"	f	struct:internal::precision_adapter
precision_adapter	include/spdlog/fmt/bundled/format.h	/^template <typename SpecHandler, typename Char> struct precision_adapter {$/;"	s	namespace:internal
precision_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_checker(ErrorHandler& eh) : handler_(eh) {}$/;"	f	class:internal::precision_checker
precision_checker	include/spdlog/fmt/bundled/format.h	/^template <typename ErrorHandler> class precision_checker {$/;"	c	namespace:internal
precision_ref	include/spdlog/fmt/bundled/chrono.h	/^  arg_ref_type precision_ref;$/;"	m	struct:formatter
precision_ref	include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:internal::dynamic_format_specs
prefix	include/spdlog/fmt/bundled/format.h	/^    char prefix[4];$/;"	m	struct:internal::basic_writer::int_writer
prefix	include/spdlog/fmt/bundled/format.h	/^    string_view prefix;$/;"	m	struct:internal::basic_writer::padded_int_writer
prefix	include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_range
prefix	include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_tuple
prefix_size	include/spdlog/fmt/bundled/format.h	/^    unsigned prefix_size;$/;"	m	struct:internal::basic_writer::int_writer
prepare_compiletime_parts	include/spdlog/fmt/bundled/compile.h	/^prepare_compiletime_parts(basic_string_view<Char> format) {$/;"	f	namespace:internal
prepare_logdir	bench/latency.cpp	/^void prepare_logdir()$/;"	f
prepare_logdir	tests/utils.cpp	/^void prepare_logdir()$/;"	f
prepare_parts	include/spdlog/fmt/bundled/compile.h	/^FMT_CONSTEXPR PartsContainer prepare_parts(basic_string_view<Char> format) {$/;"	f	namespace:internal
prepared_format	include/spdlog/fmt/bundled/compile.h	/^  constexpr prepared_format(Format f)$/;"	f	class:internal::prepared_format
prepared_format	include/spdlog/fmt/bundled/compile.h	/^class prepared_format {$/;"	c	namespace:internal
prevent_child_fd	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os
print	include/spdlog/fmt/bundled/color.h	/^void print(const text_style& ts, const S& format_str, const Args&... args) {$/;"	f	class:color::emphasis
print	include/spdlog/fmt/bundled/color.h	/^void print(std::FILE* f, const text_style& ts, const S& format_str,$/;"	f	class:color::emphasis
print	include/spdlog/fmt/bundled/ostream.h	/^void print(std::basic_ostream<Char>& os, const S& format_str, Args&&... args) {$/;"	f
print	include/spdlog/fmt/bundled/posix.h	/^  inline void print(string_view format_str, const Args&... args) {$/;"	f	class:buffered_file
print_ccode_	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::print_ccode_(const string_view_t &color_code)$/;"	f	class:spdlog::sinks::ansicolor_sink
print_range_	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::print_range_(const memory_buf_t &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::ansicolor_sink
print_range_	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::print_range_(const memory_buf_t &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::wincolor_sink
printf	include/spdlog/fmt/bundled/printf.h	/^inline int printf(const S& format_str, const Args&... args) {$/;"	f
printf	include/spdlog/fmt/bundled/printf.h	/^internal::truncating_iterator<OutputIt> printf($/;"	f	namespace:internal
printf	include/spdlog/fmt/bundled/printf.h	/^void printf(buffer<Char>& buf, basic_string_view<Char> format,$/;"	f	namespace:internal
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^  printf_arg_formatter(iterator iter, format_specs& specs, context_type& ctx)$/;"	f	class:printf_arg_formatter
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^class printf_arg_formatter : public internal::arg_formatter_base<Range> {$/;"	c
printf_formatter	include/spdlog/fmt/bundled/printf.h	/^template <typename T> struct printf_formatter {$/;"	s
printf_precision_handler	include/spdlog/fmt/bundled/printf.h	/^class printf_precision_handler {$/;"	c	namespace:internal
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^  explicit printf_width_handler(format_specs& specs) : specs_(specs) {}$/;"	f	class:internal::printf_width_handler
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^template <typename Char> class printf_width_handler {$/;"	c	namespace:internal
process_next_msg_	include/spdlog/details/thread_pool-inl.h	/^bool SPDLOG_INLINE thread_pool::process_next_msg_()$/;"	f	class:spdlog::details::thread_pool
ptr	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline const void* ptr(const T* p) { return p; }$/;"	f
ptr	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline const void* ptr(const std::shared_ptr<T>& p) {$/;"	f
ptr	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline const void* ptr(const std::unique_ptr<T>& p) {$/;"	f
ptr_	include/spdlog/fmt/bundled/core.h	/^  T* ptr_;$/;"	m	class:internal::buffer
purple	include/spdlog/fmt/bundled/color.h	/^  purple = 0x800080,                   \/\/ rgb(128,0,128)$/;"	m	class:color
push_back	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::push_back(const log_msg &msg)$/;"	f	class:spdlog::details::backtracer
push_back	include/spdlog/details/circular_q.h	/^    void push_back(T &&item)$/;"	f	class:spdlog::details::circular_q
push_back	include/spdlog/fmt/bundled/compile.h	/^  FMT_CONSTEXPR void push_back(format_part part) { parts_[counter_++] = part; }$/;"	f	class:internal::compiletime_prepared_parts_collector
push_back	include/spdlog/fmt/bundled/core.h	/^  void push_back(const T& value) {$/;"	f	class:internal::buffer
push_back	include/spdlog/fmt/bundled/core.h	/^  void push_back(value<Context> val) {$/;"	f	class:internal::arg_map
push_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable push_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
put_delimiters	include/spdlog/fmt/bin_to_hex.h	/^    bool put_delimiters = true;$/;"	m	struct:fmt::formatter
put_newline	include/spdlog/fmt/bin_to_hex.h	/^    std::size_t put_newline(It inserter, std::size_t pos)$/;"	f	struct:fmt::formatter
put_newlines	include/spdlog/fmt/bin_to_hex.h	/^    bool put_newlines = true;$/;"	m	struct:fmt::formatter
put_positions	include/spdlog/fmt/bin_to_hex.h	/^    bool put_positions = true; \/\/ position on start of each line$/;"	m	struct:fmt::formatter
q_	include/spdlog/details/mpmc_blocking_q.h	/^    spdlog::details::circular_q<T> q_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
q_	include/spdlog/details/thread_pool.h	/^    q_type q_;$/;"	m	class:spdlog::details::thread_pool
queue_mutex_	include/spdlog/details/mpmc_blocking_q.h	/^    std::mutex queue_mutex_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
r	include/spdlog/fmt/bundled/color.h	/^  uint8_t r;$/;"	m	struct:color::emphasis::rgb
r_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit r_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
rangeToString	tests/catch.hpp	/^        std::string rangeToString(InputIterator first, InputIterator last) {$/;"	f	namespace:Catch::Detail
range_length_limit	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range
rawMemoryToString	tests/catch.hpp	/^        std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
rebecca_purple	include/spdlog/fmt/bundled/color.h	/^  rebecca_purple = 0x663399,           \/\/ rgb(102,51,153)$/;"	m	class:color
red	include/spdlog/fmt/bundled/color.h	/^  red = 0xFF0000,                      \/\/ rgb(255,0,0)$/;"	m	class:color
red	include/spdlog/fmt/bundled/color.h	/^  red,$/;"	m	class:color::terminal_color
red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t red = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink
red_bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t red_bold = "\\033[31m\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reg	scripts/extract_version.py	/^reg       = re.compile(r'^\\s*#define\\s+SPDLOG_VER_([A-Z]+)\\s+([0-9]+).*$')$/;"	v
registerEnum	tests/catch.hpp	/^        Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {$/;"	f	class:Catch::IMutableEnumValuesRegistry::Detail
register_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::register_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
register_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void register_logger(std::shared_ptr<logger> logger)$/;"	f	namespace:spdlog
register_logger_	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::register_logger_(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
registry	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE registry::registry()$/;"	f	class:spdlog::details::registry
registry	include/spdlog/details/registry.h	/^class registry$/;"	c	namespace:spdlog::details
remove_prefix	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) {$/;"	f	class:basic_string_view
remove_sink	include/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
rename_file	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE bool rotating_file_sink<Mutex>::rename_file(const filename_t &src_filename, const filename_t &target_filename)$/;"	f	class:spdlog::sinks::rotating_file_sink
reopen	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
report_no_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void report_no_date() { FMT_THROW(format_error("no date")); }$/;"	f	struct:internal::chrono_format_checker
require_numeric_argument	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void require_numeric_argument() {$/;"	f	class:internal::numeric_specs_checker
reserve	include/spdlog/fmt/bundled/core.h	/^  void reserve(std::size_t new_capacity) {$/;"	f	class:internal::buffer
reserve	include/spdlog/fmt/bundled/format.h	/^  auto reserve(std::size_t n) -> decltype(internal::reserve(out_, n)) {$/;"	f	class:internal::basic_writer
reserve	include/spdlog/fmt/bundled/format.h	/^inline Iterator& reserve(Iterator& it, std::size_t) {$/;"	f	namespace:internal
reserve	include/spdlog/fmt/bundled/format.h	/^inline checked_ptr<typename Container::value_type> reserve($/;"	f	namespace:internal
reset	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t reset = "\\033[m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reset_color	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const char basic_data<T>::reset_color[] = "\\x1b[0m";$/;"	m	class:internal::basic_data
reset_color	include/spdlog/fmt/bundled/format.h	/^  static const char reset_color[5];$/;"	m	struct:internal::basic_data
resize	include/spdlog/fmt/bundled/core.h	/^  void resize(std::size_t new_size) {$/;"	f	class:internal::buffer
result	include/spdlog/fmt/bundled/format-inl.h	/^enum result {$/;"	g	namespace:internal::digits
resultDisposition	tests/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
reverse	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb() : r(0), g(0), b(0) {}$/;"	f	struct:color::emphasis::rgb
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(color hex)$/;"	f	struct:color::emphasis::rgb
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(uint32_t hex)$/;"	f	struct:color::emphasis::rgb
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(uint8_t r_, uint8_t g_, uint8_t b_) : r(r_), g(g_), b(b_) {}$/;"	f	struct:color::emphasis::rgb
rgb	include/spdlog/fmt/bundled/color.h	/^struct rgb {$/;"	s	class:color::emphasis
rgb_color	include/spdlog/fmt/bundled/color.h	/^    uint32_t rgb_color;$/;"	m	union:color::emphasis::internal::color_type::color_union
right	include/spdlog/details/pattern_formatter.h	/^        right,$/;"	e	enum:spdlog::details::padding_info::pad_side
right	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	e	enum:align::type
rosy_brown	include/spdlog/fmt/bundled/color.h	/^  rosy_brown = 0xBC8F8F,               \/\/ rgb(188,143,143)$/;"	m	class:color
rotate_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::rotate_()$/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_example	example/example.cpp	/^void rotating_example()$/;"	f
rotating_file_sink	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE rotating_file_sink<Mutex>::rotating_file_sink($/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_file_sink	src/file_sinks.cpp	/^template class spdlog::sinks::rotating_file_sink<spdlog::details::null_mutex>;/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
rotating_file_sink	src/file_sinks.cpp	/^template class spdlog::sinks::rotating_file_sink<std::mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
rotating_files	bench/bench.cpp	/^static size_t rotating_files = 5;$/;"	v	file:
rotating_logger_mt	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_mt($/;"	f	namespace:spdlog
rotating_logger_st	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_st($/;"	f	namespace:spdlog
rotation_h_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_h_;$/;"	m	class:spdlog::sinks::final
rotation_m_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_m_;$/;"	m	class:spdlog::sinks::final
rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::final
round	include/spdlog/fmt/bundled/format-inl.h	/^  void round(uint64_t d, uint64_t divisor, uint64_t& remainder,$/;"	f	struct:internal::grisu_shortest_handler
round_direction	include/spdlog/fmt/bundled/format-inl.h	/^enum round_direction { unknown, up, down };$/;"	g	namespace:internal
royal_blue	include/spdlog/fmt/bundled/color.h	/^  royal_blue = 0x4169E1,               \/\/ rgb(65,105,225)$/;"	m	class:color
runtime_parts_provider	include/spdlog/fmt/bundled/compile.h	/^  runtime_parts_provider(basic_string_view<Char> format)$/;"	f	class:internal::runtime_parts_provider
runtime_parts_provider	include/spdlog/fmt/bundled/compile.h	/^template <typename PartsContainer> class runtime_parts_provider {$/;"	c	namespace:internal
s	include/spdlog/fmt/bundled/format.h	/^    const Char* s;$/;"	m	struct:internal::basic_writer::str_writer
s_empty	tests/catch.hpp	/^        static constexpr char const* const s_empty = "";$/;"	m	class:Catch::StringRef
saddle_brown	include/spdlog/fmt/bundled/color.h	/^  saddle_brown = 0x8B4513,             \/\/ rgb(139,69,19)$/;"	m	class:color
safe_duration_cast	include/spdlog/fmt/bundled/safe-duration-cast.h	/^To safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from,$/;"	f	namespace:safe_duration_cast
safe_duration_cast	include/spdlog/fmt/bundled/safe-duration-cast.h	/^namespace safe_duration_cast {$/;"	n
safe_float_conversion	include/spdlog/fmt/bundled/safe-duration-cast.h	/^FMT_CONSTEXPR To safe_float_conversion(const From from, int& ec) {$/;"	f	namespace:safe_duration_cast
salmon	include/spdlog/fmt/bundled/color.h	/^  salmon = 0xFA8072,                   \/\/ rgb(250,128,114)$/;"	m	class:color
sandy_brown	include/spdlog/fmt/bundled/color.h	/^  sandy_brown = 0xF4A460,              \/\/ rgb(244,164,96)$/;"	m	class:color
scoped_padder	include/spdlog/details/pattern_formatter-inl.h	/^    scoped_padder(size_t wrapped_size, const padding_info &padinfo, memory_buf_t &dest)$/;"	f	class:spdlog::details::scoped_padder
scoped_padder	include/spdlog/details/pattern_formatter-inl.h	/^class scoped_padder$/;"	c	namespace:spdlog::details
sea_green	include/spdlog/fmt/bundled/color.h	/^  sea_green = 0x2E8B57,                \/\/ rgb(46,139,87)$/;"	m	class:color
sea_shell	include/spdlog/fmt/bundled/color.h	/^  sea_shell = 0xFFF5EE,                \/\/ rgb(255,245,238)$/;"	m	class:color
second	include/spdlog/fmt/bundled/chrono.h	/^  Rep second() const { return static_cast<Rep>(mod(s.count(), 60)); }$/;"	f	struct:internal::chrono_formatter
self	include/spdlog/fmt/bundled/format.h	/^      int_writer& self;$/;"	m	struct:internal::basic_writer::int_writer::hex_writer
sentinel	include/spdlog/fmt/bundled/format.h	/^  struct sentinel {};$/;"	s	class:internal::output_range
sep	include/spdlog/fmt/bundled/format.h	/^      char_type sep;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
sep	include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:arg_join
sep_size	include/spdlog/fmt/bundled/format.h	/^    enum { sep_size = 1 };$/;"	e	enum:internal::basic_writer::int_writer::__anon3
set_automatic_registration	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_automatic_registration(bool automatic_regsistration)$/;"	f	class:spdlog::details::registry
set_automatic_registration	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_automatic_registration(bool automatic_registation)$/;"	f	namespace:spdlog
set_background_color	include/spdlog/fmt/bundled/color.h	/^  bool set_background_color;$/;"	m	class:color::emphasis::text_style
set_color	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_color(level::level_enum color_level, string_view_t color)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_color	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink
set_color_mode	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_color_mode(color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_color_mode	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color_mode(color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_sink
set_default_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_default_logger(std::shared_ptr<logger> new_default_logger)$/;"	f	class:spdlog::details::registry
set_default_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_default_logger(std::shared_ptr<spdlog::logger> default_logger)$/;"	f	namespace:spdlog
set_delay	tests/test_sink.h	/^    void set_delay(std::chrono::milliseconds delay)$/;"	f	class:spdlog::sinks::test_sink
set_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void set_dynamic_spec(T& value, FormatArg arg, ErrorHandler eh) {$/;"	f	namespace:internal
set_error_handler	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_error_handler(void (*handler)(const std::string &msg))$/;"	f	class:spdlog::details::registry
set_error_handler	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_error_handler(err_handler handler)$/;"	f	class:spdlog::logger
set_error_handler	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_error_handler(void (*handler)(const std::string &msg))$/;"	f	namespace:spdlog
set_foreground_color	include/spdlog/fmt/bundled/color.h	/^  bool set_foreground_color;$/;"	m	class:color::emphasis::text_style
set_foreground_color_	include/spdlog/sinks/wincolor_sink-inl.h	/^WORD SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_foreground_color_(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink
set_formatter	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_formatter(std::unique_ptr<formatter> formatter)$/;"	f	class:spdlog::details::registry
set_formatter	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_formatter(std::unique_ptr<formatter> f)$/;"	f	class:spdlog::logger
set_formatter	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_formatter	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::base_sink
set_formatter	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::stdout_sink_base
set_formatter	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::wincolor_sink
set_formatter	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_formatter(std::unique_ptr<spdlog::formatter> formatter)$/;"	f	namespace:spdlog
set_formatter_	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::base_sink
set_level	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry
set_level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_level(level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE void spdlog::sinks::sink::set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink
set_level	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_level(level::level_enum log_level)$/;"	f	namespace:spdlog
set_pattern	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_pattern(std::string pattern, pattern_time_type time_type)$/;"	f	class:spdlog::logger
set_pattern	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_pattern(const std::string &pattern)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_pattern	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_pattern(const std::string &pattern)$/;"	f	class:spdlog::sinks::base_sink
set_pattern	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::set_pattern(const std::string &pattern)$/;"	f	class:spdlog::sinks::stdout_sink_base
set_pattern	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_pattern(const std::string &pattern)$/;"	f	class:spdlog::sinks::wincolor_sink
set_pattern	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_pattern(std::string pattern, pattern_time_type time_type)$/;"	f	namespace:spdlog
set_pattern_	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_pattern_(const std::string &pattern)$/;"	f	class:spdlog::sinks::base_sink
set_sinks	include/spdlog/sinks/dist_sink.h	/^    void set_sinks(std::vector<std::shared_ptr<sink>> sinks)$/;"	f	class:spdlog::sinks::dist_sink
set_tp	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_tp(std::shared_ptr<thread_pool> tp)$/;"	f	class:spdlog::details::registry
short_filename_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit short_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
short_level_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit short_level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::short_level_formatter
short_level_formatter	include/spdlog/details/pattern_formatter-inl.h	/^class short_level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
should_color	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE bool ansicolor_sink<ConsoleMutex>::should_color()$/;"	f	class:spdlog::sinks::ansicolor_sink
should_do_colors_	include/spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
should_do_colors_	include/spdlog/sinks/wincolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::wincolor_sink
should_flush_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE bool logger::should_flush_(const details::log_msg &msg)$/;"	f	class:spdlog::logger
should_log	include/spdlog/logger-inl.h	/^SPDLOG_INLINE bool logger::should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE bool spdlog::sinks::sink::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink
shutdown	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::shutdown()$/;"	f	class:spdlog::details::registry
shutdown	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void shutdown()$/;"	f	namespace:spdlog
side_	include/spdlog/details/pattern_formatter.h	/^    const pad_side side_ = left;$/;"	m	struct:spdlog::details::padding_info
sienna	include/spdlog/fmt/bundled/color.h	/^  sienna = 0xA0522D,                   \/\/ rgb(160,82,45)$/;"	m	class:color
sign	include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:internal::basic_writer::double_writer
sign	include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:internal::basic_writer::inf_or_nan_writer
sign	include/spdlog/fmt/bundled/format.h	/^  sign_t sign : 3;$/;"	m	struct:basic_format_specs
sign	include/spdlog/fmt/bundled/format.h	/^namespace sign {$/;"	n
sign_	include/spdlog/fmt/bundled/format.h	/^    char sign_;$/;"	m	class:internal::basic_writer::grisu_writer
significand_size	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int significand_size =$/;"	m	class:internal::fp
silver	include/spdlog/fmt/bundled/color.h	/^  silver = 0xC0C0C0,                   \/\/ rgb(192,192,192)$/;"	m	class:color
sink	include/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_it_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::sink_it_(const details::log_msg &msg)$/;"	f	class:spdlog::async_logger
sink_it_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::sink_it_(const details::log_msg &msg)$/;"	f	class:spdlog::logger
sink_it_	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE void basic_file_sink<Mutex>::sink_it_(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::basic_file_sink
sink_it_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::sink_it_(const details::log_msg &msg)$/;"	f	class:spdlog::sinks::rotating_file_sink
sinks	include/spdlog/common.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/logger-inl.h	/^SPDLOG_INLINE const std::vector<sink_ptr> &logger::sinks() const$/;"	f	class:spdlog::logger
sinks	include/spdlog/logger-inl.h	/^SPDLOG_INLINE std::vector<sink_ptr> &logger::sinks()$/;"	f	class:spdlog::logger
sinks	include/spdlog/sinks/android_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ansicolor_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ansicolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/base_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/basic_file_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/basic_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/daily_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> &sinks()$/;"	f	class:spdlog::sinks::dist_sink
sinks	include/spdlog/sinks/dist_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/dup_filter_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/msvc_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/null_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ostream_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/rotating_file_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/rotating_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_color_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_sinks-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/syslog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/systemd_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/wincolor_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/wincolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	tests/test_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks_	include/spdlog/logger.h	/^    std::vector<sink_ptr> sinks_;$/;"	m	class:spdlog::logger
sinks_	include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> sinks_;$/;"	m	class:spdlog::sinks::dist_sink
size	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE size_t file_helper::size() const$/;"	f	class:spdlog::details::file_helper
size	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR size_t size() const { return size_; }$/;"	f	class:basic_string_view
size	include/spdlog/fmt/bundled/core.h	/^  std::size_t size;$/;"	m	struct:internal::string_value
size	include/spdlog/fmt/bundled/format-inl.h	/^  int size;$/;"	m	struct:internal::fixed_handler
size	include/spdlog/fmt/bundled/format-inl.h	/^  int size;$/;"	m	struct:internal::grisu_shortest_handler
size	include/spdlog/fmt/bundled/format.h	/^      int size;$/;"	m	struct:internal::basic_writer::int_writer::num_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return buffer.size() + (sign ? 1 : 0); }$/;"	f	struct:internal::basic_writer::double_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return size_ + (sign_ ? 1 : 0); }$/;"	f	class:internal::basic_writer::grisu_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:internal::basic_writer::padded_int_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:internal::basic_writer::str_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return to_unsigned(num_digits) + 2; }$/;"	f	struct:internal::basic_writer::pointer_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const {$/;"	f	struct:internal::basic_writer::inf_or_nan_writer
size	include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf16_to_utf8
size	include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf8_to_utf16
size	include/spdlog/fmt/bundled/format.h	/^  std::size_t size() const {$/;"	f	class:format_int
size	include/spdlog/fmt/bundled/format.h	/^  std::size_t size;$/;"	m	struct:format_to_n_result
size_	include/spdlog/fmt/bundled/core.h	/^                                                      size_(s.size()) {}$/;"	f	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^                     size_(s.size()) {}$/;"	f	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^        size_(count) {}$/;"	f	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^  size_t size_;$/;"	m	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^  std::size_t size_;$/;"	m	class:internal::buffer
size_	include/spdlog/fmt/bundled/core.h	/^  unsigned size_;$/;"	m	class:internal::arg_map
size_	include/spdlog/fmt/bundled/format.h	/^    size_t size_;$/;"	m	class:internal::basic_writer::grisu_writer
size_	include/spdlog/fmt/bundled/format.h	/^    size_t size_;$/;"	m	struct:internal::basic_writer::padded_int_writer
size_	include/spdlog/fmt/bundled/format.h	/^    size_t size_;$/;"	m	struct:internal::basic_writer::str_writer
size_	include/spdlog/fmt/bundled/format.h	/^  std::size_t size_;$/;"	m	struct:internal::string_view_metadata
skip_counter_	include/spdlog/sinks/dup_filter_sink.h	/^    size_t skip_counter_ = 0;$/;"	m	class:spdlog::sinks::dup_filter_sink
sky_blue	include/spdlog/fmt/bundled/color.h	/^  sky_blue = 0x87CEEB,                 \/\/ rgb(135,206,235)$/;"	m	class:color
slate_blue	include/spdlog/fmt/bundled/color.h	/^  slate_blue = 0x6A5ACD,               \/\/ rgb(106,90,205)$/;"	m	class:color
slate_gray	include/spdlog/fmt/bundled/color.h	/^  slate_gray = 0x708090,               \/\/ rgb(112,128,144)$/;"	m	class:color
snow	include/spdlog/fmt/bundled/color.h	/^  snow = 0xFFFAFA,                     \/\/ rgb(255,250,250)$/;"	m	class:color
source	include/spdlog/details/log_msg.h	/^    source_loc source;$/;"	m	struct:spdlog::details::log_msg
source_filename_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit source_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_funcname_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit source_funcname_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_linenum_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit source_linenum_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_loc	include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc(const char *filename_in, int line_in, const char *funcname_in)$/;"	f	struct:spdlog::source_loc
source_loc	include/spdlog/common.h	/^struct source_loc$/;"	s	namespace:spdlog
source_location_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit source_location_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
space	include/spdlog/fmt/bundled/format.h	/^enum type { none, minus, plus, space };$/;"	e	enum:sign::type
spdlog	include/spdlog/async.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/async_logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/common-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/common.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/backtracer-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/backtracer.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/circular_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/console_globals.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/file_helper-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/file_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/fmt_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg_buffer-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg_buffer.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/mpmc_blocking_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/null_mutex.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/os-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/os.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/pattern_formatter-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/pattern_formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/periodic_worker-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/periodic_worker.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/registry-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/registry.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/synchronous_factory.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/thread_pool-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/thread_pool.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/fmt/bin_to_hex.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/logger-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/android_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ansicolor_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/base_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/basic_file_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/basic_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/daily_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/dist_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/dup_filter_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/msvc_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/null_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ostream_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/rotating_file_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/rotating_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_color_sinks-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_color_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_sinks-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/syslog_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/systemd_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/wincolor_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/wincolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/spdlog-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/spdlog.h	/^namespace spdlog {$/;"	n
spdlog	tests/test_sink.h	/^namespace spdlog {$/;"	n
spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE spdlog_ex::spdlog_ex(const std::string &msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE spdlog_ex::spdlog_ex(std::string msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	include/spdlog/common.h	/^class spdlog_ex : public std::exception$/;"	c	namespace:spdlog
spec	include/spdlog/fmt/bundled/compile.h	/^    specification spec;$/;"	m	union:internal::format_part::value
spec	include/spdlog/fmt/bundled/format.h	/^  FMT_DEPRECATED format_specs* spec() { return specs_; }$/;"	f	class:internal::arg_formatter_base
spec_handler	include/spdlog/fmt/bundled/chrono.h	/^  struct spec_handler {$/;"	s	struct:formatter
specification	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR specification() : arg_id(0u) {}$/;"	f	struct:internal::format_part::specification
specification	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR specification(internal::string_view_metadata id)$/;"	f	struct:internal::format_part::specification
specification	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR specification(unsigned id) : arg_id(id) {}$/;"	f	struct:internal::format_part::specification
specification	include/spdlog/fmt/bundled/compile.h	/^  struct specification {$/;"	s	struct:internal::format_part
specs	include/spdlog/fmt/bundled/chrono.h	/^  basic_format_specs<Char> specs;$/;"	m	struct:formatter
specs	include/spdlog/fmt/bundled/format.h	/^    const Specs& specs;$/;"	m	struct:internal::basic_writer::int_writer
specs	include/spdlog/fmt/bundled/format.h	/^  format_specs* specs() { return specs_; }$/;"	f	class:internal::arg_formatter_base
specs_	include/spdlog/fmt/bundled/format.h	/^  basic_format_specs<Char>& specs_;$/;"	m	class:internal::specs_setter
specs_	include/spdlog/fmt/bundled/format.h	/^  dynamic_format_specs<char_type>& specs_;$/;"	m	class:internal::dynamic_specs_handler
specs_	include/spdlog/fmt/bundled/format.h	/^  format_specs* specs_;$/;"	m	class:internal::arg_formatter_base
specs_	include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	class:dynamic_formatter
specs_	include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter
specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const Handler& handler, internal::type arg_type)$/;"	f	class:internal::specs_checker
specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const specs_checker& other)$/;"	f	class:internal::specs_checker
specs_checker	include/spdlog/fmt/bundled/format.h	/^template <typename Handler> class specs_checker : public Handler {$/;"	c	namespace:internal
specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_handler(basic_format_specs<char_type>& specs,$/;"	f	class:internal::specs_handler
specs_handler	include/spdlog/fmt/bundled/format.h	/^class specs_handler : public specs_setter<typename Context::char_type> {$/;"	c	namespace:internal
specs_setter	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_setter(const specs_setter& other)$/;"	f	class:internal::specs_setter
specs_setter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR specs_setter(basic_format_specs<Char>& specs)$/;"	f	class:internal::specs_setter
specs_setter	include/spdlog/fmt/bundled/format.h	/^template <typename Char> class specs_setter {$/;"	c	namespace:internal
split_by_extension	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE std::tuple<filename_t, filename_t> file_helper::split_by_extension(const filename_t &fname)$/;"	f	class:spdlog::details::file_helper
spring_green	include/spdlog/fmt/bundled/color.h	/^  spring_green = 0x00FF7F,             \/\/ rgb(0,255,127)$/;"	m	class:color
sprintf	include/spdlog/fmt/bundled/printf.h	/^inline std::basic_string<Char> sprintf(const S& format, const Args&... args) {$/;"	f
sprintf_format	include/spdlog/fmt/bundled/format-inl.h	/^char* sprintf_format(Double value, internal::buffer<char>& buf,$/;"	f	namespace:internal
sprintf_specs	include/spdlog/fmt/bundled/format.h	/^  constexpr sprintf_specs(basic_format_specs<Char> specs)$/;"	f	struct:internal::sprintf_specs
sprintf_specs	include/spdlog/fmt/bundled/format.h	/^struct sprintf_specs {$/;"	s	namespace:internal
standard	include/spdlog/fmt/bundled/chrono.h	/^  standard,$/;"	m	class:internal::numeric_system
std_string_view	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct std_string_view {};$/;"	s	namespace:internal
stderr_color_mt	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name, color_mode mode)$/;"	f	namespace:spdlog
stderr_color_st	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_color_st(const std::string &logger_name, color_mode mode)$/;"	f	namespace:spdlog
stderr_logger_mt	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stderr_logger_st	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stderr_sink	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stderr_sink<ConsoleMutex>::stderr_sink()$/;"	f	class:spdlog::sinks::stderr_sink
stderr_sink	include/spdlog/sinks/stdout_sinks.h	/^class stderr_sink : public stdout_sink_base<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
stderr_sink	src/stdout_sinks.cpp	/^template class spdlog::sinks::stderr_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
stderr_sink	src/stdout_sinks.cpp	/^template class spdlog::sinks::stderr_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
stdout_color_mt	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name, color_mode mode)$/;"	f	namespace:spdlog
stdout_color_st	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_color_st(const std::string &logger_name, color_mode mode)$/;"	f	namespace:spdlog
stdout_logger_example	example/example.cpp	/^void stdout_logger_example()$/;"	f
stdout_logger_mt	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_logger_st	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_sink	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stdout_sink<ConsoleMutex>::stdout_sink()$/;"	f	class:spdlog::sinks::stdout_sink
stdout_sink	include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink : public stdout_sink_base<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
stdout_sink	src/stdout_sinks.cpp	/^template class spdlog::sinks::stdout_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
stdout_sink	src/stdout_sinks.cpp	/^template class spdlog::sinks::stdout_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
stdout_sink_base	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stdout_sink_base<ConsoleMutex>::stdout_sink_base(FILE *file)$/;"	f	class:spdlog::sinks::stdout_sink_base
stdout_sink_base	include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink_base : public sink$/;"	c	namespace:spdlog::sinks
stdout_sink_base	src/stdout_sinks.cpp	/^template class spdlog::sinks::stdout_sink_base<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
stdout_sink_base	src/stdout_sinks.cpp	/^template class spdlog::sinks::stdout_sink_base<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
steel_blue	include/spdlog/fmt/bundled/color.h	/^  steel_blue = 0x4682B4,               \/\/ rgb(70,130,180)$/;"	m	class:color
store	include/spdlog/details/null_mutex.h	/^    void store(int new_value, std::memory_order = std::memory_order_relaxed)$/;"	f	struct:spdlog::details::null_atomic_int
store_	include/spdlog/fmt/bundled/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer
str	include/spdlog/fmt/bundled/format.h	/^    const char* str;$/;"	m	struct:internal::basic_writer::inf_or_nan_writer
str	include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> str;$/;"	m	struct:internal::udl_arg
str	include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
str	include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(str_, size()); }$/;"	f	class:format_int
str	include/spdlog/fmt/bundled/format.h	/^  std::wstring str() const { return std::wstring(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
str_	include/spdlog/details/pattern_formatter-inl.h	/^    std::string str_;$/;"	m	class:spdlog::details::final
str_	include/spdlog/fmt/bundled/format.h	/^  char* str_;$/;"	m	class:format_int
str_writer	include/spdlog/fmt/bundled/format.h	/^  template <typename Char> struct str_writer {$/;"	s	class:internal::basic_writer
strerror_r	include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char*, ...) {$/;"	f
strerror_s	include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_s(char*, std::size_t, ...) {$/;"	f
strftime	include/spdlog/fmt/bundled/chrono.h	/^inline std::size_t strftime(char* str, std::size_t count, const char* format,$/;"	f	namespace:internal
strftime	include/spdlog/fmt/bundled/chrono.h	/^inline std::size_t strftime(wchar_t* str, std::size_t count,$/;"	f	namespace:internal
strikethrough	include/spdlog/fmt/bundled/color.h	/^  strikethrough = 1 << 3$/;"	m	class:color::emphasis
string	include/spdlog/fmt/bundled/core.h	/^    string_value<char_type> string;$/;"	m	union:internal::value::__anon12
string	tests/catch.hpp	/^        auto str() const -> std::string;$/;"	m	class:Catch::ReusableStringStream::std
string	tests/catch.hpp	/^    auto operator + ( StringRef const& lhs, StringRef const& rhs ) -> std::string;$/;"	m	class:Catch::std
string	tests/catch.hpp	/^    auto operator + ( StringRef const& lhs, char const* rhs ) -> std::string;$/;"	m	class:Catch::std
string	tests/catch.hpp	/^    auto operator + ( char const* lhs, StringRef const& rhs ) -> std::string;$/;"	m	class:Catch::std
string	tests/catch.hpp	/^    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;$/;"	m	class:Catch::std
string_type	include/spdlog/fmt/bundled/core.h	/^  string_type,$/;"	e	enum:internal::type
string_value	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct string_value {$/;"	s	namespace:internal
string_view_metadata	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR string_view_metadata() : offset_(0u), size_(0u) {}$/;"	f	struct:internal::string_view_metadata
string_view_metadata	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR string_view_metadata(basic_string_view<Char> primary_string,$/;"	f	struct:internal::string_view_metadata
string_view_metadata	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR string_view_metadata(std::size_t offset, std::size_t size)$/;"	f	struct:internal::string_view_metadata
string_view_metadata	include/spdlog/fmt/bundled/format.h	/^struct string_view_metadata {$/;"	s	namespace:internal
stringify	tests/catch.hpp	/^        inline std::string stringify( NSString* nsstring ) {$/;"	f	namespace:Catch::Detail
stringify	tests/catch.hpp	/^        std::string stringify(const T& e) {$/;"	f	namespace:Catch::Detail
strtod	include/spdlog/fmt/bundled/posix.h	/^  double strtod(const char*& str) const {$/;"	f	class:Locale
strtod_l	include/spdlog/fmt/bundled/posix.h	/^  static double strtod_l(const char* nptr, char** endptr, _locale_t locale) {$/;"	f	class:Locale
swap	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void swap(logger &a, logger &b)$/;"	f	namespace:spdlog
synchronous_factory	include/spdlog/details/synchronous_factory.h	/^struct synchronous_factory$/;"	s	namespace:spdlog
syslog_example	example/example.cpp	/^void syslog_example()$/;"	f
syslog_level	include/spdlog/sinks/systemd_sink.h	/^    int syslog_level(level::level_enum l)$/;"	f	class:spdlog::sinks::systemd_sink
syslog_logger_mt	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_mt(const std::string &logger_name, const std::string &syslog_ident = "", int syslog_option = 0,$/;"	f	namespace:spdlog
syslog_logger_st	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_st(const std::string &logger_name, const std::string &syslog_ident = "", int syslog_option = 0,$/;"	f	namespace:spdlog
syslog_prio_from_level	include/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^    syslog_sink(std::string ident, int syslog_option, int syslog_facility, bool enable_formatting)$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
system_error	include/spdlog/fmt/bundled/format.h	/^  system_error() : std::runtime_error(""), error_code_(0) {}$/;"	f	class:system_error
system_error	include/spdlog/fmt/bundled/format.h	/^  system_error(int error_code, string_view message, const Args&... args)$/;"	f	class:system_error
system_error	include/spdlog/fmt/bundled/format.h	/^class FMT_API system_error : public std::runtime_error {$/;"	c
systemd_logger_mt	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
systemd_logger_st	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^    systemd_sink()$/;"	f	class:spdlog::sinks::systemd_sink
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^class systemd_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
t_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit t_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
tag_	include/spdlog/sinks/android_sink.h	/^    std::string tag_;$/;"	m	class:spdlog::sinks::final
tags	tests/catch.hpp	/^    StringRef tags;$/;"	m	struct:Catch::NameAndTags
tail_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type tail_ = 0;$/;"	m	class:spdlog::details::circular_q
tan	include/spdlog/fmt/bundled/color.h	/^  tan = 0xD2B48C,                      \/\/ rgb(210,180,140)$/;"	m	class:color
target_file_	include/spdlog/sinks/ansicolor_sink.h	/^    FILE *target_file_;$/;"	m	class:spdlog::sinks::ansicolor_sink
target_filename	tests/test_file_helper.cpp	/^static const std::string target_filename = "logs\/file_helper_test.txt";$/;"	v	file:
teal	include/spdlog/fmt/bundled/color.h	/^  teal = 0x008080,                     \/\/ rgb(0,128,128)$/;"	m	class:color
term_color	include/spdlog/fmt/bundled/color.h	/^    uint8_t term_color;$/;"	m	union:color::emphasis::internal::color_type::color_union
terminal_color	include/spdlog/fmt/bundled/color.h	/^enum class terminal_color : uint8_t {$/;"	c	class:color
test_pad2	tests/test_fmt_helper.cpp	/^void test_pad2(int n, const char *expected)$/;"	f
test_pad3	tests/test_fmt_helper.cpp	/^void test_pad3(uint32_t n, const char *expected)$/;"	f
test_pad6	tests/test_fmt_helper.cpp	/^void test_pad6(std::size_t n, const char *expected)$/;"	f
test_pad9	tests/test_fmt_helper.cpp	/^void test_pad9(std::size_t n, const char *expected)$/;"	f
test_path	tests/test_pattern_formatter.cpp	/^static const char *test_path = "\/a\/b\/\/myfile.cpp";$/;"	v	file:
test_path	tests/test_pattern_formatter.cpp	/^static const char *test_path = "\\\\a\\\\b\\\\myfile.cpp";$/;"	v	file:
test_rotate	tests/test_daily_logger.cpp	/^static void test_rotate(int days_to_run, uint16_t max_days, uint16_t expected_n_files)$/;"	f	file:
test_sink	tests/test_sink.h	/^class test_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
test_split_ext	tests/test_file_helper.cpp	/^static void test_split_ext(const char *fname, const char *expect_base, const char *expect_ext)$/;"	f	file:
test_stream	include/spdlog/fmt/bundled/ostream.h	/^template <typename Char> struct test_stream : std::basic_ostream<Char> {$/;"	s	namespace:internal
tested_logger_name	tests/test_registry.cpp	/^static const char *tested_logger_name = "null_logger";$/;"	v	file:
tested_logger_name2	tests/test_registry.cpp	/^static const char *tested_logger_name2 = "null_logger2";$/;"	v	file:
text	include/spdlog/fmt/bundled/compile.h	/^    internal::string_view_metadata text;$/;"	m	union:internal::format_part::value
text	include/spdlog/fmt/bundled/compile.h	/^  enum class kind { argument_id, named_argument_id, text, specification };$/;"	m	class:internal::format_part::kind
text_style	include/spdlog/fmt/bundled/color.h	/^class text_style {$/;"	c	class:color::emphasis
thistle	include/spdlog/fmt/bundled/color.h	/^  thistle = 0xD8BFD8,                  \/\/ rgb(216,191,216)$/;"	m	class:color
thousands_sep	include/spdlog/fmt/bundled/format.h	/^template <> inline wchar_t thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep	include/spdlog/fmt/bundled/format.h	/^template <typename Char> inline Char thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep_impl	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Char> FMT_FUNC Char thousands_sep_impl(locale_ref loc) {$/;"	f	namespace:internal
thread_fun	bench/async_bench.cpp	/^void thread_fun(std::shared_ptr<spdlog::logger> logger, int howmany)$/;"	f
thread_pool	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::details::thread_pool> thread_pool()$/;"	f	namespace:spdlog
thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::thread_pool(size_t q_max_items, size_t threads_n)$/;"	f	class:spdlog::details::thread_pool
thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::thread_pool(size_t q_max_items, size_t threads_n, std::function<void()> on_thread_start)$/;"	f	class:spdlog::details::thread_pool
thread_pool	include/spdlog/details/thread_pool.h	/^class thread_pool$/;"	c	namespace:spdlog::details
thread_pool_	include/spdlog/async_logger.h	/^    std::weak_ptr<details::thread_pool> thread_pool_;$/;"	m	class:spdlog::final
threads_	include/spdlog/details/thread_pool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:spdlog::details::thread_pool
throw_if_exists_	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::throw_if_exists_(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
time	include/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
time	include/spdlog/fmt/bundled/chrono.h	/^  std::tm time() const {$/;"	f	struct:internal::chrono_formatter
time_fraction	include/spdlog/details/fmt_helper.h	/^inline ToDuration time_fraction(log_clock::time_point tp)$/;"	f	namespace:spdlog::details::fmt_helper
tm_format	include/spdlog/fmt/bundled/chrono.h	/^  basic_memory_buffer<Char> tm_format;$/;"	m	struct:formatter
to12h	include/spdlog/details/pattern_formatter-inl.h	/^static int to12h(const tm &t)$/;"	f	namespace:spdlog::details
to_char8_t	include/spdlog/fmt/bundled/format.h	/^inline char8_t to_char8_t(char c) { return static_cast<char8_t>(c); }$/;"	f	namespace:internal
to_hex	include/spdlog/fmt/bin_to_hex.h	/^inline details::bytes_range<It> to_hex(const It range_begin, const It range_end)$/;"	f	namespace:spdlog
to_hex	include/spdlog/fmt/bin_to_hex.h	/^inline details::bytes_range<typename Container::const_iterator> to_hex(const Container &container)$/;"	f	namespace:spdlog
to_nonnegative_int	include/spdlog/fmt/bundled/chrono.h	/^inline int to_nonnegative_int(T value, int upper) {$/;"	f	namespace:internal
to_string	include/spdlog/fmt/bundled/format.h	/^std::basic_string<Char> to_string(const basic_memory_buffer<Char, SIZE>& buf) {$/;"	f
to_string	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline std::string to_string(const T& value) {$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^constexpr basic_string_view<typename S::char_type> to_string_view(const S& s) {$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline basic_string_view<Char> to_string_view($/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline basic_string_view<Char> to_string_view(basic_string_view<Char> s) {$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline basic_string_view<Char> to_string_view(const Char* s) {$/;"	f
to_unsigned	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value) {$/;"	f	namespace:internal
to_view	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_string_view<Char> to_view(const Char* str) const {$/;"	f	struct:internal::string_view_metadata
to_wstring	include/spdlog/fmt/bundled/format.h	/^template <typename T> inline std::wstring to_wstring(const T& value) {$/;"	f
tomato	include/spdlog/fmt/bundled/color.h	/^  tomato = 0xFF6347,                   \/\/ rgb(255,99,71)$/;"	m	class:color
total_pad_	include/spdlog/details/pattern_formatter-inl.h	/^    size_t total_pad_;$/;"	m	class:spdlog::details::scoped_padder
tp_	include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> tp_;$/;"	m	class:spdlog::details::registry
tp_mutex	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::recursive_mutex &registry::tp_mutex()$/;"	f	class:spdlog::details::registry
tp_mutex_	include/spdlog/details/registry.h	/^    std::recursive_mutex tp_mutex_;$/;"	m	class:spdlog::details::registry
trace	include/spdlog/common.h	/^    trace = SPDLOG_LEVEL_TRACE,$/;"	e	enum:spdlog::level::level_enum
trace	include/spdlog/logger.h	/^    void trace(const T &msg)$/;"	f	class:spdlog::logger
trace	include/spdlog/logger.h	/^    void trace(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
trace	include/spdlog/logger.h	/^    void trace(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
trace	include/spdlog/spdlog.h	/^inline void trace(const T &msg)$/;"	f	namespace:spdlog
trace	include/spdlog/spdlog.h	/^inline void trace(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
trace	include/spdlog/spdlog.h	/^inline void trace(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
trace_example	example/example.cpp	/^void trace_example()$/;"	f
tracer_	include/spdlog/logger.h	/^    details::backtracer tracer_;$/;"	m	class:spdlog::logger
trailing_zeros	include/spdlog/fmt/bundled/format.h	/^  bool trailing_zeros;$/;"	m	struct:internal::gen_digits_params
truncate_	include/spdlog/sinks/daily_file_sink.h	/^    bool truncate_;$/;"	m	class:spdlog::sinks::final
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^class truncating_iterator<OutputIt, std::false_type>$/;"	c	namespace:internal
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^class truncating_iterator<OutputIt, std::true_type>$/;"	c	namespace:internal
truncating_iterator_base	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator_base(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator_base
truncating_iterator_base	include/spdlog/fmt/bundled/format.h	/^template <typename OutputIt> class truncating_iterator_base {$/;"	c	namespace:internal
try_lock	include/spdlog/details/null_mutex.h	/^    bool try_lock() const$/;"	f	struct:spdlog::details::null_mutex
turquoise	include/spdlog/fmt/bundled/color.h	/^  turquoise = 0x40E0D0,                \/\/ rgb(64,224,208)$/;"	m	class:color
type	include/spdlog/fmt/bundled/core.h	/^  internal::type type() const { return type_; }$/;"	f	class:basic_format_arg
type	include/spdlog/fmt/bundled/core.h	/^enum type {$/;"	g	namespace:internal
type	include/spdlog/fmt/bundled/format.h	/^  char type;$/;"	m	struct:basic_format_specs
type	include/spdlog/fmt/bundled/format.h	/^  char type;$/;"	m	struct:float_spec_handler
type	include/spdlog/fmt/bundled/format.h	/^  char type;$/;"	m	struct:internal::sprintf_specs
type	include/spdlog/fmt/bundled/format.h	/^enum type { none, left, right, center, numeric };$/;"	g	namespace:align
type	include/spdlog/fmt/bundled/format.h	/^enum type { none, minus, plus, space };$/;"	g	namespace:sign
type_	include/spdlog/fmt/bundled/core.h	/^  internal::type type_;$/;"	m	class:basic_format_arg
type_	include/spdlog/fmt/bundled/format.h	/^  char type_;$/;"	m	class:internal::char_specs_checker
type_	include/spdlog/fmt/bundled/printf.h	/^  char_type type_;$/;"	m	class:internal::arg_converter
type_constant	include/spdlog/fmt/bundled/core.h	/^struct type_constant : std::integral_constant<type, custom_type> {};$/;"	s	namespace:internal
u8string_view	include/spdlog/fmt/bundled/format.h	/^  u8string_view(const char* s)$/;"	f	class:u8string_view
u8string_view	include/spdlog/fmt/bundled/format.h	/^class u8string_view : public basic_string_view<char8_t> {$/;"	c
udl_arg	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct udl_arg {$/;"	s	namespace:internal
udl_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename Char, Char... CHARS> class udl_formatter {$/;"	c	namespace:internal
uint_type	include/spdlog/fmt/bundled/core.h	/^  uint_type,$/;"	e	enum:internal::type
uint_value	include/spdlog/fmt/bundled/core.h	/^    unsigned uint_value;$/;"	m	union:internal::value::__anon12
ulong_long_type	include/spdlog/fmt/bundled/core.h	/^  ulong_long_type,$/;"	e	enum:internal::type
ulong_long_value	include/spdlog/fmt/bundled/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anon12
underline	include/spdlog/fmt/bundled/color.h	/^  underline = 1 << 2,$/;"	m	class:color::emphasis
underline	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t underline = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink
unknown	include/spdlog/fmt/bundled/format-inl.h	/^enum round_direction { unknown, up, down };$/;"	e	enum:internal::round_direction
unlock	include/spdlog/details/null_mutex.h	/^    void unlock() const {}$/;"	f	struct:spdlog::details::null_mutex
up	include/spdlog/fmt/bundled/format-inl.h	/^enum round_direction { unknown, up, down };$/;"	e	enum:internal::round_direction
update_string_views	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE void log_msg_buffer::update_string_views()$/;"	f	class:spdlog::details::log_msg_buffer
upper	include/spdlog/fmt/bundled/format.h	/^  bool upper;$/;"	m	struct:float_spec_handler
upper	include/spdlog/fmt/bundled/format.h	/^  bool upper;$/;"	m	struct:internal::gen_digits_params
use_grisu	include/spdlog/fmt/bundled/format.h	/^template <typename T> constexpr bool use_grisu() {$/;"	f	namespace:internal
use_locale	include/spdlog/fmt/bundled/format.h	/^  bool use_locale;$/;"	m	struct:float_spec_handler
use_raw_msg_	include/spdlog/sinks/android_sink.h	/^    bool use_raw_msg_;$/;"	m	class:spdlog::sinks::final
use_uppercase	include/spdlog/fmt/bin_to_hex.h	/^    bool use_uppercase = false;$/;"	m	struct:fmt::formatter
user_defined_example	example/example.cpp	/^void user_defined_example()$/;"	f
utc_minutes_offset	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int utc_minutes_offset(const std::tm &tm)$/;"	f	namespace:spdlog::details::os
utf16_to_utf8	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf16_to_utf8::utf16_to_utf8(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	include/spdlog/fmt/bundled/format.h	/^  utf16_to_utf8() {}$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	include/spdlog/fmt/bundled/format.h	/^class utf16_to_utf8 {$/;"	c	namespace:internal
utf8_to_utf16	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:internal::utf8_to_utf16
utf8_to_utf16	include/spdlog/fmt/bundled/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:internal
utils	bench/utils.h	/^namespace utils {$/;"	n
v_	include/spdlog/details/circular_q.h	/^    std::vector<T> v_;$/;"	m	class:spdlog::details::circular_q
v_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit v_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
val	include/spdlog/fmt/bundled/compile.h	/^    } val;$/;"	m	struct:internal::format_part::argument_id	typeref:union:internal::format_part::argument_id::value
val	include/spdlog/fmt/bundled/compile.h	/^  } val;$/;"	m	struct:internal::format_part	typeref:union:internal::format_part::value
val	include/spdlog/fmt/bundled/format.h	/^  } val;$/;"	m	struct:internal::arg_ref	typeref:union:internal::arg_ref::value
value	include/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	include/spdlog/fmt/bundled/color.h	/^  } value;$/;"	m	struct:color::emphasis::internal::color_type	typeref:union:color::emphasis::internal::color_type::color_union
value	include/spdlog/fmt/bundled/compile.h	/^      FMT_CONSTEXPR value() : index(0u) {}$/;"	f	union:internal::format_part::argument_id::value
value	include/spdlog/fmt/bundled/compile.h	/^      FMT_CONSTEXPR value(internal::string_view_metadata id)$/;"	f	union:internal::format_part::argument_id::value
value	include/spdlog/fmt/bundled/compile.h	/^      FMT_CONSTEXPR value(unsigned id) : index(id) {}$/;"	f	union:internal::format_part::argument_id::value
value	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value() : arg_id(0u) {}$/;"	f	union:internal::format_part::value
value	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value(internal::string_view_metadata t) : text(t) {}$/;"	f	union:internal::format_part::value
value	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value(named_argument_id named_id)$/;"	f	union:internal::format_part::value
value	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value(specification s) : spec(s) {}$/;"	f	union:internal::format_part::value
value	include/spdlog/fmt/bundled/compile.h	/^    FMT_CONSTEXPR value(unsigned id) : arg_id(id) {}$/;"	f	union:internal::format_part::value
value	include/spdlog/fmt/bundled/compile.h	/^    union value {$/;"	u	struct:internal::format_part::argument_id
value	include/spdlog/fmt/bundled/compile.h	/^  union value {$/;"	u	struct:internal::format_part
value	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR value(int val = 0) : int_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR value(unsigned val) : uint_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  const void* value;$/;"	m	struct:internal::custom_value
value	include/spdlog/fmt/bundled/core.h	/^  template <typename T> value(const T& val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(basic_string_view<char_type> val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(bool val) : bool_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(char_type val) : char_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const char_type* val) { string.data = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const named_arg_base<char_type>& val) { named_arg = &val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const void* val) : pointer(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(double val) : double_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(long double val) : long_double_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(long long val) : long_long_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(unsigned long long val) : ulong_long_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class value {$/;"	c	namespace:internal
value	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int value =$/;"	m	struct:internal::bits
value	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR value() : index(0u) {}$/;"	f	union:internal::arg_ref::value
value	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR value(int id) : index(id) {}$/;"	f	union:internal::arg_ref::value
value	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR value(string_view_metadata n) : name(n) {}$/;"	f	union:internal::arg_ref::value
value	include/spdlog/fmt/bundled/format.h	/^    UIntPtr value;$/;"	m	struct:internal::basic_writer::pointer_writer
value	include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
value	include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_writer
value	include/spdlog/fmt/bundled/format.h	/^    const char_type* value;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
value	include/spdlog/fmt/bundled/format.h	/^  static const bool value = !std::is_const<remove_reference_t<type>>::value;$/;"	m	class:internal::is_output_iterator
value	include/spdlog/fmt/bundled/format.h	/^  union value {$/;"	u	struct:internal::arg_ref
value	include/spdlog/fmt/bundled/format.h	/^  unsigned char value[sizeof(void*)];$/;"	m	struct:internal::fallback_uintptr
value	include/spdlog/fmt/bundled/ostream.h	/^  static const bool value = result::value;$/;"	m	class:internal::is_streamable
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_like_std_string
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_tuple_like_
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_range
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_tuple_like
value	tests/catch.hpp	/^            static const bool value = decltype(test<std::ostream, const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value_	include/spdlog/fmt/bundled/core.h	/^  internal::value<Context> value_;$/;"	m	class:basic_format_arg
value_	include/spdlog/fmt/bundled/posix.h	/^  explicit error_code(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:error_code
value_	include/spdlog/fmt/bundled/posix.h	/^  int value_;$/;"	m	class:error_code
verify_file	bench/async_bench.cpp	/^void verify_file(const char *filename, int expected_count)$/;"	f
vformat	include/spdlog/fmt/bundled/color.h	/^inline std::basic_string<Char> vformat($/;"	f	class:color::emphasis
vformat	include/spdlog/fmt/bundled/color.h	/^std::basic_string<Char> vformat(const text_style& ts,$/;"	f	namespace:color::emphasis::internal
vformat	include/spdlog/fmt/bundled/format.h	/^inline std::basic_string<Char> internal::vformat($/;"	f	class:internal
vformat	include/spdlog/fmt/bundled/locale.h	/^inline std::basic_string<Char> vformat($/;"	f
vformat	include/spdlog/fmt/bundled/locale.h	/^std::basic_string<Char> vformat(const std::locale& loc,$/;"	f	namespace:internal
vformat_to	include/spdlog/fmt/bundled/format.h	/^inline OutputIt vformat_to(OutputIt out, const S& format_str,$/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^inline typename buffer_context<Char>::iterator vformat_to($/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^typename Context::iterator vformat_to($/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^typename buffer_context<Char>::iterator internal::vformat_to($/;"	f	class:internal
vformat_to	include/spdlog/fmt/bundled/locale.h	/^inline OutputIt vformat_to(OutputIt out, const std::locale& loc,$/;"	f
vformat_to	include/spdlog/fmt/bundled/locale.h	/^typename buffer_context<Char>::iterator vformat_to($/;"	f	namespace:internal
vformat_to_n	include/spdlog/fmt/bundled/format.h	/^inline format_to_n_result<OutputIt> vformat_to_n($/;"	f
vfprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::FILE* f, const S& format,$/;"	f
vfprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::basic_ostream<Char>& os, const S& format,$/;"	f
violet	include/spdlog/fmt/bundled/color.h	/^  violet = 0xEE82EE,                   \/\/ rgb(238,130,238)$/;"	m	class:color
void_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename... Ts> struct void_t_impl { using type = void; };$/;"	s	namespace:internal
vprint	include/spdlog/fmt/bundled/color.h	/^void vprint(std::FILE* f, const text_style& ts, const S& format,$/;"	f	class:color::emphasis
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE* f, string_view format_str, format_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE* f, wstring_view format_str, wformat_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(wstring_view format_str, wformat_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/ostream.h	/^void vprint(std::basic_ostream<Char>& os, basic_string_view<Char> format_str,$/;"	f
vprint	include/spdlog/fmt/bundled/posix.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file
vprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vprintf(const S& format,$/;"	f
vprintf	include/spdlog/fmt/bundled/printf.h	/^typename ArgFormatter::iterator vprintf(internal::buffer<Char>& out,$/;"	f
vsprintf	include/spdlog/fmt/bundled/printf.h	/^inline std::basic_string<Char> vsprintf($/;"	f
warn	include/spdlog/common.h	/^    warn = SPDLOG_LEVEL_WARN,$/;"	e	enum:spdlog::level::level_enum
warn	include/spdlog/logger.h	/^    void warn(const T &msg)$/;"	f	class:spdlog::logger
warn	include/spdlog/logger.h	/^    void warn(string_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
warn	include/spdlog/logger.h	/^    void warn(wstring_view_t fmt, const Args &... args)$/;"	f	class:spdlog::logger
warn	include/spdlog/spdlog.h	/^inline void warn(const T &msg)$/;"	f	namespace:spdlog
warn	include/spdlog/spdlog.h	/^inline void warn(string_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
warn	include/spdlog/spdlog.h	/^inline void warn(wstring_view_t fmt, const Args &... args)$/;"	f	namespace:spdlog
wheat	include/spdlog/fmt/bundled/color.h	/^  wheat = 0xF5DEB3,                    \/\/ rgb(245,222,179)$/;"	m	class:color
which	include/spdlog/fmt/bundled/compile.h	/^    which_arg_id which;$/;"	m	struct:internal::format_part::argument_id
which	include/spdlog/fmt/bundled/compile.h	/^  kind which;$/;"	m	struct:internal::format_part
which_arg_id	include/spdlog/fmt/bundled/compile.h	/^    enum class which_arg_id { index, named_index };$/;"	c	struct:internal::format_part::argument_id
white	include/spdlog/fmt/bundled/color.h	/^  white = 0xFFFFFF,                    \/\/ rgb(255,255,255)$/;"	m	class:color
white	include/spdlog/fmt/bundled/color.h	/^  white,$/;"	m	class:color::terminal_color
white	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t white = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink
white_smoke	include/spdlog/fmt/bundled/color.h	/^  white_smoke = 0xF5F5F5,              \/\/ rgb(245,245,245)$/;"	m	class:color
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	class:internal::basic_writer::grisu_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:internal::basic_writer::double_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:internal::basic_writer::inf_or_nan_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:internal::basic_writer::pointer_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size_; }$/;"	f	struct:internal::basic_writer::padded_int_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const {$/;"	f	struct:internal::basic_writer::str_writer
width	include/spdlog/fmt/bundled/format.h	/^  int width;$/;"	m	struct:basic_format_specs
width_	include/spdlog/details/pattern_formatter.h	/^    const size_t width_ = 0;$/;"	m	struct:spdlog::details::padding_info
width_adapter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_adapter(SpecHandler& h) : handler(h) {}$/;"	f	struct:internal::width_adapter
width_adapter	include/spdlog/fmt/bundled/format.h	/^template <typename SpecHandler, typename Char> struct width_adapter {$/;"	s	namespace:internal
width_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_checker(ErrorHandler& eh) : handler_(eh) {}$/;"	f	class:internal::width_checker
width_checker	include/spdlog/fmt/bundled/format.h	/^template <typename ErrorHandler> class width_checker {$/;"	c	namespace:internal
width_ref	include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:internal::dynamic_format_specs
wincolor_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_sink<ConsoleMutex>::wincolor_sink(HANDLE out_handle, color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink : public sink$/;"	c	namespace:spdlog::sinks
wincolor_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
wincolor_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
wincolor_stderr_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_stderr_sink<ConsoleMutex>::wincolor_stderr_sink(color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_stderr_sink
wincolor_stderr_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stderr_sink : public wincolor_sink<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_stderr_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
wincolor_stderr_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_stderr_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
wincolor_stdout_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_stdout_sink<ConsoleMutex>::wincolor_stdout_sink(color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_stdout_sink
wincolor_stdout_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stdout_sink : public wincolor_sink<ConsoleMutex>$/;"	c	namespace:spdlog::sinks
wincolor_stdout_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_stdout_sink<spdlog::details::console_mutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
wincolor_stdout_sink	src/color_sinks.cpp	/^template class spdlog::sinks::wincolor_stdout_sink<spdlog::details::console_nullmutex>;$/;"	m	class:spdlog::sinks	typeref:class:spdlog::sinks::	file:
windows_error	include/spdlog/fmt/bundled/format.h	/^  windows_error(int error_code, string_view message, const Args&... args) {$/;"	f	class:windows_error
windows_error	include/spdlog/fmt/bundled/format.h	/^class windows_error : public system_error {$/;"	c
worker_loop_	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::worker_loop_()$/;"	f	class:spdlog::details::thread_pool
worker_ptr	include/spdlog/details/thread_pool.h	/^    async_logger_ptr worker_ptr;$/;"	m	struct:spdlog::details::async_msg
worker_thread_	include/spdlog/details/periodic_worker.h	/^    std::thread worker_thread_;$/;"	m	class:spdlog::details::periodic_worker
wreset_color	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const wchar_t basic_data<T>::wreset_color[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data
wreset_color	include/spdlog/fmt/bundled/format.h	/^  static const wchar_t wreset_color[5];$/;"	m	struct:internal::basic_data
write	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::write(const memory_buf_t &buf)$/;"	f	class:spdlog::details::file_helper
write	include/spdlog/fmt/bundled/chrono.h	/^  void write(Rep value, int width) {$/;"	f	struct:internal::chrono_formatter
write	include/spdlog/fmt/bundled/format.h	/^  void write(Char value) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(basic_string_view<Char> s,$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(bool value) {$/;"	f	class:internal::arg_formatter_base
write	include/spdlog/fmt/bundled/format.h	/^  void write(char value) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(const Char* s, std::size_t size, const format_specs& specs) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(const char_type* value) {$/;"	f	class:internal::arg_formatter_base
write	include/spdlog/fmt/bundled/format.h	/^  void write(double value, const format_specs& specs = format_specs()) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(int value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long double value, const format_specs& specs = format_specs()) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(string_view value) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned value) { write_decimal(value); }$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(wstring_view value) {$/;"	f	class:internal::basic_writer
write	include/spdlog/fmt/bundled/ostream.h	/^void write(std::basic_ostream<Char>& os, buffer<Char>& buf) {$/;"	f	namespace:internal
writeToStream	tests/catch.hpp	/^        void writeToStream( std::ostream &os ) const {$/;"	f	struct:Catch::Parser
write_char	include/spdlog/fmt/bundled/format.h	/^  void write_char(char_type value) {$/;"	f	class:internal::arg_formatter_base
write_decimal	include/spdlog/fmt/bundled/format.h	/^  template <typename Int> void write_decimal(Int value) {$/;"	f	class:internal::basic_writer
write_double	include/spdlog/fmt/bundled/format.h	/^void internal::basic_writer<Range>::write_double(T value,$/;"	f	class:internal::basic_writer
write_exponent	include/spdlog/fmt/bundled/format.h	/^template <typename Char, typename It> It write_exponent(int exp, It it) {$/;"	f	namespace:internal
write_int	include/spdlog/fmt/bundled/format.h	/^  void write_int(T value, const Spec& spec) {$/;"	f	class:internal::basic_writer
write_int	include/spdlog/fmt/bundled/format.h	/^  void write_int(int num_digits, string_view prefix, format_specs specs, F f) {$/;"	f	class:internal::basic_writer
write_nan	include/spdlog/fmt/bundled/chrono.h	/^  void write_nan() { std::copy_n("nan", 3, out); }$/;"	f	struct:internal::chrono_formatter
write_ninf	include/spdlog/fmt/bundled/chrono.h	/^  void write_ninf() { std::copy_n("-inf", 4, out); }$/;"	f	struct:internal::chrono_formatter
write_null_pointer	include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(char) {$/;"	f	class:printf_arg_formatter
write_null_pointer	include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(wchar_t) {$/;"	f	class:printf_arg_formatter
write_padded	include/spdlog/fmt/bundled/format.h	/^  template <typename F> void write_padded(const format_specs& specs, F&& f) {$/;"	f	class:internal::basic_writer
write_pair	include/spdlog/fmt/bundled/format.h	/^  void write_pair(unsigned N, uint32_t index) {$/;"	f	class:internal::decimal_formatter
write_pinf	include/spdlog/fmt/bundled/chrono.h	/^  void write_pinf() { std::copy_n("inf", 3, out); }$/;"	f	struct:internal::chrono_formatter
write_pointer	include/spdlog/fmt/bundled/format.h	/^  void write_pointer(UIntPtr value, const format_specs* specs) {$/;"	f	class:internal::basic_writer
write_pointer	include/spdlog/fmt/bundled/format.h	/^  void write_pointer(const void* p) {$/;"	f	class:internal::arg_formatter_base
write_sign	include/spdlog/fmt/bundled/chrono.h	/^  void write_sign() {$/;"	f	struct:internal::chrono_formatter
write_to_file_	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::write_to_file_(const memory_buf_t &formatted)$/;"	f	class:spdlog::sinks::wincolor_sink
write_with_helper	tests/test_file_helper.cpp	/^static void write_with_helper(file_helper &helper, size_t howmany)$/;"	f	file:
writer	include/spdlog/fmt/bundled/format.h	/^  writer_type& writer() { return writer_; }$/;"	f	class:internal::arg_formatter_base
wstr_to_utf8buf	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE void wstr_to_utf8buf(wstring_view_t wstr, memory_buf_t &target)$/;"	f	namespace:spdlog::details::os
yellow	include/spdlog/fmt/bundled/color.h	/^  yellow = 0xFFFF00,                   \/\/ rgb(255,255,0)$/;"	m	class:color
yellow	include/spdlog/fmt/bundled/color.h	/^  yellow,$/;"	m	class:color::terminal_color
yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink
yellow_bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t yellow_bold = "\\033[33m\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
yellow_green	include/spdlog/fmt/bundled/color.h	/^  yellow_green = 0x9ACD32              \/\/ rgb(154,205,50)$/;"	m	class:color
z_formatter	include/spdlog/details/pattern_formatter-inl.h	/^    explicit z_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
zero_or_powers_of_10_32	include/spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::zero_or_powers_of_10_32[] = {0,$/;"	m	class:internal::basic_data
zero_or_powers_of_10_32	include/spdlog/fmt/bundled/format.h	/^  static const uint32_t zero_or_powers_of_10_32[];$/;"	m	struct:internal::basic_data
zero_or_powers_of_10_64	include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::zero_or_powers_of_10_64[] = {$/;"	m	class:internal::basic_data
zero_or_powers_of_10_64	include/spdlog/fmt/bundled/format.h	/^  static const uint64_t zero_or_powers_of_10_64[];$/;"	m	struct:internal::basic_data
~Locale	include/spdlog/fmt/bundled/posix.h	/^  ~Locale() { freelocale(locale_); }$/;"	f	class:Locale
~arg_map	include/spdlog/fmt/bundled/core.h	/^  ~arg_map() { delete[] map_; }$/;"	f	class:internal::arg_map
~basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer
~buffer	include/spdlog/fmt/bundled/core.h	/^  virtual ~buffer() {}$/;"	f	class:internal::buffer
~file_helper	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE file_helper::~file_helper()$/;"	f	class:spdlog::details::file_helper
~periodic_worker	include/spdlog/details/periodic_worker-inl.h	/^SPDLOG_INLINE periodic_worker::~periodic_worker()$/;"	f	class:spdlog::details::periodic_worker
~scoped_padder	include/spdlog/details/pattern_formatter-inl.h	/^    ~scoped_padder()$/;"	f	class:spdlog::details::scoped_padder
~thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::~thread_pool()$/;"	f	class:spdlog::details::thread_pool
~wincolor_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_sink<ConsoleMutex>::~wincolor_sink()$/;"	f	class:spdlog::sinks::wincolor_sink
